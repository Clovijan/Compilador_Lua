
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftGTLTGTEQUALSLTEQUALSEQUALSDIFleftCONCATleftPLUSMINUSleftPERCENTUALTIMESDIVIDEleftNOTTAGleftEXPOAND ATRIB BREAK COLON COMMA CONCAT DIF DIVIDE DO DUALCOLON ELSE ELSEIF END EQUALS EXPO FALSE FOR FUNCTION GT GTEQUALS IF IN LBRACE LCOLCH LOCAL LPAREN LT LTEQUALS MINUS NAME NIL NOT NUMBER OR PERCENTUAL PLUS RBRACE RCOLCH REPEAT RETURN RPAREN SEMICOLON STRING TAG THEN TIMES TRUE UNTIL VARARGS WHILEprogram : block\n               | function \n               | function programblock : command\n             | command blockcommand : list_vars ATRIB list_exps\n               | call_function\n               | rotulo\n               | BREAK\n               | DO block END\n               | struct_while\n               | struct_repeat\n               | if\n               | struct_for\n               | struct_for_in\n               | LOCAL list_vars ATRIB list_exps\n               | command_retcommand_ret : RETURN SEMICOLON\n                   | RETURN list_exps\n                   | RETURN list_exps SEMICOLON rotulo : DUALCOLON NAME DUALCOLONname_function : NAME\n                     | NAME COLON NAMElist_vars : var \n                 | var COMMA list_varsvar : NAME \n           | prefix_exp LCOLCH exp RCOLCH prefix_exp : var\n                  | call_function list_names : list_names COMMA NAME  \n                  | NAMElist_exps : exp COMMA list_exps\n                 | expexp : NIL \n           | FALSE\n           | TRUE \n           | NUMBER\n           | STRING \n           | VARARGS \n           | def_function \n           | prefix_exp\n           | TAG exp\n           | MINUS exp\n           | NOT exp\n           | exp PLUS exp\n           | exp MINUS exp\n           | exp TIMES exp\n           | exp DIVIDE exp\n           | exp EXPO exp\n           | exp PERCENTUAL exp\n           | exp CONCAT exp\n           | exp LT exp\n           | exp LTEQUALS exp\n           | exp GT exp\n           | exp GTEQUALS exp\n           | exp EQUALS exp\n           | exp DIF exp\n           | exp AND exp\n           | exp OR expcall_function : prefix_exp args args : LPAREN list_exps RPAREN\n             | LPAREN RPARENdef_function : functionbody_function : LPAREN list_pars RPAREN block ENDlist_pars : list_names\n                 | list_names COMMA VARARGS\n                 | VARARGSlist_fields : field \n                   | field separator_fields list_fields\n                   | field_empty\n                   | field_empty separator_fields list_fieldsfield_empty : LCOLCH exp RCOLCH\n                   | NAMEfield : LCOLCH exp RCOLCH ATRIB exp\n             | NAME ATRIB exp separator_fields : COMMA\n                        | SEMICOLONlocal_var : LOCAL list_names ATRIB list_exps\n                 | LOCAL list_names\n                 | LOCAL NAME ATRIB expfunction : FUNCTION name_function body_functionif : IF exp THEN block END\n          | IF exp THEN block else1\n          | IF exp THEN block else_if else1else_if : ELSEIF exp THEN block\n               | ELSEIF exp THEN block else_ifelse1 : ELSE block ENDstruct_while : WHILE exp DO block ENDstruct_for : FOR NAME ATRIB exp COMMA exp DO block END\n                  | FOR NAME ATRIB exp COMMA exp COMMA exp DO block ENDstruct_for_in : FOR list_names IN list_exps DO block ENDstruct_repeat : REPEAT block UNTIL exp'
    
_lr_action_items = {'FUNCTION':([0,3,22,24,26,31,38,39,50,51,52,62,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,146,149,],[5,5,5,5,5,5,5,5,5,5,5,-81,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-64,5,]),'BREAK':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,131,132,133,135,138,141,146,147,148,150,151,156,157,159,],[9,9,9,-7,-8,-9,9,-11,-12,-13,-14,-15,-17,-26,9,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,9,-42,-43,-44,9,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,9,-88,-82,-83,9,9,-84,-64,-87,9,9,-91,9,-89,-90,]),'DO':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,41,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,128,129,131,132,133,135,138,141,144,146,147,148,150,151,153,156,157,159,],[10,10,10,-7,-8,-9,10,-11,-12,-13,-14,-15,-17,-26,10,-29,-60,73,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,10,-42,-43,-44,10,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,138,-32,10,-88,-82,-83,10,10,-84,150,-64,-87,10,10,-91,156,10,-89,-90,]),'LOCAL':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,131,132,133,135,138,141,146,147,148,150,151,156,157,159,],[16,16,16,-7,-8,-9,16,-11,-12,-13,-14,-15,-17,-26,16,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,16,-42,-43,-44,16,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,16,-88,-82,-83,16,16,-84,-64,-87,16,16,-91,16,-89,-90,]),'DUALCOLON':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,40,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,131,132,133,135,138,141,146,147,148,150,151,156,157,159,],[20,20,20,-7,-8,-9,20,-11,-12,-13,-14,-15,-17,-26,20,-29,-60,72,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,20,-42,-43,-44,20,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,20,-88,-82,-83,20,20,-84,-64,-87,20,20,-91,20,-89,-90,]),'WHILE':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,131,132,133,135,138,141,146,147,148,150,151,156,157,159,],[22,22,22,-7,-8,-9,22,-11,-12,-13,-14,-15,-17,-26,22,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,22,-42,-43,-44,22,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,22,-88,-82,-83,22,22,-84,-64,-87,22,22,-91,22,-89,-90,]),'REPEAT':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,131,132,133,135,138,141,146,147,148,150,151,156,157,159,],[23,23,23,-7,-8,-9,23,-11,-12,-13,-14,-15,-17,-26,23,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,23,-42,-43,-44,23,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,23,-88,-82,-83,23,23,-84,-64,-87,23,23,-91,23,-89,-90,]),'IF':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,131,132,133,135,138,141,146,147,148,150,151,156,157,159,],[24,24,24,-7,-8,-9,24,-11,-12,-13,-14,-15,-17,-26,24,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,24,-42,-43,-44,24,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,24,-88,-82,-83,24,24,-84,-64,-87,24,24,-91,24,-89,-90,]),'FOR':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,131,132,133,135,138,141,146,147,148,150,151,156,157,159,],[25,25,25,-7,-8,-9,25,-11,-12,-13,-14,-15,-17,-26,25,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,25,-42,-43,-44,25,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,25,-88,-82,-83,25,25,-84,-64,-87,25,25,-91,25,-89,-90,]),'RETURN':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,131,132,133,135,138,141,146,147,148,150,151,156,157,159,],[26,26,26,-7,-8,-9,26,-11,-12,-13,-14,-15,-17,-26,26,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,26,-42,-43,-44,26,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,26,-88,-82,-83,26,26,-84,-64,-87,26,26,-91,26,-89,-90,]),'NAME':([0,3,4,5,7,8,9,10,11,12,13,14,15,16,17,20,21,22,23,24,25,26,31,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,59,60,61,62,63,64,65,66,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,130,131,132,133,135,136,137,138,141,146,147,148,149,150,151,156,157,159,],[21,21,21,30,-7,-8,-9,21,-11,-12,-13,-14,-15,21,-17,40,-26,21,21,21,57,21,21,-29,21,-60,21,21,-34,-35,-36,-37,-38,-39,-40,-41,21,21,21,-63,-28,-18,-19,-33,-81,102,103,-6,-10,21,-62,-21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-42,-43,-44,21,21,21,21,127,-20,21,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,21,127,-88,-82,-83,21,21,21,21,-84,-64,-87,21,21,21,-91,21,-89,-90,]),'$end':([1,2,3,4,7,8,9,11,12,13,14,15,17,21,27,28,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,89,90,91,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,131,132,133,141,146,147,151,157,159,],[0,-1,-2,-4,-7,-8,-9,-11,-12,-13,-14,-15,-17,-26,-3,-5,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,-42,-43,-44,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,-88,-82,-83,-84,-64,-87,-91,-89,-90,]),'END':([4,7,8,9,11,12,13,14,15,17,21,28,32,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,89,90,91,97,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,131,132,133,139,141,142,145,146,147,151,154,157,158,159,],[-4,-7,-8,-9,-11,-12,-13,-14,-15,-17,-26,-5,66,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,-42,-43,-44,-20,-16,-27,-61,131,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,132,-32,-88,-82,-83,146,-84,147,151,-64,-87,-91,157,-89,159,-90,]),'UNTIL':([4,7,8,9,11,12,13,14,15,17,21,28,35,37,42,43,44,45,46,47,48,49,53,54,55,59,60,61,62,65,66,71,72,89,90,91,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,131,132,133,141,146,147,151,157,159,],[-4,-7,-8,-9,-11,-12,-13,-14,-15,-17,-26,-5,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,92,-18,-19,-33,-81,-6,-10,-62,-21,-42,-43,-44,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,-32,-88,-82,-83,-84,-64,-87,-91,-89,-90,]),'ELSE':([4,7,8,9,11,12,13,14,15,17,21,28,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,89,90,91,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,131,132,133,134,141,146,147,151,152,155,157,159,],[-4,-7,-8,-9,-11,-12,-13,-14,-15,-17,-26,-5,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,-42,-43,-44,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,135,-32,-88,-82,-83,135,-84,-64,-87,-91,-85,-86,-89,-90,]),'ELSEIF':([4,7,8,9,11,12,13,14,15,17,21,28,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,89,90,91,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,131,132,133,141,146,147,151,152,157,159,],[-4,-7,-8,-9,-11,-12,-13,-14,-15,-17,-26,-5,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-18,-19,-33,-81,-6,-10,-62,-21,-42,-43,-44,-20,-16,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-92,136,-32,-88,-82,-83,-84,-64,-87,-91,136,-89,-90,]),'ATRIB':([6,18,21,33,57,68,105,],[31,-24,-26,67,94,-25,-27,]),'LCOLCH':([7,18,19,21,34,35,37,49,54,71,105,106,],[-29,-28,38,-26,38,-29,-60,38,-28,-62,-27,-61,]),'LPAREN':([7,18,19,21,29,30,34,35,37,49,54,71,103,105,106,],[-29,-28,39,-26,63,-22,39,-29,-60,39,-28,-62,-23,-27,-61,]),'COMMA':([18,21,35,37,42,43,44,45,46,47,48,49,53,54,57,58,61,62,71,89,90,91,100,102,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,127,144,146,],[36,-26,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-31,96,98,-81,-62,-42,-43,-44,130,-31,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,137,-30,149,-64,]),'PLUS':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,74,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,74,74,-81,74,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,74,74,74,74,74,74,74,74,74,74,74,74,74,-64,74,]),'MINUS':([21,22,24,26,31,35,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,61,62,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,98,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,136,137,143,144,146,149,153,],[-26,51,51,51,51,-29,-60,51,51,75,-34,-35,-36,-37,-38,-39,-40,-41,51,51,51,-63,-28,75,75,-81,51,75,-62,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-42,-43,-44,51,51,51,51,-27,-61,-45,-46,-47,-48,-49,-50,75,75,75,75,75,75,75,75,75,75,75,51,51,75,75,-64,51,75,]),'TIMES':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,76,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,76,76,-81,76,-62,-42,76,-44,-27,-61,76,76,-47,-48,-49,-50,76,76,76,76,76,76,76,76,76,76,76,76,76,-64,76,]),'DIVIDE':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,77,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,77,77,-81,77,-62,-42,77,-44,-27,-61,77,77,-47,-48,-49,-50,77,77,77,77,77,77,77,77,77,77,77,77,77,-64,77,]),'EXPO':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,78,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,78,78,-81,78,-62,78,78,78,-27,-61,78,78,78,78,-49,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-64,78,]),'PERCENTUAL':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,79,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,79,79,-81,79,-62,-42,79,-44,-27,-61,79,79,-47,-48,-49,-50,79,79,79,79,79,79,79,79,79,79,79,79,79,-64,79,]),'CONCAT':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,80,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,80,80,-81,80,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,80,80,80,80,80,80,80,80,80,80,80,80,-64,80,]),'LT':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,81,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,81,81,-81,81,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,81,81,81,81,81,81,-64,81,]),'LTEQUALS':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,82,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,82,82,-81,82,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,82,82,82,82,82,82,-64,82,]),'GT':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,83,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,83,83,-81,83,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,83,83,83,83,83,83,-64,83,]),'GTEQUALS':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,84,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,84,84,-81,84,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,84,84,84,84,84,84,-64,84,]),'EQUALS':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,85,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,85,85,-81,85,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,85,85,85,85,85,85,-64,85,]),'DIF':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,86,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,86,86,-81,86,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,86,86,86,86,86,86,-64,86,]),'AND':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,87,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,87,87,-81,87,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,87,87,87,87,87,-64,87,]),'OR':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,143,144,146,153,],[-26,-29,-60,88,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,88,88,-81,88,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,88,88,88,88,-64,88,]),'THEN':([21,35,37,42,43,44,45,46,47,48,49,53,54,56,62,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,146,],[-26,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,93,-81,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,148,-64,]),'SEMICOLON':([21,26,35,37,42,43,44,45,46,47,48,49,53,54,60,61,62,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,146,],[-26,59,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,97,-33,-81,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-32,-64,]),'RCOLCH':([21,35,37,42,43,44,45,46,47,48,49,53,54,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,146,],[-26,-29,-60,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-81,105,-62,-42,-43,-44,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-64,]),'RPAREN':([21,35,37,39,42,43,44,45,46,47,48,49,53,54,61,62,70,71,89,90,91,99,100,101,102,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,127,128,140,146,],[-26,-29,-60,71,-34,-35,-36,-37,-38,-39,-40,-41,-63,-28,-33,-81,106,-62,-42,-43,-44,129,-65,-67,-31,-27,-61,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-30,-32,-66,-64,]),'NIL':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,149,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'FALSE':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,149,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'TRUE':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,149,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'NUMBER':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,149,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'STRING':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,149,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'VARARGS':([22,24,26,31,38,39,50,51,52,63,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,130,136,137,149,],[47,47,47,47,47,47,47,47,47,101,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,140,47,47,47,]),'TAG':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,149,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'NOT':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,149,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'COLON':([30,],[64,]),'IN':([57,58,127,],[-31,95,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,3,],[1,27,]),'block':([0,3,4,10,23,73,93,129,135,138,148,150,156,],[2,2,28,32,55,107,124,139,142,145,152,154,158,]),'function':([0,3,22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,149,],[3,3,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'command':([0,3,4,10,23,73,93,129,135,138,148,150,156,],[4,4,4,4,4,4,4,4,4,4,4,4,4,]),'list_vars':([0,3,4,10,16,23,36,73,93,129,135,138,148,150,156,],[6,6,6,6,33,6,68,6,6,6,6,6,6,6,6,]),'call_function':([0,3,4,10,16,22,23,24,26,31,36,38,39,50,51,52,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,98,129,135,136,137,138,148,149,150,156,],[7,7,7,7,35,35,7,35,35,35,35,35,35,35,35,35,35,7,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,7,35,35,35,7,7,35,35,7,7,35,7,7,]),'rotulo':([0,3,4,10,23,73,93,129,135,138,148,150,156,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'struct_while':([0,3,4,10,23,73,93,129,135,138,148,150,156,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'struct_repeat':([0,3,4,10,23,73,93,129,135,138,148,150,156,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'if':([0,3,4,10,23,73,93,129,135,138,148,150,156,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'struct_for':([0,3,4,10,23,73,93,129,135,138,148,150,156,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'struct_for_in':([0,3,4,10,23,73,93,129,135,138,148,150,156,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'command_ret':([0,3,4,10,23,73,93,129,135,138,148,150,156,],[17,17,17,17,17,17,17,17,17,17,17,17,17,]),'var':([0,3,4,10,16,22,23,24,26,31,36,38,39,50,51,52,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,98,129,135,136,137,138,148,149,150,156,],[18,18,18,18,18,54,18,54,54,54,18,54,54,54,54,54,54,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,54,54,54,18,18,54,54,18,18,54,18,18,]),'prefix_exp':([0,3,4,10,16,22,23,24,26,31,36,38,39,50,51,52,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,98,129,135,136,137,138,148,149,150,156,],[19,19,19,19,34,49,19,49,49,49,34,49,49,49,49,49,49,19,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,19,49,49,49,19,19,49,49,19,19,49,19,19,]),'name_function':([5,],[29,]),'args':([19,34,49,],[37,37,37,]),'exp':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,149,],[41,56,61,61,69,61,89,90,91,61,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,61,61,143,144,153,]),'def_function':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,95,98,136,137,149,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'list_names':([25,63,],[58,100,]),'list_exps':([26,31,39,67,95,98,],[60,65,70,104,126,128,]),'body_function':([29,],[62,]),'list_pars':([63,],[99,]),'else1':([124,134,],[133,141,]),'else_if':([124,152,],[134,155,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','ExpressionLanguageParser.py',13),
  ('program -> function','program',1,'p_program','ExpressionLanguageParser.py',14),
  ('program -> function program','program',2,'p_program','ExpressionLanguageParser.py',15),
  ('block -> command','block',1,'p_block','ExpressionLanguageParser.py',26),
  ('block -> command block','block',2,'p_block','ExpressionLanguageParser.py',27),
  ('command -> list_vars ATRIB list_exps','command',3,'p_command','ExpressionLanguageParser.py',36),
  ('command -> call_function','command',1,'p_command','ExpressionLanguageParser.py',37),
  ('command -> rotulo','command',1,'p_command','ExpressionLanguageParser.py',38),
  ('command -> BREAK','command',1,'p_command','ExpressionLanguageParser.py',39),
  ('command -> DO block END','command',3,'p_command','ExpressionLanguageParser.py',40),
  ('command -> struct_while','command',1,'p_command','ExpressionLanguageParser.py',41),
  ('command -> struct_repeat','command',1,'p_command','ExpressionLanguageParser.py',42),
  ('command -> if','command',1,'p_command','ExpressionLanguageParser.py',43),
  ('command -> struct_for','command',1,'p_command','ExpressionLanguageParser.py',44),
  ('command -> struct_for_in','command',1,'p_command','ExpressionLanguageParser.py',45),
  ('command -> LOCAL list_vars ATRIB list_exps','command',4,'p_command','ExpressionLanguageParser.py',46),
  ('command -> command_ret','command',1,'p_command','ExpressionLanguageParser.py',47),
  ('command_ret -> RETURN SEMICOLON','command_ret',2,'p_command_ret','ExpressionLanguageParser.py',75),
  ('command_ret -> RETURN list_exps','command_ret',2,'p_command_ret','ExpressionLanguageParser.py',76),
  ('command_ret -> RETURN list_exps SEMICOLON','command_ret',3,'p_command_ret','ExpressionLanguageParser.py',77),
  ('rotulo -> DUALCOLON NAME DUALCOLON','rotulo',3,'p_rotulo','ExpressionLanguageParser.py',88),
  ('name_function -> NAME','name_function',1,'p_name_function','ExpressionLanguageParser.py',94),
  ('name_function -> NAME COLON NAME','name_function',3,'p_name_function','ExpressionLanguageParser.py',95),
  ('list_vars -> var','list_vars',1,'p_list_vars','ExpressionLanguageParser.py',104),
  ('list_vars -> var COMMA list_vars','list_vars',3,'p_list_vars','ExpressionLanguageParser.py',105),
  ('var -> NAME','var',1,'p_var','ExpressionLanguageParser.py',114),
  ('var -> prefix_exp LCOLCH exp RCOLCH','var',4,'p_var','ExpressionLanguageParser.py',115),
  ('prefix_exp -> var','prefix_exp',1,'p_prefix_exp','ExpressionLanguageParser.py',124),
  ('prefix_exp -> call_function','prefix_exp',1,'p_prefix_exp','ExpressionLanguageParser.py',125),
  ('list_names -> list_names COMMA NAME','list_names',3,'p_list_names','ExpressionLanguageParser.py',134),
  ('list_names -> NAME','list_names',1,'p_list_names','ExpressionLanguageParser.py',135),
  ('list_exps -> exp COMMA list_exps','list_exps',3,'p_list_exps','ExpressionLanguageParser.py',144),
  ('list_exps -> exp','list_exps',1,'p_list_exps','ExpressionLanguageParser.py',145),
  ('exp -> NIL','exp',1,'p_exp','ExpressionLanguageParser.py',154),
  ('exp -> FALSE','exp',1,'p_exp','ExpressionLanguageParser.py',155),
  ('exp -> TRUE','exp',1,'p_exp','ExpressionLanguageParser.py',156),
  ('exp -> NUMBER','exp',1,'p_exp','ExpressionLanguageParser.py',157),
  ('exp -> STRING','exp',1,'p_exp','ExpressionLanguageParser.py',158),
  ('exp -> VARARGS','exp',1,'p_exp','ExpressionLanguageParser.py',159),
  ('exp -> def_function','exp',1,'p_exp','ExpressionLanguageParser.py',160),
  ('exp -> prefix_exp','exp',1,'p_exp','ExpressionLanguageParser.py',161),
  ('exp -> TAG exp','exp',2,'p_exp','ExpressionLanguageParser.py',162),
  ('exp -> MINUS exp','exp',2,'p_exp','ExpressionLanguageParser.py',163),
  ('exp -> NOT exp','exp',2,'p_exp','ExpressionLanguageParser.py',164),
  ('exp -> exp PLUS exp','exp',3,'p_exp','ExpressionLanguageParser.py',165),
  ('exp -> exp MINUS exp','exp',3,'p_exp','ExpressionLanguageParser.py',166),
  ('exp -> exp TIMES exp','exp',3,'p_exp','ExpressionLanguageParser.py',167),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','ExpressionLanguageParser.py',168),
  ('exp -> exp EXPO exp','exp',3,'p_exp','ExpressionLanguageParser.py',169),
  ('exp -> exp PERCENTUAL exp','exp',3,'p_exp','ExpressionLanguageParser.py',170),
  ('exp -> exp CONCAT exp','exp',3,'p_exp','ExpressionLanguageParser.py',171),
  ('exp -> exp LT exp','exp',3,'p_exp','ExpressionLanguageParser.py',172),
  ('exp -> exp LTEQUALS exp','exp',3,'p_exp','ExpressionLanguageParser.py',173),
  ('exp -> exp GT exp','exp',3,'p_exp','ExpressionLanguageParser.py',174),
  ('exp -> exp GTEQUALS exp','exp',3,'p_exp','ExpressionLanguageParser.py',175),
  ('exp -> exp EQUALS exp','exp',3,'p_exp','ExpressionLanguageParser.py',176),
  ('exp -> exp DIF exp','exp',3,'p_exp','ExpressionLanguageParser.py',177),
  ('exp -> exp AND exp','exp',3,'p_exp','ExpressionLanguageParser.py',178),
  ('exp -> exp OR exp','exp',3,'p_exp','ExpressionLanguageParser.py',179),
  ('call_function -> prefix_exp args','call_function',2,'p_call_function','ExpressionLanguageParser.py',239),
  ('args -> LPAREN list_exps RPAREN','args',3,'p_args','ExpressionLanguageParser.py',245),
  ('args -> LPAREN RPAREN','args',2,'p_args','ExpressionLanguageParser.py',246),
  ('def_function -> function','def_function',1,'p_def_function','ExpressionLanguageParser.py',255),
  ('body_function -> LPAREN list_pars RPAREN block END','body_function',5,'p_body_function','ExpressionLanguageParser.py',260),
  ('list_pars -> list_names','list_pars',1,'p_list_pars','ExpressionLanguageParser.py',265),
  ('list_pars -> list_names COMMA VARARGS','list_pars',3,'p_list_pars','ExpressionLanguageParser.py',266),
  ('list_pars -> VARARGS','list_pars',1,'p_list_pars','ExpressionLanguageParser.py',267),
  ('list_fields -> field','list_fields',1,'p_list_fields','ExpressionLanguageParser.py',272),
  ('list_fields -> field separator_fields list_fields','list_fields',3,'p_list_fields','ExpressionLanguageParser.py',273),
  ('list_fields -> field_empty','list_fields',1,'p_list_fields','ExpressionLanguageParser.py',274),
  ('list_fields -> field_empty separator_fields list_fields','list_fields',3,'p_list_fields','ExpressionLanguageParser.py',275),
  ('field_empty -> LCOLCH exp RCOLCH','field_empty',3,'p_field_empty','ExpressionLanguageParser.py',280),
  ('field_empty -> NAME','field_empty',1,'p_field_empty','ExpressionLanguageParser.py',281),
  ('field -> LCOLCH exp RCOLCH ATRIB exp','field',5,'p_field','ExpressionLanguageParser.py',286),
  ('field -> NAME ATRIB exp','field',3,'p_field','ExpressionLanguageParser.py',287),
  ('separator_fields -> COMMA','separator_fields',1,'p_separator_fields','ExpressionLanguageParser.py',292),
  ('separator_fields -> SEMICOLON','separator_fields',1,'p_separator_fields','ExpressionLanguageParser.py',293),
  ('local_var -> LOCAL list_names ATRIB list_exps','local_var',4,'p_local_var','ExpressionLanguageParser.py',298),
  ('local_var -> LOCAL list_names','local_var',2,'p_local_var','ExpressionLanguageParser.py',299),
  ('local_var -> LOCAL NAME ATRIB exp','local_var',4,'p_local_var','ExpressionLanguageParser.py',300),
  ('function -> FUNCTION name_function body_function','function',3,'p_function','ExpressionLanguageParser.py',305),
  ('if -> IF exp THEN block END','if',5,'p_if','ExpressionLanguageParser.py',310),
  ('if -> IF exp THEN block else1','if',5,'p_if','ExpressionLanguageParser.py',311),
  ('if -> IF exp THEN block else_if else1','if',6,'p_if','ExpressionLanguageParser.py',312),
  ('else_if -> ELSEIF exp THEN block','else_if',4,'p_else_if','ExpressionLanguageParser.py',316),
  ('else_if -> ELSEIF exp THEN block else_if','else_if',5,'p_else_if','ExpressionLanguageParser.py',317),
  ('else1 -> ELSE block END','else1',3,'p_else','ExpressionLanguageParser.py',321),
  ('struct_while -> WHILE exp DO block END','struct_while',5,'p_struct_while','ExpressionLanguageParser.py',326),
  ('struct_for -> FOR NAME ATRIB exp COMMA exp DO block END','struct_for',9,'p_struct_for','ExpressionLanguageParser.py',331),
  ('struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END','struct_for',11,'p_struct_for','ExpressionLanguageParser.py',332),
  ('struct_for_in -> FOR list_names IN list_exps DO block END','struct_for_in',7,'p_struct_for_in','ExpressionLanguageParser.py',337),
  ('struct_repeat -> REPEAT block UNTIL exp','struct_repeat',4,'p_struct_repeat','ExpressionLanguageParser.py',342),
]
