
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftGTLTGTEQUALSLTEQUALSEQUALSDIFleftCONCATleftPLUSMINUSleftPERCENTUALTIMESDIVIDEleftNOTTAGleftEXPOAND ATRIB BREAK COLON COMMA CONCAT DIF DIVIDE DO DOT DUALCOLON ELSE ELSEIF END EQUALS EXPO FALSE FOR FUNCTION GOTO GT GTEQUALS IF IN LBRACE LCOLCH LOCAL LPAREN LT LTEQUALS MINUS NAME NIL NOT NUMBER OR PERCENTUAL PLUS RBRACE RCOLCH REPEAT RETURN RPAREN SEMICOLON STRING TAG THEN TIMES TRUE UNTIL VAR VARARGS WHILEprogram : blockblock : command\n             | command command_retcommand : COMMA\n               | list_vars ATRIB list_exps\n               | call_function\n               | rotulo\n               | BREAK\n               | GOTO NAME\n               | DO block END\n               | struct_while\n               | struct_repeat\n               | if\n               | struct_for\n               | struct_for_in\n               | function\n               | local_function\n               | local_varcommand_ret : RETURN\n                 | RETURN list_exps\n                 | RETURN list_exps COMMArotulo : DUALCOLON NAME DUALCOLONname_function : NAME\n                     | NAME DOT NAME\n                     | NAME COLON NAMElist_vars : var \n                 | var SEMICOLON list_varsvar : NAME \n           | prefix_exp LCOLCH exp RCOLCH\n           | prefix_exp DOT NAME prefix_exp : var\n                 | call_function \n                 | LPAREN exp RPARENlist_names : NAME \n                  | NAME COMMA list_nameslist_exps : exp \n                 | exp COMMA list_expsexp : NIL\n           | FALSE\n           | TRUE\n           | NUMBER\n           | STRING\n           | VARARGS\n           | def_function\n           | exp_prefix\n           | construct_table\n           | exp op_bin exp\n           | op_unary expexp_prefix : VAR \n                  | call_function\n                  | LPAREN exp RPARENcall_function : exp_prefix args\n                     | exp_prefix COLON NAME args args : LPAREN list_exps RPAREN\n             | construct_tabledef_function : FUNCTION body_functionbody_function : LPAREN list_pars RPAREN block ENDlist_pars : list_names COMMA VARARGS\n                 | VARARGS\n                 | list_namesconstruct_table : LBRACE list_fields RBRACElist_fields : field separator_fields field\n                   | separator_fieldsfield : LCOLCH exp RCOLCH ATRIB exp\n             | NAME ATRIB exp\n             | expseparator_fields : COMMA\n                        | SEMICOLONlocal_var : LOCAL list_names ATRIB list_exps op_bin : PLUS\n               | MINUS\n               | TIMES\n               | DIVIDE\n               | EXPO \n               | PERCENTUAL\n               | CONCAT\n               | LT\n               | LTEQUALS\n               | GT\n               | GTEQUALS\n               | EQUALS\n               | DIF\n               | AND\n               | ORop_unary : MINUS\n                | NOT\n                | TAGfunction : FUNCTION name_function body_functionif : IF exp THEN block else_ifs else ENDelse_ifs : else_ifs else_if\n                | else_ifelse_if : ELSEIF exp THEN blockelse : ELSE blockstruct_while : WHILE exp DO block ENDstruct_for : FOR NAME ATRIB exp COMMA exp DO block END\n                  | FOR NAME ATRIB exp COMMA exp COMMA exp DO block ENDstruct_for_in : FOR list_names IN list_exps DO block ENDstruct_repeat : REPEAT block UNTIL explocal_function : FUNCTION name_function body_function'
    
_lr_action_items = {'COMMA':([0,11,24,30,38,41,42,45,46,47,48,49,50,51,52,53,56,63,68,72,73,82,85,90,107,108,112,126,127,128,133,135,137,140,141,147,151,153,159,165,167,169,170,173,175,180,],[4,4,4,-49,-52,-55,87,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,114,114,123,124,87,-66,4,-48,-56,4,-53,-54,-61,-47,154,-51,158,-35,-37,-65,4,4,4,174,-64,-57,4,4,4,]),'BREAK':([0,11,24,90,112,153,159,165,173,175,180,],[8,8,8,8,8,8,8,8,8,8,8,]),'GOTO':([0,11,24,90,112,153,159,165,173,175,180,],[9,9,9,9,9,9,9,9,9,9,9,]),'DO':([0,11,24,30,38,41,44,45,46,47,48,49,50,51,52,53,56,73,90,107,108,112,126,127,128,133,137,142,147,153,159,165,167,170,173,175,178,180,],[11,11,11,-49,-52,-55,90,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-36,11,-48,-56,11,-53,-54,-61,-47,-51,159,-37,11,11,11,175,-57,11,11,180,11,]),'DUALCOLON':([0,11,24,43,90,112,153,159,165,173,175,180,],[22,22,22,89,22,22,22,22,22,22,22,22,]),'WHILE':([0,11,24,90,112,153,159,165,173,175,180,],[23,23,23,23,23,23,23,23,23,23,23,]),'REPEAT':([0,11,24,90,112,153,159,165,173,175,180,],[24,24,24,24,24,24,24,24,24,24,24,]),'IF':([0,11,24,90,112,153,159,165,173,175,180,],[25,25,25,25,25,25,25,25,25,25,25,]),'FOR':([0,11,24,90,112,153,159,165,173,175,180,],[26,26,26,26,26,26,26,26,26,26,26,]),'FUNCTION':([0,11,23,24,25,31,33,34,40,42,54,57,58,59,60,69,78,84,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,113,115,119,124,129,131,153,157,158,159,160,165,173,174,175,180,],[27,27,55,27,55,55,55,55,55,55,55,55,-85,-86,-87,55,55,55,-67,-68,27,55,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,55,27,55,55,55,55,55,55,27,55,55,27,55,27,27,55,27,27,]),'LOCAL':([0,11,24,90,112,153,159,165,173,175,180,],[28,28,28,28,28,28,28,28,28,28,28,]),'NAME':([0,9,11,22,24,26,27,28,37,39,42,70,87,88,90,109,112,114,117,118,129,153,159,165,173,175,180,],[10,35,10,43,10,63,66,68,10,79,86,121,-67,-68,10,68,10,68,143,144,86,10,10,10,10,10,10,]),'VAR':([0,11,23,24,25,31,33,34,37,40,42,54,57,58,59,60,69,78,84,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,113,115,119,124,129,131,153,157,158,159,160,165,173,174,175,180,],[30,30,30,30,30,30,30,30,30,30,30,30,30,-85,-86,-87,30,30,30,-67,-68,30,30,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'LPAREN':([0,6,11,21,23,24,25,30,31,33,34,37,38,40,41,42,52,54,55,56,57,58,59,60,65,66,69,77,78,79,84,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,112,113,115,119,122,124,126,127,128,129,131,137,143,144,148,153,157,158,159,160,165,173,174,175,180,],[31,-50,31,40,57,31,57,-49,57,57,57,78,-52,57,-55,57,40,57,109,-50,57,-85,-86,-87,109,-23,57,-50,57,40,57,-67,-68,31,57,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,57,31,57,57,57,-51,57,-53,-54,-61,57,57,-51,-24,-25,-51,31,57,57,31,57,31,31,57,31,31,]),'$end':([1,2,3,4,6,7,8,12,13,14,15,16,17,18,19,30,32,33,35,38,41,45,46,47,48,49,50,51,52,53,56,72,73,74,75,89,107,108,116,123,126,127,128,133,137,138,145,147,152,170,171,176,181,183,],[0,-1,-2,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-18,-49,-3,-19,-9,-52,-55,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-20,-36,-5,-10,-22,-48,-56,-88,-21,-53,-54,-61,-47,-51,-98,-69,-37,-94,-57,-89,-97,-95,-96,]),'END':([3,4,6,7,8,12,13,14,15,16,17,18,19,30,32,33,35,36,38,41,45,46,47,48,49,50,51,52,53,56,72,73,74,75,89,107,108,116,123,126,127,128,132,133,137,138,145,147,152,161,163,168,170,171,172,176,179,181,182,183,],[-2,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-18,-49,-3,-19,-9,75,-52,-55,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-20,-36,-5,-10,-22,-48,-56,-88,-21,-53,-54,-61,152,-47,-51,-98,-69,-37,-94,170,171,176,-57,-89,-93,-97,181,-95,183,-96,]),'UNTIL':([3,4,6,7,8,12,13,14,15,16,17,18,19,30,32,33,35,38,41,45,46,47,48,49,50,51,52,53,56,61,72,73,74,75,89,107,108,116,123,126,127,128,133,137,138,145,147,152,170,171,176,181,183,],[-2,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-18,-49,-3,-19,-9,-52,-55,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,111,-20,-36,-5,-10,-22,-48,-56,-88,-21,-53,-54,-61,-47,-51,-98,-69,-37,-94,-57,-89,-97,-95,-96,]),'ELSEIF':([3,4,6,7,8,12,13,14,15,16,17,18,19,30,32,33,35,38,41,45,46,47,48,49,50,51,52,53,56,72,73,74,75,89,107,108,116,123,126,127,128,133,137,138,139,145,147,152,155,156,164,170,171,176,177,181,183,],[-2,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-18,-49,-3,-19,-9,-52,-55,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-20,-36,-5,-10,-22,-48,-56,-88,-21,-53,-54,-61,-47,-51,-98,157,-69,-37,-94,157,-91,-90,-57,-89,-97,-92,-95,-96,]),'ELSE':([3,4,6,7,8,12,13,14,15,16,17,18,19,30,32,33,35,38,41,45,46,47,48,49,50,51,52,53,56,72,73,74,75,89,107,108,116,123,126,127,128,133,137,138,145,147,152,155,156,164,170,171,176,177,181,183,],[-2,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-18,-49,-3,-19,-9,-52,-55,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-20,-36,-5,-10,-22,-48,-56,-88,-21,-53,-54,-61,-47,-51,-98,-69,-37,-94,165,-91,-90,-57,-89,-97,-92,-95,-96,]),'RETURN':([3,4,6,7,8,12,13,14,15,16,17,18,19,30,35,38,41,45,46,47,48,49,50,51,52,53,56,73,74,75,89,107,108,116,126,127,128,133,137,138,145,147,152,170,171,176,181,183,],[33,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-18,-49,-9,-52,-55,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-36,-5,-10,-22,-48,-56,-88,-53,-54,-61,-47,-51,-98,-69,-37,-94,-57,-89,-97,-95,-96,]),'ATRIB':([5,10,20,63,67,68,76,86,121,141,146,150,],[34,-28,-26,113,119,-34,-27,131,-30,-35,-29,160,]),'COLON':([6,21,30,38,41,52,56,66,77,122,126,127,128,137,148,],[-50,39,-49,-52,-55,39,-50,118,-50,-51,-53,-54,-61,-51,-51,]),'LBRACE':([6,21,23,25,30,31,33,34,38,40,41,42,52,54,56,57,58,59,60,69,77,78,79,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,113,115,119,122,124,126,127,128,129,131,137,148,157,158,160,174,],[-50,42,42,42,-49,42,42,42,-52,42,-55,42,42,42,-50,42,-85,-86,-87,42,-50,42,42,42,-67,-68,42,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,42,42,42,42,-51,42,-53,-54,-61,42,42,-51,-51,42,42,42,42,]),'LCOLCH':([6,10,20,29,38,41,42,77,87,88,121,122,126,127,128,129,146,148,],[-32,-28,-31,69,-52,-55,84,-32,-67,-68,-30,-33,-53,-54,-61,84,-29,-33,]),'DOT':([6,10,20,29,38,41,66,77,121,122,126,127,128,146,148,],[-32,-28,-31,70,-52,-55,117,-32,-30,-33,-53,-54,-61,-29,-33,]),'SEMICOLON':([10,20,30,38,41,42,45,46,47,48,49,50,51,52,53,56,82,85,107,108,121,126,127,128,133,137,146,151,169,170,],[-28,37,-49,-52,-55,88,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,88,-66,-48,-56,-30,-53,-54,-61,-47,-51,-29,-65,-64,-57,]),'NIL':([23,25,31,33,34,40,42,54,57,58,59,60,69,78,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,113,115,119,124,129,131,157,158,160,174,],[45,45,45,45,45,45,45,45,45,-85,-86,-87,45,45,45,-67,-68,45,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,45,45,45,45,45,45,45,45,45,45,45,]),'FALSE':([23,25,31,33,34,40,42,54,57,58,59,60,69,78,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,113,115,119,124,129,131,157,158,160,174,],[46,46,46,46,46,46,46,46,46,-85,-86,-87,46,46,46,-67,-68,46,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,46,46,46,46,46,46,46,46,46,46,46,]),'TRUE':([23,25,31,33,34,40,42,54,57,58,59,60,69,78,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,113,115,119,124,129,131,157,158,160,174,],[47,47,47,47,47,47,47,47,47,-85,-86,-87,47,47,47,-67,-68,47,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,47,47,47,47,47,47,47,47,47,47,47,]),'NUMBER':([23,25,31,33,34,40,42,54,57,58,59,60,69,78,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,113,115,119,124,129,131,157,158,160,174,],[48,48,48,48,48,48,48,48,48,-85,-86,-87,48,48,48,-67,-68,48,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,48,48,48,48,48,48,48,48,48,48,48,]),'STRING':([23,25,31,33,34,40,42,54,57,58,59,60,69,78,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,113,115,119,124,129,131,157,158,160,174,],[49,49,49,49,49,49,49,49,49,-85,-86,-87,49,49,49,-67,-68,49,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,49,49,49,49,49,49,49,49,49,49,49,]),'VARARGS':([23,25,31,33,34,40,42,54,57,58,59,60,69,78,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,111,113,115,119,124,129,131,154,157,158,160,174,],[50,50,50,50,50,50,50,50,50,-85,-86,-87,50,50,50,-67,-68,50,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,136,50,50,50,50,50,50,50,162,50,50,50,50,]),'MINUS':([23,25,30,31,33,34,38,40,41,42,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,62,69,71,73,78,84,85,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,115,119,120,124,125,126,127,128,129,130,131,133,137,138,140,151,157,158,160,166,167,169,170,174,178,],[58,58,-49,58,58,58,-52,58,-55,58,93,-38,-39,-40,-41,-42,-43,-44,-45,-46,58,-50,58,-85,-86,-87,93,58,93,93,58,58,93,-67,-68,58,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,93,-56,93,58,58,58,58,93,58,93,-53,-54,-61,58,93,58,93,-51,93,93,93,58,58,58,93,93,93,-57,58,93,]),'NOT':([23,25,31,33,34,40,42,54,57,58,59,60,69,78,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,113,115,119,124,129,131,157,158,160,174,],[59,59,59,59,59,59,59,59,59,-85,-86,-87,59,59,59,-67,-68,59,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,59,59,59,59,59,59,59,59,59,59,59,]),'TAG':([23,25,31,33,34,40,42,54,57,58,59,60,69,78,84,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,111,113,115,119,124,129,131,157,158,160,174,],[60,60,60,60,60,60,60,60,60,-85,-86,-87,60,60,60,-67,-68,60,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,60,60,60,60,60,60,60,60,60,60,60,]),'PLUS':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,92,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,92,92,92,92,92,-56,92,92,92,-53,-54,-61,92,92,-51,92,92,92,92,92,92,-57,92,]),'TIMES':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,94,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,94,94,94,94,94,-56,94,94,94,-53,-54,-61,94,94,-51,94,94,94,94,94,94,-57,94,]),'DIVIDE':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,95,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,95,95,95,95,95,-56,95,95,95,-53,-54,-61,95,95,-51,95,95,95,95,95,95,-57,95,]),'EXPO':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,96,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,96,96,96,96,96,-56,96,96,96,-53,-54,-61,96,96,-51,96,96,96,96,96,96,-57,96,]),'PERCENTUAL':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,97,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,97,97,97,97,97,-56,97,97,97,-53,-54,-61,97,97,-51,97,97,97,97,97,97,-57,97,]),'CONCAT':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,98,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,98,98,98,98,98,-56,98,98,98,-53,-54,-61,98,98,-51,98,98,98,98,98,98,-57,98,]),'LT':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,99,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,99,99,99,99,99,-56,99,99,99,-53,-54,-61,99,99,-51,99,99,99,99,99,99,-57,99,]),'LTEQUALS':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,100,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,100,100,100,100,100,-56,100,100,100,-53,-54,-61,100,100,-51,100,100,100,100,100,100,-57,100,]),'GT':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,101,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,101,101,101,101,101,-56,101,101,101,-53,-54,-61,101,101,-51,101,101,101,101,101,101,-57,101,]),'GTEQUALS':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,102,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,102,102,102,102,102,-56,102,102,102,-53,-54,-61,102,102,-51,102,102,102,102,102,102,-57,102,]),'EQUALS':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,103,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,103,103,103,103,103,-56,103,103,103,-53,-54,-61,103,103,-51,103,103,103,103,103,103,-57,103,]),'DIF':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,104,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,104,104,104,104,104,-56,104,104,104,-53,-54,-61,104,104,-51,104,104,104,104,104,104,-57,104,]),'AND':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,105,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,105,105,105,105,105,-56,105,105,105,-53,-54,-61,105,105,-51,105,105,105,105,105,105,-57,105,]),'OR':([30,38,41,44,45,46,47,48,49,50,51,52,53,56,62,71,73,85,107,108,110,120,125,126,127,128,130,133,137,138,140,151,166,167,169,170,178,],[-49,-52,-55,106,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,106,106,106,106,106,-56,106,106,106,-53,-54,-61,106,106,-51,106,106,106,106,106,106,-57,106,]),'THEN':([30,38,41,45,46,47,48,49,50,51,52,53,56,62,107,108,126,127,128,133,137,166,170,],[-49,-52,-55,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,112,-48,-56,-53,-54,-61,-47,-51,173,-57,]),'RPAREN':([30,38,41,45,46,47,48,49,50,51,52,53,56,68,71,73,80,107,108,110,125,126,127,128,133,134,135,136,137,141,147,162,170,],[-49,-52,-55,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-34,122,-36,127,-48,-56,137,148,-53,-54,-61,-47,153,-60,-59,-51,-35,-37,-58,-57,]),'RCOLCH':([30,38,41,45,46,47,48,49,50,51,52,53,56,107,108,120,126,127,128,130,133,137,170,],[-49,-52,-55,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,-48,-56,146,-53,-54,-61,150,-47,-51,-57,]),'RBRACE':([30,38,41,45,46,47,48,49,50,51,52,53,56,81,83,85,87,88,107,108,126,127,128,133,137,149,151,169,170,],[-49,-52,-55,-38,-39,-40,-41,-42,-43,-44,-45,-46,-50,128,-63,-66,-67,-68,-48,-56,-53,-54,-61,-47,-51,-62,-65,-64,-57,]),'IN':([63,64,68,141,],[-34,115,-34,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,11,24,90,112,153,159,165,173,175,180,],[2,36,61,132,139,161,168,172,177,179,182,]),'command':([0,11,24,90,112,153,159,165,173,175,180,],[3,3,3,3,3,3,3,3,3,3,3,]),'list_vars':([0,11,24,37,90,112,153,159,165,173,175,180,],[5,5,5,76,5,5,5,5,5,5,5,5,]),'call_function':([0,11,23,24,25,31,33,34,37,40,42,54,57,69,78,84,90,91,111,112,113,115,119,124,129,131,153,157,158,159,160,165,173,174,175,180,],[6,6,56,6,56,56,56,56,77,56,56,56,56,56,56,56,6,56,56,6,56,56,56,56,56,56,6,56,56,6,56,6,6,56,6,6,]),'rotulo':([0,11,24,90,112,153,159,165,173,175,180,],[7,7,7,7,7,7,7,7,7,7,7,]),'struct_while':([0,11,24,90,112,153,159,165,173,175,180,],[12,12,12,12,12,12,12,12,12,12,12,]),'struct_repeat':([0,11,24,90,112,153,159,165,173,175,180,],[13,13,13,13,13,13,13,13,13,13,13,]),'if':([0,11,24,90,112,153,159,165,173,175,180,],[14,14,14,14,14,14,14,14,14,14,14,]),'struct_for':([0,11,24,90,112,153,159,165,173,175,180,],[15,15,15,15,15,15,15,15,15,15,15,]),'struct_for_in':([0,11,24,90,112,153,159,165,173,175,180,],[16,16,16,16,16,16,16,16,16,16,16,]),'function':([0,11,24,90,112,153,159,165,173,175,180,],[17,17,17,17,17,17,17,17,17,17,17,]),'local_function':([0,11,24,90,112,153,159,165,173,175,180,],[18,18,18,18,18,18,18,18,18,18,18,]),'local_var':([0,11,24,90,112,153,159,165,173,175,180,],[19,19,19,19,19,19,19,19,19,19,19,]),'var':([0,11,24,37,90,112,153,159,165,173,175,180,],[20,20,20,20,20,20,20,20,20,20,20,20,]),'exp_prefix':([0,11,23,24,25,31,33,34,37,40,42,54,57,69,78,84,90,91,111,112,113,115,119,124,129,131,153,157,158,159,160,165,173,174,175,180,],[21,21,52,21,52,52,52,52,21,52,52,52,52,52,52,52,21,52,52,21,52,52,52,52,52,52,21,52,52,21,52,21,21,52,21,21,]),'prefix_exp':([0,11,24,37,90,112,153,159,165,173,175,180,],[29,29,29,29,29,29,29,29,29,29,29,29,]),'command_ret':([3,],[32,]),'args':([21,52,79,],[38,38,126,]),'construct_table':([21,23,25,31,33,34,40,42,52,54,57,69,78,79,84,91,111,113,115,119,124,129,131,157,158,160,174,],[41,53,53,53,53,53,53,53,41,53,53,53,53,41,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'exp':([23,25,31,33,34,40,42,54,57,69,78,84,91,111,113,115,119,124,129,131,157,158,160,174,],[44,62,71,73,73,73,85,107,110,120,125,130,133,138,140,73,73,73,85,151,166,167,169,178,]),'def_function':([23,25,31,33,34,40,42,54,57,69,78,84,91,111,113,115,119,124,129,131,157,158,160,174,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'op_unary':([23,25,31,33,34,40,42,54,57,69,78,84,91,111,113,115,119,124,129,131,157,158,160,174,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'list_names':([26,28,109,114,],[64,67,135,141,]),'name_function':([27,],[65,]),'list_exps':([33,34,40,115,119,124,],[72,74,80,142,145,147,]),'list_fields':([42,],[81,]),'field':([42,129,],[82,149,]),'separator_fields':([42,82,],[83,129,]),'op_bin':([44,62,71,73,85,107,110,120,125,130,133,138,140,151,166,167,169,178,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'body_function':([55,65,],[108,116,]),'list_pars':([109,],[134,]),'else_ifs':([139,],[155,]),'else_if':([139,155,],[156,164,]),'else':([155,],[163,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','ExpressionLanguageParser.py',13),
  ('block -> command','block',1,'p_block','ExpressionLanguageParser.py',18),
  ('block -> command command_ret','block',2,'p_block','ExpressionLanguageParser.py',19),
  ('command -> COMMA','command',1,'p_command','ExpressionLanguageParser.py',24),
  ('command -> list_vars ATRIB list_exps','command',3,'p_command','ExpressionLanguageParser.py',25),
  ('command -> call_function','command',1,'p_command','ExpressionLanguageParser.py',26),
  ('command -> rotulo','command',1,'p_command','ExpressionLanguageParser.py',27),
  ('command -> BREAK','command',1,'p_command','ExpressionLanguageParser.py',28),
  ('command -> GOTO NAME','command',2,'p_command','ExpressionLanguageParser.py',29),
  ('command -> DO block END','command',3,'p_command','ExpressionLanguageParser.py',30),
  ('command -> struct_while','command',1,'p_command','ExpressionLanguageParser.py',31),
  ('command -> struct_repeat','command',1,'p_command','ExpressionLanguageParser.py',32),
  ('command -> if','command',1,'p_command','ExpressionLanguageParser.py',33),
  ('command -> struct_for','command',1,'p_command','ExpressionLanguageParser.py',34),
  ('command -> struct_for_in','command',1,'p_command','ExpressionLanguageParser.py',35),
  ('command -> function','command',1,'p_command','ExpressionLanguageParser.py',36),
  ('command -> local_function','command',1,'p_command','ExpressionLanguageParser.py',37),
  ('command -> local_var','command',1,'p_command','ExpressionLanguageParser.py',38),
  ('command_ret -> RETURN','command_ret',1,'p_command_ret','ExpressionLanguageParser.py',43),
  ('command_ret -> RETURN list_exps','command_ret',2,'p_command_ret','ExpressionLanguageParser.py',44),
  ('command_ret -> RETURN list_exps COMMA','command_ret',3,'p_command_ret','ExpressionLanguageParser.py',45),
  ('rotulo -> DUALCOLON NAME DUALCOLON','rotulo',3,'p_rotulo','ExpressionLanguageParser.py',50),
  ('name_function -> NAME','name_function',1,'p_name_function','ExpressionLanguageParser.py',55),
  ('name_function -> NAME DOT NAME','name_function',3,'p_name_function','ExpressionLanguageParser.py',56),
  ('name_function -> NAME COLON NAME','name_function',3,'p_name_function','ExpressionLanguageParser.py',57),
  ('list_vars -> var','list_vars',1,'p_list_vars','ExpressionLanguageParser.py',62),
  ('list_vars -> var SEMICOLON list_vars','list_vars',3,'p_list_vars','ExpressionLanguageParser.py',63),
  ('var -> NAME','var',1,'p_var','ExpressionLanguageParser.py',68),
  ('var -> prefix_exp LCOLCH exp RCOLCH','var',4,'p_var','ExpressionLanguageParser.py',69),
  ('var -> prefix_exp DOT NAME','var',3,'p_var','ExpressionLanguageParser.py',70),
  ('prefix_exp -> var','prefix_exp',1,'p_prefix_exp','ExpressionLanguageParser.py',74),
  ('prefix_exp -> call_function','prefix_exp',1,'p_prefix_exp','ExpressionLanguageParser.py',75),
  ('prefix_exp -> LPAREN exp RPAREN','prefix_exp',3,'p_prefix_exp','ExpressionLanguageParser.py',76),
  ('list_names -> NAME','list_names',1,'p_list_names','ExpressionLanguageParser.py',81),
  ('list_names -> NAME COMMA list_names','list_names',3,'p_list_names','ExpressionLanguageParser.py',82),
  ('list_exps -> exp','list_exps',1,'p_list_exps','ExpressionLanguageParser.py',87),
  ('list_exps -> exp COMMA list_exps','list_exps',3,'p_list_exps','ExpressionLanguageParser.py',88),
  ('exp -> NIL','exp',1,'p_exp','ExpressionLanguageParser.py',93),
  ('exp -> FALSE','exp',1,'p_exp','ExpressionLanguageParser.py',94),
  ('exp -> TRUE','exp',1,'p_exp','ExpressionLanguageParser.py',95),
  ('exp -> NUMBER','exp',1,'p_exp','ExpressionLanguageParser.py',96),
  ('exp -> STRING','exp',1,'p_exp','ExpressionLanguageParser.py',97),
  ('exp -> VARARGS','exp',1,'p_exp','ExpressionLanguageParser.py',98),
  ('exp -> def_function','exp',1,'p_exp','ExpressionLanguageParser.py',99),
  ('exp -> exp_prefix','exp',1,'p_exp','ExpressionLanguageParser.py',100),
  ('exp -> construct_table','exp',1,'p_exp','ExpressionLanguageParser.py',101),
  ('exp -> exp op_bin exp','exp',3,'p_exp','ExpressionLanguageParser.py',102),
  ('exp -> op_unary exp','exp',2,'p_exp','ExpressionLanguageParser.py',103),
  ('exp_prefix -> VAR','exp_prefix',1,'p_exp_prefix','ExpressionLanguageParser.py',108),
  ('exp_prefix -> call_function','exp_prefix',1,'p_exp_prefix','ExpressionLanguageParser.py',109),
  ('exp_prefix -> LPAREN exp RPAREN','exp_prefix',3,'p_exp_prefix','ExpressionLanguageParser.py',110),
  ('call_function -> exp_prefix args','call_function',2,'p_call_function','ExpressionLanguageParser.py',115),
  ('call_function -> exp_prefix COLON NAME args','call_function',4,'p_call_function','ExpressionLanguageParser.py',116),
  ('args -> LPAREN list_exps RPAREN','args',3,'p_args','ExpressionLanguageParser.py',121),
  ('args -> construct_table','args',1,'p_args','ExpressionLanguageParser.py',122),
  ('def_function -> FUNCTION body_function','def_function',2,'p_def_function','ExpressionLanguageParser.py',127),
  ('body_function -> LPAREN list_pars RPAREN block END','body_function',5,'p_body_function','ExpressionLanguageParser.py',132),
  ('list_pars -> list_names COMMA VARARGS','list_pars',3,'p_list_pars','ExpressionLanguageParser.py',137),
  ('list_pars -> VARARGS','list_pars',1,'p_list_pars','ExpressionLanguageParser.py',138),
  ('list_pars -> list_names','list_pars',1,'p_list_pars','ExpressionLanguageParser.py',139),
  ('construct_table -> LBRACE list_fields RBRACE','construct_table',3,'p_construct_table','ExpressionLanguageParser.py',144),
  ('list_fields -> field separator_fields field','list_fields',3,'p_list_fields','ExpressionLanguageParser.py',149),
  ('list_fields -> separator_fields','list_fields',1,'p_list_fields','ExpressionLanguageParser.py',150),
  ('field -> LCOLCH exp RCOLCH ATRIB exp','field',5,'p_field','ExpressionLanguageParser.py',155),
  ('field -> NAME ATRIB exp','field',3,'p_field','ExpressionLanguageParser.py',156),
  ('field -> exp','field',1,'p_field','ExpressionLanguageParser.py',157),
  ('separator_fields -> COMMA','separator_fields',1,'p_separator_fields','ExpressionLanguageParser.py',162),
  ('separator_fields -> SEMICOLON','separator_fields',1,'p_separator_fields','ExpressionLanguageParser.py',163),
  ('local_var -> LOCAL list_names ATRIB list_exps','local_var',4,'p_local_var','ExpressionLanguageParser.py',168),
  ('op_bin -> PLUS','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',173),
  ('op_bin -> MINUS','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',174),
  ('op_bin -> TIMES','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',175),
  ('op_bin -> DIVIDE','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',176),
  ('op_bin -> EXPO','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',177),
  ('op_bin -> PERCENTUAL','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',178),
  ('op_bin -> CONCAT','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',179),
  ('op_bin -> LT','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',180),
  ('op_bin -> LTEQUALS','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',181),
  ('op_bin -> GT','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',182),
  ('op_bin -> GTEQUALS','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',183),
  ('op_bin -> EQUALS','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',184),
  ('op_bin -> DIF','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',185),
  ('op_bin -> AND','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',186),
  ('op_bin -> OR','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',187),
  ('op_unary -> MINUS','op_unary',1,'p_op_unary','ExpressionLanguageParser.py',192),
  ('op_unary -> NOT','op_unary',1,'p_op_unary','ExpressionLanguageParser.py',193),
  ('op_unary -> TAG','op_unary',1,'p_op_unary','ExpressionLanguageParser.py',194),
  ('function -> FUNCTION name_function body_function','function',3,'p_function','ExpressionLanguageParser.py',199),
  ('if -> IF exp THEN block else_ifs else END','if',7,'p_if','ExpressionLanguageParser.py',204),
  ('else_ifs -> else_ifs else_if','else_ifs',2,'p_else_ifs','ExpressionLanguageParser.py',208),
  ('else_ifs -> else_if','else_ifs',1,'p_else_ifs','ExpressionLanguageParser.py',209),
  ('else_if -> ELSEIF exp THEN block','else_if',4,'p_else_if','ExpressionLanguageParser.py',213),
  ('else -> ELSE block','else',2,'p_else','ExpressionLanguageParser.py',217),
  ('struct_while -> WHILE exp DO block END','struct_while',5,'p_struct_while','ExpressionLanguageParser.py',222),
  ('struct_for -> FOR NAME ATRIB exp COMMA exp DO block END','struct_for',9,'p_struct_for','ExpressionLanguageParser.py',227),
  ('struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END','struct_for',11,'p_struct_for','ExpressionLanguageParser.py',228),
  ('struct_for_in -> FOR list_names IN list_exps DO block END','struct_for_in',7,'p_struct_for_in','ExpressionLanguageParser.py',233),
  ('struct_repeat -> REPEAT block UNTIL exp','struct_repeat',4,'p_struct_repeat','ExpressionLanguageParser.py',238),
  ('local_function -> FUNCTION name_function body_function','local_function',3,'p_local_function','ExpressionLanguageParser.py',243),
]
