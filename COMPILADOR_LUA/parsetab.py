
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftGTLTGTEQUALSLTEQUALSEQUALSDIFleftCONCATleftPLUSMINUSleftPERCENTUALTIMESDIVIDEleftNOTTAGleftEXPOleftdefaultAND ATRIB BREAK COLON COMMA CONCAT DIF DIVIDE DO DOT DUALCOLON ELSE ELSEIF END EQUALS EXPO FALSE FOR FUNCTION GOTO GT GTEQUALS IF IN LBRACE LCOLCH LOCAL LPAREN LT LTEQUALS MINUS NAME NIL NOT NUMBER OR PERCENTUAL PLUS RBRACE RCOLCH REPEAT RETURN RPAREN SEMICOLON STRING TAG THEN TIMES TRUE UNTIL VAR VARARGS WHILEprogram : blockblock : command\n             | command command_retcommand : SEMICOLON\n               | list_vars ATRIB list_exps\n               | call_function\n               | rotulo\n               | BREAK\n               | GOTO NAME\n               | DO block END\n               | struct_while\n               | struct_repeat\n               | if\n               | struct_for\n               | struct_for_in\n               | def_function\n               | local_varcommand_ret : RETURN\n                   | RETURN list_exps\n                   | RETURN list_exps SEMICOLONrotulo : DUALCOLON NAME DUALCOLONname_function : NAME\n                     | NAME DOT NAME\n                     | NAME COLON NAMElist_vars : var COMMA varvar : NAME \n           | prefix_exp LCOLCH exp RCOLCH\n           | prefix_exp DOT NAME prefix_exp : var\n                   | call_function \n                   | LPAREN exp RPARENlist_names : NAME COMMA list_names\n                  | NAMElist_exps : exp COMMA list_exps\n                 | expexp : NIL %prec default\n           | FALSE %prec default\n           | TRUE %prec default\n           | NUMBER %prec default\n           | STRING %prec default\n           | VARARGS %prec default\n           | def_function %prec default\n           | exp_prefix\n           | construct_table\n           | exp op_bin exp\n           | exp op_unary expexp_prefix : VAR \n                  | call_function\n                  | LPAREN exp RPARENcall_function : exp_prefix args\n                     | exp_prefix COLON NAME args args : LPAREN list_exps RPAREN\n             | construct_tabledef_function : function \n                    | local_functionbody_function : LPAREN list_pars RPAREN block ENDlist_pars : list_names COMMA VARARGS\n                 | VARARGSconstruct_table : LBRACE list_fields RBRACE\n                       | LBRACE RBRACElist_fields : field \n                   | field separator_fields list_fields\n                   | field_empty\n                   | field_empty separator_fields list_fieldsfield_empty : LCOLCH exp RCOLCH\n                 | NAMEfield : LCOLCH exp RCOLCH ATRIB exp\n             | NAME ATRIB exp separator_fields : COMMA\n                        | SEMICOLONlocal_var : LOCAL list_names ATRIB list_exps \n                 | LOCAL NAME ATRIB exp op_bin : PLUS\n               | MINUS \n               | TIMES\n               | DIVIDE\n               | EXPO \n               | PERCENTUAL\n               | CONCAT\n               | LT\n               | LTEQUALS\n               | GT\n               | GTEQUALS\n               | EQUALS\n               | DIF\n               | AND\n               | ORop_unary : MINUS\n                | NOT\n                | TAGfunction : FUNCTION body_functionif : IF exp THEN block END\n          | IF exp THEN else\n          | IF exp THEN block else_ifselse_ifs : else_if else_ifs \n                | else_if else_if : ELSEIF exp THEN block \n               | elseelse : ELSE block ENDstruct_while : WHILE exp DO block ENDstruct_for : FOR NAME ATRIB exp COMMA exp DO block END\n                  | FOR NAME ATRIB exp COMMA exp COMMA exp DO block ENDstruct_for_in : FOR list_names IN list_exps DO block ENDstruct_repeat : REPEAT block UNTIL explocal_function : LOCAL FUNCTION name_function body_function'
    
_lr_action_items = {'SEMICOLON':([0,11,23,26,27,30,39,42,46,47,48,49,50,51,52,53,54,55,68,70,71,80,81,82,84,86,108,126,127,128,136,137,138,142,148,152,154,158,159,168,179,180,181,183,188,],[4,4,4,-54,-55,-47,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,-91,123,-35,-60,131,131,-66,4,4,-51,-52,-59,-45,-46,-49,4,-105,4,-34,-65,-68,4,-56,-67,4,4,4,]),'BREAK':([0,11,23,86,108,142,152,168,181,183,188,],[8,8,8,8,8,8,8,8,8,8,8,]),'GOTO':([0,11,23,86,108,142,152,168,181,183,188,],[9,9,9,9,9,9,9,9,9,9,9,]),'DO':([0,11,23,26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,68,71,80,86,108,126,127,128,136,137,138,142,145,148,152,154,168,177,179,181,183,186,188,],[11,11,11,-54,-55,-47,-50,-53,86,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,-91,-35,-60,11,11,-51,-52,-59,-45,-46,-49,11,168,-105,11,-34,11,183,-56,11,11,188,11,]),'DUALCOLON':([0,11,23,44,86,108,142,152,168,181,183,188,],[21,21,21,85,21,21,21,21,21,21,21,21,]),'WHILE':([0,11,23,86,108,142,152,168,181,183,188,],[22,22,22,22,22,22,22,22,22,22,22,]),'REPEAT':([0,11,23,86,108,142,152,168,181,183,188,],[23,23,23,23,23,23,23,23,23,23,23,]),'IF':([0,11,23,86,108,142,152,168,181,183,188,],[24,24,24,24,24,24,24,24,24,24,24,]),'FOR':([0,11,23,86,108,142,152,168,181,183,188,],[25,25,25,25,25,25,25,25,25,25,25,]),'LOCAL':([0,11,22,23,24,31,34,35,41,56,65,76,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,112,113,124,134,142,152,164,167,168,173,181,182,183,188,],[28,28,57,28,57,57,57,57,57,57,57,57,57,28,57,57,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,57,28,57,57,57,57,57,57,28,28,57,57,28,57,28,57,28,28,]),'NAME':([0,9,11,21,23,25,28,38,40,43,64,66,69,86,108,110,129,130,131,132,142,149,150,152,168,181,183,188,],[10,36,10,44,10,60,63,10,77,84,115,117,122,10,10,122,84,-69,-70,84,10,169,170,10,10,10,10,10,]),'VAR':([0,11,22,23,24,31,34,35,38,41,56,65,76,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,112,113,124,134,142,152,164,167,168,173,181,182,183,188,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'LPAREN':([0,6,11,20,22,23,24,30,31,32,34,35,38,39,41,42,53,55,56,65,75,76,77,80,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,112,113,114,115,118,124,126,127,128,134,138,142,152,155,164,167,168,169,170,173,181,182,183,188,],[31,-48,31,41,56,31,56,-47,56,69,56,56,76,-50,56,-53,41,-48,56,56,-48,56,41,-60,56,31,56,56,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,56,31,56,56,56,56,69,-22,-49,56,-51,-52,-59,56,-49,31,31,-49,56,56,31,-23,-24,56,31,56,31,31,]),'FUNCTION':([0,11,22,23,24,28,31,34,35,41,56,57,65,76,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,109,111,112,113,124,134,142,152,164,167,168,173,181,182,183,188,],[32,32,32,32,32,64,32,32,32,32,32,64,32,32,32,32,32,32,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'$end':([1,2,3,4,6,7,8,12,13,14,15,16,17,18,26,27,30,33,34,36,39,42,46,47,48,49,50,51,52,53,54,55,68,70,71,72,73,80,85,123,126,127,128,136,137,138,139,141,146,147,148,154,160,161,162,163,165,174,176,179,184,185,189,191,],[0,-1,-2,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-54,-55,-47,-3,-18,-9,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,-91,-19,-35,-5,-10,-60,-21,-20,-51,-52,-59,-45,-46,-49,-104,-93,-71,-72,-105,-34,-100,-92,-94,-96,-98,-95,-99,-56,-103,-97,-101,-102,]),'END':([3,4,6,7,8,12,13,14,15,16,17,18,26,27,30,33,34,36,37,39,42,46,47,48,49,50,51,52,53,54,55,68,70,71,72,73,80,85,123,126,127,128,135,136,137,138,139,140,141,146,147,148,154,160,161,162,163,165,166,171,174,176,178,179,184,185,187,189,190,191,],[-2,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-54,-55,-47,-3,-18,-9,73,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,-91,-19,-35,-5,-10,-60,-21,-20,-51,-52,-59,160,-45,-46,-49,-104,161,-93,-71,-72,-105,-34,-100,-92,-94,-96,-98,176,179,-95,-99,184,-56,-103,-97,189,-101,191,-102,]),'UNTIL':([3,4,6,7,8,12,13,14,15,16,17,18,26,27,30,33,34,36,39,42,46,47,48,49,50,51,52,53,54,55,58,68,70,71,72,73,80,85,123,126,127,128,136,137,138,139,141,146,147,148,154,160,161,162,163,165,174,176,179,184,185,189,191,],[-2,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-54,-55,-47,-3,-18,-9,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,107,-91,-19,-35,-5,-10,-60,-21,-20,-51,-52,-59,-45,-46,-49,-104,-93,-71,-72,-105,-34,-100,-92,-94,-96,-98,-95,-99,-56,-103,-97,-101,-102,]),'ELSEIF':([3,4,6,7,8,12,13,14,15,16,17,18,26,27,30,33,34,36,39,42,46,47,48,49,50,51,52,53,54,55,68,70,71,72,73,80,85,123,126,127,128,136,137,138,139,140,141,146,147,148,154,160,161,162,163,165,174,176,179,184,185,189,191,],[-2,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-54,-55,-47,-3,-18,-9,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,-91,-19,-35,-5,-10,-60,-21,-20,-51,-52,-59,-45,-46,-49,-104,164,-93,-71,-72,-105,-34,-100,-92,-94,164,-98,-95,-99,-56,-103,-97,-101,-102,]),'ELSE':([3,4,6,7,8,12,13,14,15,16,17,18,26,27,30,33,34,36,39,42,46,47,48,49,50,51,52,53,54,55,68,70,71,72,73,80,85,108,123,126,127,128,136,137,138,139,140,141,146,147,148,154,160,161,162,163,165,174,176,179,184,185,189,191,],[-2,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-54,-55,-47,-3,-18,-9,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,-91,-19,-35,-5,-10,-60,-21,142,-20,-51,-52,-59,-45,-46,-49,-104,142,-93,-71,-72,-105,-34,-100,-92,-94,142,-98,-95,-99,-56,-103,-97,-101,-102,]),'RETURN':([3,4,6,7,8,12,13,14,15,16,17,18,26,27,30,33,34,36,39,42,46,47,48,49,50,51,52,53,54,55,68,70,71,72,73,80,85,123,126,127,128,136,137,138,139,141,146,147,148,154,160,161,162,163,165,174,176,179,184,185,189,191,],[34,-4,-6,-7,-8,-11,-12,-13,-14,-15,-16,-17,-54,-55,-47,-3,-18,-9,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,-91,-19,-35,-5,-10,-60,-21,-20,-51,-52,-59,-45,-46,-49,-104,-93,-71,-72,-105,-34,-100,-92,-94,-96,-98,-95,-99,-56,-103,-97,-101,-102,]),'ATRIB':([5,10,60,62,63,74,84,117,122,144,151,158,],[35,-26,109,112,113,-25,134,-28,-33,-32,-27,173,]),'COLON':([6,20,30,39,42,53,55,75,80,115,118,126,127,128,138,155,],[-48,40,-47,-50,-53,40,-48,-48,-60,150,-49,-51,-52,-59,-49,-49,]),'LBRACE':([6,20,22,24,30,31,34,35,39,41,42,53,55,56,65,75,76,77,80,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,111,112,113,118,124,126,127,128,134,138,155,164,167,173,182,],[-48,43,43,43,-47,43,43,43,-50,43,-53,43,-48,43,43,-48,43,43,-60,43,43,43,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,43,43,43,43,43,-49,43,-51,-52,-59,43,-49,-49,43,43,43,43,]),'LCOLCH':([6,10,19,29,39,42,43,74,75,80,117,118,126,127,128,129,130,131,132,151,155,],[-30,-26,-29,65,-50,-53,83,-29,-30,-60,-28,-31,-51,-52,-59,83,-69,-70,83,-27,-31,]),'DOT':([6,10,19,29,39,42,74,75,80,115,117,118,126,127,128,151,155,],[-30,-26,-29,66,-50,-53,-29,-30,-60,149,-28,-31,-51,-52,-59,-27,-31,]),'COMMA':([10,19,26,27,30,39,42,46,47,48,49,50,51,52,53,54,55,60,63,68,71,80,81,82,84,117,120,122,126,127,128,136,137,138,143,144,148,151,158,159,177,179,180,],[-26,38,-54,-55,-47,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,110,110,-91,124,-60,130,130,-66,-28,153,110,-51,-52,-59,-45,-46,-49,167,-32,-105,-27,-65,-68,182,-56,-67,]),'NIL':([22,24,31,34,35,41,56,65,76,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,111,112,113,124,134,164,167,173,182,],[46,46,46,46,46,46,46,46,46,46,46,46,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,46,46,46,46,46,46,46,46,46,46,46,]),'FALSE':([22,24,31,34,35,41,56,65,76,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,111,112,113,124,134,164,167,173,182,],[47,47,47,47,47,47,47,47,47,47,47,47,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,47,47,47,47,47,47,47,47,47,47,47,]),'TRUE':([22,24,31,34,35,41,56,65,76,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,111,112,113,124,134,164,167,173,182,],[48,48,48,48,48,48,48,48,48,48,48,48,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,48,48,48,48,48,48,48,48,48,48,48,]),'NUMBER':([22,24,31,34,35,41,56,65,76,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,111,112,113,124,134,164,167,173,182,],[49,49,49,49,49,49,49,49,49,49,49,49,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,49,49,49,49,49,49,49,49,49,49,49,]),'STRING':([22,24,31,34,35,41,56,65,76,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,111,112,113,124,134,164,167,173,182,],[50,50,50,50,50,50,50,50,50,50,50,50,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,50,50,50,50,50,50,50,50,50,50,50,]),'VARARGS':([22,24,31,34,35,41,56,65,69,76,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,109,111,112,113,124,134,153,164,167,173,182,],[51,51,51,51,51,51,51,51,121,51,51,51,51,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-89,-90,51,51,51,51,51,51,51,172,51,51,51,51,]),'PLUS':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,89,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,89,89,-91,89,-60,89,89,89,-51,-52,-59,89,89,89,-49,89,89,89,-105,89,89,89,-56,89,89,]),'MINUS':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,90,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,90,90,-91,90,-60,90,90,90,-51,-52,-59,90,90,90,-49,90,90,90,-105,90,90,90,-56,90,90,]),'TIMES':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,91,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,91,91,-91,91,-60,91,91,91,-51,-52,-59,91,91,91,-49,91,91,91,-105,91,91,91,-56,91,91,]),'DIVIDE':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,92,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,92,92,-91,92,-60,92,92,92,-51,-52,-59,92,92,92,-49,92,92,92,-105,92,92,92,-56,92,92,]),'EXPO':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,93,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,93,93,-91,93,-60,93,93,93,-51,-52,-59,93,93,93,-49,93,93,93,-105,93,93,93,-56,93,93,]),'PERCENTUAL':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,94,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,94,94,-91,94,-60,94,94,94,-51,-52,-59,94,94,94,-49,94,94,94,-105,94,94,94,-56,94,94,]),'CONCAT':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,95,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,95,95,-91,95,-60,95,95,95,-51,-52,-59,95,95,95,-49,95,95,95,-105,95,95,95,-56,95,95,]),'LT':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,96,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,96,96,-91,96,-60,96,96,96,-51,-52,-59,96,96,96,-49,96,96,96,-105,96,96,96,-56,96,96,]),'LTEQUALS':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,97,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,97,97,-91,97,-60,97,97,97,-51,-52,-59,97,97,97,-49,97,97,97,-105,97,97,97,-56,97,97,]),'GT':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,98,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,98,98,-91,98,-60,98,98,98,-51,-52,-59,98,98,98,-49,98,98,98,-105,98,98,98,-56,98,98,]),'GTEQUALS':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,99,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,99,99,-91,99,-60,99,99,99,-51,-52,-59,99,99,99,-49,99,99,99,-105,99,99,99,-56,99,99,]),'EQUALS':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,100,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,100,100,-91,100,-60,100,100,100,-51,-52,-59,100,100,100,-49,100,100,100,-105,100,100,100,-56,100,100,]),'DIF':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,101,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,101,101,-91,101,-60,101,101,101,-51,-52,-59,101,101,101,-49,101,101,101,-105,101,101,101,-56,101,101,]),'AND':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,102,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,102,102,-91,102,-60,102,102,102,-51,-52,-59,102,102,102,-49,102,102,102,-105,102,102,102,-56,102,102,]),'OR':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,103,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,103,103,-91,103,-60,103,103,103,-51,-52,-59,103,103,103,-49,103,103,103,-105,103,103,103,-56,103,103,]),'NOT':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,104,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,104,104,-91,104,-60,104,104,104,-51,-52,-59,104,104,104,-49,104,104,104,-105,104,104,104,-56,104,104,]),'TAG':([26,27,30,39,42,45,46,47,48,49,50,51,52,53,54,55,59,67,68,71,80,106,116,125,126,127,128,133,136,137,138,139,143,147,148,159,175,177,179,180,186,],[-54,-55,-47,-50,-53,105,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,105,105,-91,105,-60,105,105,105,-51,-52,-59,105,105,105,-49,105,105,105,-105,105,105,105,-56,105,105,]),'THEN':([26,27,30,39,42,46,47,48,49,50,51,52,53,54,55,59,68,80,126,127,128,136,137,138,148,175,179,],[-54,-55,-47,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,108,-91,-60,-51,-52,-59,-45,-46,-49,-105,181,-56,]),'RPAREN':([26,27,30,39,42,46,47,48,49,50,51,52,53,54,55,67,68,71,78,80,106,119,121,125,126,127,128,136,137,138,148,154,172,179,],[-54,-55,-47,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,118,-91,-35,127,-60,138,152,-58,155,-51,-52,-59,-45,-46,-49,-105,-34,-57,-56,]),'RCOLCH':([26,27,30,39,42,46,47,48,49,50,51,52,53,54,55,68,80,116,126,127,128,133,136,137,138,148,179,],[-54,-55,-47,-50,-53,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,-91,-60,151,-51,-52,-59,158,-45,-46,-49,-105,-56,]),'RBRACE':([26,27,30,39,42,43,46,47,48,49,50,51,52,53,54,55,68,79,80,81,82,84,126,127,128,136,137,138,148,156,157,158,159,179,180,],[-54,-55,-47,-50,-53,80,-36,-37,-38,-39,-40,-41,-42,-43,-44,-48,-91,128,-60,-61,-63,-66,-51,-52,-59,-45,-46,-49,-105,-62,-64,-65,-68,-56,-67,]),'IN':([60,61,122,144,],[-33,111,-33,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,11,23,86,108,142,152,168,181,183,188,],[2,37,58,135,140,166,171,178,185,187,190,]),'command':([0,11,23,86,108,142,152,168,181,183,188,],[3,3,3,3,3,3,3,3,3,3,3,]),'list_vars':([0,11,23,86,108,142,152,168,181,183,188,],[5,5,5,5,5,5,5,5,5,5,5,]),'call_function':([0,11,22,23,24,31,34,35,38,41,56,65,76,83,86,87,88,107,108,109,111,112,113,124,134,142,152,164,167,168,173,181,182,183,188,],[6,6,55,6,55,55,55,55,75,55,55,55,55,55,6,55,55,55,6,55,55,55,55,55,55,6,6,55,55,6,55,6,55,6,6,]),'rotulo':([0,11,23,86,108,142,152,168,181,183,188,],[7,7,7,7,7,7,7,7,7,7,7,]),'struct_while':([0,11,23,86,108,142,152,168,181,183,188,],[12,12,12,12,12,12,12,12,12,12,12,]),'struct_repeat':([0,11,23,86,108,142,152,168,181,183,188,],[13,13,13,13,13,13,13,13,13,13,13,]),'if':([0,11,23,86,108,142,152,168,181,183,188,],[14,14,14,14,14,14,14,14,14,14,14,]),'struct_for':([0,11,23,86,108,142,152,168,181,183,188,],[15,15,15,15,15,15,15,15,15,15,15,]),'struct_for_in':([0,11,23,86,108,142,152,168,181,183,188,],[16,16,16,16,16,16,16,16,16,16,16,]),'def_function':([0,11,22,23,24,31,34,35,41,56,65,76,83,86,87,88,107,108,109,111,112,113,124,134,142,152,164,167,168,173,181,182,183,188,],[17,17,52,17,52,52,52,52,52,52,52,52,52,17,52,52,52,17,52,52,52,52,52,52,17,17,52,52,17,52,17,52,17,17,]),'local_var':([0,11,23,86,108,142,152,168,181,183,188,],[18,18,18,18,18,18,18,18,18,18,18,]),'var':([0,11,23,38,86,108,142,152,168,181,183,188,],[19,19,19,74,19,19,19,19,19,19,19,19,]),'exp_prefix':([0,11,22,23,24,31,34,35,38,41,56,65,76,83,86,87,88,107,108,109,111,112,113,124,134,142,152,164,167,168,173,181,182,183,188,],[20,20,53,20,53,53,53,53,20,53,53,53,53,53,20,53,53,53,20,53,53,53,53,53,53,20,20,53,53,20,53,20,53,20,20,]),'function':([0,11,22,23,24,31,34,35,41,56,65,76,83,86,87,88,107,108,109,111,112,113,124,134,142,152,164,167,168,173,181,182,183,188,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'local_function':([0,11,22,23,24,31,34,35,41,56,65,76,83,86,87,88,107,108,109,111,112,113,124,134,142,152,164,167,168,173,181,182,183,188,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'prefix_exp':([0,11,23,38,86,108,142,152,168,181,183,188,],[29,29,29,29,29,29,29,29,29,29,29,29,]),'command_ret':([3,],[33,]),'args':([20,53,77,],[39,39,126,]),'construct_table':([20,22,24,31,34,35,41,53,56,65,76,77,83,87,88,107,109,111,112,113,124,134,164,167,173,182,],[42,54,54,54,54,54,54,42,54,54,54,42,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'exp':([22,24,31,34,35,41,56,65,76,83,87,88,107,109,111,112,113,124,134,164,167,173,182,],[45,59,67,71,71,71,106,116,125,133,136,137,139,143,71,71,147,71,159,175,177,180,186,]),'list_names':([25,28,69,110,],[61,62,120,144,]),'body_function':([32,114,],[68,148,]),'list_exps':([34,35,41,111,112,124,],[70,72,78,145,146,154,]),'list_fields':([43,129,132,],[79,156,157,]),'field':([43,129,132,],[81,81,81,]),'field_empty':([43,129,132,],[82,82,82,]),'op_bin':([45,59,67,71,106,116,125,133,136,137,139,143,147,159,175,177,180,186,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'op_unary':([45,59,67,71,106,116,125,133,136,137,139,143,147,159,175,177,180,186,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'name_function':([64,],[114,]),'list_pars':([69,],[119,]),'separator_fields':([81,82,],[129,132,]),'else':([108,140,163,],[141,165,165,]),'else_ifs':([140,163,],[162,174,]),'else_if':([140,163,],[163,163,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','ExpressionLanguageParser.py',13),
  ('block -> command','block',1,'p_block','ExpressionLanguageParser.py',18),
  ('block -> command command_ret','block',2,'p_block','ExpressionLanguageParser.py',19),
  ('command -> SEMICOLON','command',1,'p_command','ExpressionLanguageParser.py',24),
  ('command -> list_vars ATRIB list_exps','command',3,'p_command','ExpressionLanguageParser.py',25),
  ('command -> call_function','command',1,'p_command','ExpressionLanguageParser.py',26),
  ('command -> rotulo','command',1,'p_command','ExpressionLanguageParser.py',27),
  ('command -> BREAK','command',1,'p_command','ExpressionLanguageParser.py',28),
  ('command -> GOTO NAME','command',2,'p_command','ExpressionLanguageParser.py',29),
  ('command -> DO block END','command',3,'p_command','ExpressionLanguageParser.py',30),
  ('command -> struct_while','command',1,'p_command','ExpressionLanguageParser.py',31),
  ('command -> struct_repeat','command',1,'p_command','ExpressionLanguageParser.py',32),
  ('command -> if','command',1,'p_command','ExpressionLanguageParser.py',33),
  ('command -> struct_for','command',1,'p_command','ExpressionLanguageParser.py',34),
  ('command -> struct_for_in','command',1,'p_command','ExpressionLanguageParser.py',35),
  ('command -> def_function','command',1,'p_command','ExpressionLanguageParser.py',36),
  ('command -> local_var','command',1,'p_command','ExpressionLanguageParser.py',37),
  ('command_ret -> RETURN','command_ret',1,'p_command_ret','ExpressionLanguageParser.py',42),
  ('command_ret -> RETURN list_exps','command_ret',2,'p_command_ret','ExpressionLanguageParser.py',43),
  ('command_ret -> RETURN list_exps SEMICOLON','command_ret',3,'p_command_ret','ExpressionLanguageParser.py',44),
  ('rotulo -> DUALCOLON NAME DUALCOLON','rotulo',3,'p_rotulo','ExpressionLanguageParser.py',49),
  ('name_function -> NAME','name_function',1,'p_name_function','ExpressionLanguageParser.py',54),
  ('name_function -> NAME DOT NAME','name_function',3,'p_name_function','ExpressionLanguageParser.py',55),
  ('name_function -> NAME COLON NAME','name_function',3,'p_name_function','ExpressionLanguageParser.py',56),
  ('list_vars -> var COMMA var','list_vars',3,'p_list_vars','ExpressionLanguageParser.py',61),
  ('var -> NAME','var',1,'p_var','ExpressionLanguageParser.py',66),
  ('var -> prefix_exp LCOLCH exp RCOLCH','var',4,'p_var','ExpressionLanguageParser.py',67),
  ('var -> prefix_exp DOT NAME','var',3,'p_var','ExpressionLanguageParser.py',68),
  ('prefix_exp -> var','prefix_exp',1,'p_prefix_exp','ExpressionLanguageParser.py',72),
  ('prefix_exp -> call_function','prefix_exp',1,'p_prefix_exp','ExpressionLanguageParser.py',73),
  ('prefix_exp -> LPAREN exp RPAREN','prefix_exp',3,'p_prefix_exp','ExpressionLanguageParser.py',74),
  ('list_names -> NAME COMMA list_names','list_names',3,'p_list_names','ExpressionLanguageParser.py',79),
  ('list_names -> NAME','list_names',1,'p_list_names','ExpressionLanguageParser.py',80),
  ('list_exps -> exp COMMA list_exps','list_exps',3,'p_list_exps','ExpressionLanguageParser.py',85),
  ('list_exps -> exp','list_exps',1,'p_list_exps','ExpressionLanguageParser.py',86),
  ('exp -> NIL','exp',1,'p_exp','ExpressionLanguageParser.py',91),
  ('exp -> FALSE','exp',1,'p_exp','ExpressionLanguageParser.py',92),
  ('exp -> TRUE','exp',1,'p_exp','ExpressionLanguageParser.py',93),
  ('exp -> NUMBER','exp',1,'p_exp','ExpressionLanguageParser.py',94),
  ('exp -> STRING','exp',1,'p_exp','ExpressionLanguageParser.py',95),
  ('exp -> VARARGS','exp',1,'p_exp','ExpressionLanguageParser.py',96),
  ('exp -> def_function','exp',1,'p_exp','ExpressionLanguageParser.py',97),
  ('exp -> exp_prefix','exp',1,'p_exp','ExpressionLanguageParser.py',98),
  ('exp -> construct_table','exp',1,'p_exp','ExpressionLanguageParser.py',99),
  ('exp -> exp op_bin exp','exp',3,'p_exp','ExpressionLanguageParser.py',100),
  ('exp -> exp op_unary exp','exp',3,'p_exp','ExpressionLanguageParser.py',101),
  ('exp_prefix -> VAR','exp_prefix',1,'p_exp_prefix','ExpressionLanguageParser.py',106),
  ('exp_prefix -> call_function','exp_prefix',1,'p_exp_prefix','ExpressionLanguageParser.py',107),
  ('exp_prefix -> LPAREN exp RPAREN','exp_prefix',3,'p_exp_prefix','ExpressionLanguageParser.py',108),
  ('call_function -> exp_prefix args','call_function',2,'p_call_function','ExpressionLanguageParser.py',113),
  ('call_function -> exp_prefix COLON NAME args','call_function',4,'p_call_function','ExpressionLanguageParser.py',114),
  ('args -> LPAREN list_exps RPAREN','args',3,'p_args','ExpressionLanguageParser.py',119),
  ('args -> construct_table','args',1,'p_args','ExpressionLanguageParser.py',120),
  ('def_function -> function','def_function',1,'p_def_function','ExpressionLanguageParser.py',125),
  ('def_function -> local_function','def_function',1,'p_def_function','ExpressionLanguageParser.py',126),
  ('body_function -> LPAREN list_pars RPAREN block END','body_function',5,'p_body_function','ExpressionLanguageParser.py',131),
  ('list_pars -> list_names COMMA VARARGS','list_pars',3,'p_list_pars','ExpressionLanguageParser.py',136),
  ('list_pars -> VARARGS','list_pars',1,'p_list_pars','ExpressionLanguageParser.py',137),
  ('construct_table -> LBRACE list_fields RBRACE','construct_table',3,'p_construct_table','ExpressionLanguageParser.py',142),
  ('construct_table -> LBRACE RBRACE','construct_table',2,'p_construct_table','ExpressionLanguageParser.py',143),
  ('list_fields -> field','list_fields',1,'p_list_fields','ExpressionLanguageParser.py',148),
  ('list_fields -> field separator_fields list_fields','list_fields',3,'p_list_fields','ExpressionLanguageParser.py',149),
  ('list_fields -> field_empty','list_fields',1,'p_list_fields','ExpressionLanguageParser.py',150),
  ('list_fields -> field_empty separator_fields list_fields','list_fields',3,'p_list_fields','ExpressionLanguageParser.py',151),
  ('field_empty -> LCOLCH exp RCOLCH','field_empty',3,'p_field_empty','ExpressionLanguageParser.py',156),
  ('field_empty -> NAME','field_empty',1,'p_field_empty','ExpressionLanguageParser.py',157),
  ('field -> LCOLCH exp RCOLCH ATRIB exp','field',5,'p_field','ExpressionLanguageParser.py',162),
  ('field -> NAME ATRIB exp','field',3,'p_field','ExpressionLanguageParser.py',163),
  ('separator_fields -> COMMA','separator_fields',1,'p_separator_fields','ExpressionLanguageParser.py',168),
  ('separator_fields -> SEMICOLON','separator_fields',1,'p_separator_fields','ExpressionLanguageParser.py',169),
  ('local_var -> LOCAL list_names ATRIB list_exps','local_var',4,'p_local_var','ExpressionLanguageParser.py',174),
  ('local_var -> LOCAL NAME ATRIB exp','local_var',4,'p_local_var','ExpressionLanguageParser.py',175),
  ('op_bin -> PLUS','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',180),
  ('op_bin -> MINUS','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',181),
  ('op_bin -> TIMES','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',182),
  ('op_bin -> DIVIDE','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',183),
  ('op_bin -> EXPO','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',184),
  ('op_bin -> PERCENTUAL','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',185),
  ('op_bin -> CONCAT','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',186),
  ('op_bin -> LT','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',187),
  ('op_bin -> LTEQUALS','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',188),
  ('op_bin -> GT','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',189),
  ('op_bin -> GTEQUALS','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',190),
  ('op_bin -> EQUALS','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',191),
  ('op_bin -> DIF','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',192),
  ('op_bin -> AND','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',193),
  ('op_bin -> OR','op_bin',1,'p_op_bin','ExpressionLanguageParser.py',194),
  ('op_unary -> MINUS','op_unary',1,'p_op_unary','ExpressionLanguageParser.py',199),
  ('op_unary -> NOT','op_unary',1,'p_op_unary','ExpressionLanguageParser.py',200),
  ('op_unary -> TAG','op_unary',1,'p_op_unary','ExpressionLanguageParser.py',201),
  ('function -> FUNCTION body_function','function',2,'p_function','ExpressionLanguageParser.py',206),
  ('if -> IF exp THEN block END','if',5,'p_if','ExpressionLanguageParser.py',211),
  ('if -> IF exp THEN else','if',4,'p_if','ExpressionLanguageParser.py',212),
  ('if -> IF exp THEN block else_ifs','if',5,'p_if','ExpressionLanguageParser.py',213),
  ('else_ifs -> else_if else_ifs','else_ifs',2,'p_else_ifs','ExpressionLanguageParser.py',217),
  ('else_ifs -> else_if','else_ifs',1,'p_else_ifs','ExpressionLanguageParser.py',218),
  ('else_if -> ELSEIF exp THEN block','else_if',4,'p_else_if','ExpressionLanguageParser.py',222),
  ('else_if -> else','else_if',1,'p_else_if','ExpressionLanguageParser.py',223),
  ('else -> ELSE block END','else',3,'p_else','ExpressionLanguageParser.py',227),
  ('struct_while -> WHILE exp DO block END','struct_while',5,'p_struct_while','ExpressionLanguageParser.py',232),
  ('struct_for -> FOR NAME ATRIB exp COMMA exp DO block END','struct_for',9,'p_struct_for','ExpressionLanguageParser.py',237),
  ('struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END','struct_for',11,'p_struct_for','ExpressionLanguageParser.py',238),
  ('struct_for_in -> FOR list_names IN list_exps DO block END','struct_for_in',7,'p_struct_for_in','ExpressionLanguageParser.py',243),
  ('struct_repeat -> REPEAT block UNTIL exp','struct_repeat',4,'p_struct_repeat','ExpressionLanguageParser.py',248),
  ('local_function -> LOCAL FUNCTION name_function body_function','local_function',4,'p_local_function','ExpressionLanguageParser.py',253),
]
