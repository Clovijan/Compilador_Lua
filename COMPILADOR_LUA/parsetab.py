
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftGTLTGTEQUALSLTEQUALSEQUALSDIFleftCONCATleftPLUSMINUSleftPERCENTUALTIMESDIVIDEleftNOTTAGleftEXPOAND ATRIB BREAK COLON COMMA CONCAT DIF DIVIDE DO DOT DUALCOLON ELSE ELSEIF END EQUALS EXPO FALSE FOR FUNCTION GT GTEQUALS IF IN LBRACE LCOLCH LOCAL LPAREN LT LTEQUALS MINUS NAME NIL NOT NUMBER OR PERCENTUAL PLUS RBRACE RCOLCH REPEAT RETURN RPAREN SEMICOLON STRING TAG THEN TIMES TRUE UNTIL VAR VARARGS WHILEprogram : blockblock : command\n             | command command_retcommand : SEMICOLON\n               | list_vars ATRIB list_exps\n               | call_function\n               | rotulo\n               | BREAK\n               | DO block END\n               | struct_while\n               | struct_repeat\n               | if\n               | struct_for\n               | struct_for_in\n               | def_function\n               | local_varlist_command : command list_command\n                  | commandcommand_ret : RETURN\n                   | RETURN list_exps\n                   | RETURN list_exps SEMICOLONrotulo : DUALCOLON NAME DUALCOLONname_function : NAME\n                     | NAME DOT NAME\n                     | NAME COLON NAMElist_vars : var \n                 | var COMMA list_varsvar : NAME \n           | prefix_exp LCOLCH exp RCOLCH\n           | prefix_exp DOT NAME prefix_exp : var\n                   | call_function \n                   | LPAREN exp RPARENlist_names : NAME COMMA list_names\n                  | NAMElist_exps : exp COMMA list_exps\n                 | expexp : NIL \n           | FALSE\n           | TRUE \n           | NUMBER\n           | STRING \n           | VARARGS \n           | def_function \n           | exp_prefix\n           | construct_table\n           | exp op_unary exp\n           | exp PLUS exp\n           | exp MINUS exp\n           | exp TIMES exp\n           | exp DIVIDE exp\n           | exp EXPO exp\n           | exp PERCENTUAL exp\n           | exp CONCAT exp\n           | exp LT exp\n           | exp LTEQUALS exp\n           | exp GT exp\n           | exp GTEQUALS exp\n           | exp EQUALS exp\n           | exp DIF exp\n           | exp AND exp\n           | exp OR expexp_prefix : VAR \n                  | call_function\n                  | LPAREN exp RPARENcall_function : exp_prefix args\n                     | exp_prefix COLON NAME args args : LPAREN list_exps RPAREN\n             | construct_tabledef_function : function \n                    | local_functionbody_function : LPAREN list_pars RPAREN block ENDlist_pars : list_names COMMA VARARGS\n                 | VARARGSconstruct_table : LBRACE list_fields RBRACE\n                       | LBRACE RBRACElist_fields : field \n                   | field separator_fields list_fields\n                   | field_empty\n                   | field_empty separator_fields list_fieldsfield_empty : LCOLCH exp RCOLCH\n                   | NAMEfield : LCOLCH exp RCOLCH ATRIB exp\n             | NAME ATRIB exp separator_fields : COMMA\n                        | SEMICOLONlocal_var : LOCAL list_names ATRIB list_exps \n                 | LOCAL NAME ATRIB expop_unary : MINUS\n                | NOT\n                | TAGfunction : FUNCTION body_functionif : IF exp THEN block END\n          | IF exp THEN elseelse : ELSE block ENDstruct_while : WHILE exp DO block ENDstruct_for : FOR NAME ATRIB exp COMMA exp DO block END\n                  | FOR NAME ATRIB exp COMMA exp COMMA exp DO block ENDstruct_for_in : FOR list_names IN list_exps DO block ENDstruct_repeat : REPEAT block UNTIL explocal_function : LOCAL FUNCTION name_function body_function'
    
_lr_action_items = {'SEMICOLON':([0,9,22,25,26,29,37,40,44,45,46,47,48,49,50,51,52,53,66,68,69,78,79,80,82,84,105,123,124,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,159,163,165,169,170,175,184,185,187,191,],[4,4,4,-70,-71,-63,-66,-69,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,-92,120,-37,-76,128,128,-82,4,4,-67,-68,-75,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,4,-101,4,-36,-81,-84,4,-72,-83,4,4,]),'BREAK':([0,9,22,84,105,153,163,175,187,191,],[8,8,8,8,8,8,8,8,8,8,]),'DO':([0,9,22,25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,66,69,78,84,105,123,124,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,159,163,165,175,182,184,187,189,191,],[9,9,9,-70,-71,-63,-66,-69,84,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,-92,-37,-76,9,9,-67,-68,-75,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,9,175,-101,9,-36,9,187,-72,9,191,9,]),'DUALCOLON':([0,9,22,42,84,105,153,163,175,187,191,],[20,20,20,83,20,20,20,20,20,20,20,]),'WHILE':([0,9,22,84,105,153,163,175,187,191,],[21,21,21,21,21,21,21,21,21,21,]),'REPEAT':([0,9,22,84,105,153,163,175,187,191,],[22,22,22,22,22,22,22,22,22,22,]),'IF':([0,9,22,84,105,153,163,175,187,191,],[23,23,23,23,23,23,23,23,23,23,]),'FOR':([0,9,22,84,105,153,163,175,187,191,],[24,24,24,24,24,24,24,24,24,24,]),'LOCAL':([0,9,21,22,23,30,33,34,39,54,63,74,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,108,109,110,121,131,153,163,174,175,180,186,187,191,],[27,27,55,27,55,55,55,55,55,55,55,55,55,27,55,55,-89,55,55,55,55,55,55,55,55,55,55,55,55,55,-90,-91,55,27,55,55,55,55,55,55,27,27,55,27,55,55,27,27,]),'NAME':([0,9,20,22,24,27,36,38,41,62,64,67,84,105,107,126,127,128,129,153,160,161,163,175,187,191,],[19,19,42,19,58,61,19,75,82,112,114,119,19,19,119,82,-85,-86,82,19,176,177,19,19,19,19,]),'VAR':([0,9,21,22,23,30,33,34,36,39,54,63,74,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,108,109,110,121,131,153,163,174,175,180,186,187,191,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-89,29,29,29,29,29,29,29,29,29,29,29,29,29,-90,-91,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'LPAREN':([0,6,9,18,21,22,23,29,30,31,33,34,36,37,39,40,51,53,54,63,73,74,75,78,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,108,109,110,111,112,115,121,123,124,125,131,149,153,163,166,174,175,176,177,180,186,187,191,],[30,-64,30,39,54,30,54,-63,54,67,54,54,74,-66,54,-69,39,-64,54,54,-64,54,39,-76,54,30,54,54,-89,54,54,54,54,54,54,54,54,54,54,54,54,54,-90,-91,54,30,54,54,54,54,67,-23,-65,54,-67,-68,-75,54,-65,30,30,-65,54,30,-24,-25,54,54,30,30,]),'FUNCTION':([0,9,21,22,23,27,30,33,34,39,54,55,63,74,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,105,106,108,109,110,121,131,153,163,174,175,180,186,187,191,],[31,31,31,31,31,62,31,31,31,31,31,62,31,31,31,31,31,31,-89,31,31,31,31,31,31,31,31,31,31,31,31,31,-90,-91,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'$end':([1,2,3,4,6,7,8,10,11,12,13,14,15,16,25,26,29,32,33,37,40,44,45,46,47,48,49,50,51,52,53,66,68,69,70,71,78,83,120,123,124,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,157,158,159,165,171,172,181,184,188,192,194,],[0,-1,-2,-4,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-70,-71,-63,-3,-19,-66,-69,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,-92,-20,-37,-5,-9,-76,-22,-21,-67,-68,-75,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,-100,-94,-87,-88,-101,-36,-96,-93,-95,-72,-99,-97,-98,]),'END':([3,4,6,7,8,10,11,12,13,14,15,16,25,26,29,32,33,35,37,40,44,45,46,47,48,49,50,51,52,53,66,68,69,70,71,78,83,120,123,124,125,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,171,172,173,178,181,183,184,188,190,192,193,194,],[-2,-4,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-70,-71,-63,-3,-19,71,-66,-69,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,-92,-20,-37,-5,-9,-76,-22,-21,-67,-68,-75,171,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,-100,172,-94,-87,-88,-101,-36,-96,-93,181,184,-95,188,-72,-99,192,-97,194,-98,]),'UNTIL':([3,4,6,7,8,10,11,12,13,14,15,16,25,26,29,32,33,37,40,44,45,46,47,48,49,50,51,52,53,56,66,68,69,70,71,78,83,120,123,124,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,157,158,159,165,171,172,181,184,188,192,194,],[-2,-4,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-70,-71,-63,-3,-19,-66,-69,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,104,-92,-20,-37,-5,-9,-76,-22,-21,-67,-68,-75,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,-100,-94,-87,-88,-101,-36,-96,-93,-95,-72,-99,-97,-98,]),'RETURN':([3,4,6,7,8,10,11,12,13,14,15,16,25,26,29,37,40,44,45,46,47,48,49,50,51,52,53,66,69,70,71,78,83,123,124,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,152,157,158,159,165,171,172,181,184,188,192,194,],[33,-4,-6,-7,-8,-10,-11,-12,-13,-14,-15,-16,-70,-71,-63,-66,-69,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,-92,-37,-5,-9,-76,-22,-67,-68,-75,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,-100,-94,-87,-88,-101,-36,-96,-93,-95,-72,-99,-97,-98,]),'ATRIB':([5,17,19,58,60,61,72,82,114,119,155,162,169,],[34,-26,-28,106,109,110,-27,131,-30,-35,-34,-29,180,]),'COLON':([6,18,29,37,40,51,53,73,78,112,115,123,124,125,149,166,],[-64,38,-63,-66,-69,38,-64,-64,-76,161,-65,-67,-68,-75,-65,-65,]),'LBRACE':([6,18,21,23,29,30,33,34,37,39,40,51,53,54,63,73,74,75,78,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,108,109,110,115,121,123,124,125,131,149,166,174,180,186,],[-64,41,41,41,-63,41,41,41,-66,41,-69,41,-64,41,41,-64,41,41,-76,41,41,41,-89,41,41,41,41,41,41,41,41,41,41,41,41,41,-90,-91,41,41,41,41,41,-65,41,-67,-68,-75,41,-65,-65,41,41,41,]),'LCOLCH':([6,17,19,28,37,40,41,73,78,114,115,123,124,125,126,127,128,129,162,166,],[-32,-31,-28,63,-66,-69,81,-32,-76,-30,-33,-67,-68,-75,81,-85,-86,81,-29,-33,]),'DOT':([6,17,19,28,37,40,73,78,112,114,115,123,124,125,162,166,],[-32,-31,-28,64,-66,-69,-32,-76,160,-30,-33,-67,-68,-75,-29,-33,]),'COMMA':([17,19,25,26,29,37,40,44,45,46,47,48,49,50,51,52,53,58,61,66,69,78,79,80,82,114,117,119,123,124,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,154,155,159,162,169,170,182,184,185,],[36,-28,-70,-71,-63,-66,-69,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,107,107,-92,121,-76,127,127,-82,-30,164,107,-67,-68,-75,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,174,-34,-101,-29,-81,-84,186,-72,-83,]),'NIL':([21,23,30,33,34,39,54,63,74,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,108,109,110,121,131,174,180,186,],[44,44,44,44,44,44,44,44,44,44,44,44,-89,44,44,44,44,44,44,44,44,44,44,44,44,44,-90,-91,44,44,44,44,44,44,44,44,44,44,]),'FALSE':([21,23,30,33,34,39,54,63,74,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,108,109,110,121,131,174,180,186,],[45,45,45,45,45,45,45,45,45,45,45,45,-89,45,45,45,45,45,45,45,45,45,45,45,45,45,-90,-91,45,45,45,45,45,45,45,45,45,45,]),'TRUE':([21,23,30,33,34,39,54,63,74,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,108,109,110,121,131,174,180,186,],[46,46,46,46,46,46,46,46,46,46,46,46,-89,46,46,46,46,46,46,46,46,46,46,46,46,46,-90,-91,46,46,46,46,46,46,46,46,46,46,]),'NUMBER':([21,23,30,33,34,39,54,63,74,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,108,109,110,121,131,174,180,186,],[47,47,47,47,47,47,47,47,47,47,47,47,-89,47,47,47,47,47,47,47,47,47,47,47,47,47,-90,-91,47,47,47,47,47,47,47,47,47,47,]),'STRING':([21,23,30,33,34,39,54,63,74,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,108,109,110,121,131,174,180,186,],[48,48,48,48,48,48,48,48,48,48,48,48,-89,48,48,48,48,48,48,48,48,48,48,48,48,48,-90,-91,48,48,48,48,48,48,48,48,48,48,]),'VARARGS':([21,23,30,33,34,39,54,63,67,74,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,104,106,108,109,110,121,131,164,174,180,186,],[49,49,49,49,49,49,49,49,118,49,49,49,49,-89,49,49,49,49,49,49,49,49,49,49,49,49,49,-90,-91,49,49,49,49,49,49,49,179,49,49,49,]),'PLUS':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,86,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,86,86,-92,86,-76,86,86,86,-67,-68,-75,86,86,-48,-49,-50,-51,-52,-53,86,86,86,86,86,86,86,86,86,-65,86,86,86,-101,86,86,-72,86,86,]),'MINUS':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,87,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,87,87,-92,87,-76,87,87,87,-67,-68,-75,87,87,-48,-49,-50,-51,-52,-53,87,87,87,87,87,87,87,87,87,-65,87,87,87,-101,87,87,-72,87,87,]),'TIMES':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,88,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,88,88,-92,88,-76,88,88,88,-67,-68,-75,88,88,88,88,-50,-51,-52,-53,88,88,88,88,88,88,88,88,88,-65,88,88,88,-101,88,88,-72,88,88,]),'DIVIDE':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,89,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,89,89,-92,89,-76,89,89,89,-67,-68,-75,89,89,89,89,-50,-51,-52,-53,89,89,89,89,89,89,89,89,89,-65,89,89,89,-101,89,89,-72,89,89,]),'EXPO':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,90,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,90,90,-92,90,-76,90,90,90,-67,-68,-75,90,90,90,90,90,90,-52,90,90,90,90,90,90,90,90,90,90,-65,90,90,90,-101,90,90,-72,90,90,]),'PERCENTUAL':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,91,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,91,91,-92,91,-76,91,91,91,-67,-68,-75,91,91,91,91,-50,-51,-52,-53,91,91,91,91,91,91,91,91,91,-65,91,91,91,-101,91,91,-72,91,91,]),'CONCAT':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,92,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,92,92,-92,92,-76,92,92,92,-67,-68,-75,92,92,-48,-49,-50,-51,-52,-53,-54,92,92,92,92,92,92,92,92,-65,92,92,92,-101,92,92,-72,92,92,]),'LT':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,93,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,93,93,-92,93,-76,93,93,93,-67,-68,-75,93,93,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,93,93,-65,93,93,93,-101,93,93,-72,93,93,]),'LTEQUALS':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,94,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,94,94,-92,94,-76,94,94,94,-67,-68,-75,94,94,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,94,94,-65,94,94,94,-101,94,94,-72,94,94,]),'GT':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,95,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,95,95,-92,95,-76,95,95,95,-67,-68,-75,95,95,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,95,95,-65,95,95,95,-101,95,95,-72,95,95,]),'GTEQUALS':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,96,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,96,96,-92,96,-76,96,96,96,-67,-68,-75,96,96,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,96,96,-65,96,96,96,-101,96,96,-72,96,96,]),'EQUALS':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,97,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,97,97,-92,97,-76,97,97,97,-67,-68,-75,97,97,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,97,97,-65,97,97,97,-101,97,97,-72,97,97,]),'DIF':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,98,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,98,98,-92,98,-76,98,98,98,-67,-68,-75,98,98,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,98,98,-65,98,98,98,-101,98,98,-72,98,98,]),'AND':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,99,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,99,99,-92,99,-76,99,99,99,-67,-68,-75,99,99,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,99,-65,99,99,99,-101,99,99,-72,99,99,]),'OR':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,100,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,100,100,-92,100,-76,100,100,100,-67,-68,-75,100,100,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,100,100,100,-101,100,100,-72,100,100,]),'NOT':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,101,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,101,101,-92,101,-76,101,101,101,-67,-68,-75,101,101,101,101,101,101,-52,101,101,101,101,101,101,101,101,101,101,-65,101,101,101,-101,101,101,-72,101,101,]),'TAG':([25,26,29,37,40,43,44,45,46,47,48,49,50,51,52,53,57,65,66,69,78,103,113,122,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,154,158,159,170,182,184,185,189,],[-70,-71,-63,-66,-69,102,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,102,102,-92,102,-76,102,102,102,-67,-68,-75,102,102,102,102,102,102,-52,102,102,102,102,102,102,102,102,102,102,-65,102,102,102,-101,102,102,-72,102,102,]),'THEN':([25,26,29,37,40,44,45,46,47,48,49,50,51,52,53,57,66,78,123,124,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,159,184,],[-70,-71,-63,-66,-69,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,105,-92,-76,-67,-68,-75,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,-101,-72,]),'RPAREN':([25,26,29,37,40,44,45,46,47,48,49,50,51,52,53,65,66,69,76,78,103,116,118,122,123,124,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,159,165,179,184,],[-70,-71,-63,-66,-69,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,115,-92,-37,124,-76,149,163,-74,166,-67,-68,-75,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,-101,-36,-73,-72,]),'RCOLCH':([25,26,29,37,40,44,45,46,47,48,49,50,51,52,53,66,78,113,123,124,125,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,159,184,],[-70,-71,-63,-66,-69,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,-92,-76,162,-67,-68,-75,169,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,-101,-72,]),'RBRACE':([25,26,29,37,40,41,44,45,46,47,48,49,50,51,52,53,66,77,78,79,80,82,123,124,125,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,159,167,168,169,170,184,185,],[-70,-71,-63,-66,-69,78,-38,-39,-40,-41,-42,-43,-44,-45,-46,-64,-92,125,-76,-77,-79,-82,-67,-68,-75,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-65,-101,-78,-80,-81,-84,-72,-83,]),'IN':([58,59,119,155,],[-35,108,-35,-34,]),'ELSE':([105,],[153,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([0,9,22,84,105,153,163,175,187,191,],[2,35,56,132,151,173,178,183,190,193,]),'command':([0,9,22,84,105,153,163,175,187,191,],[3,3,3,3,3,3,3,3,3,3,]),'list_vars':([0,9,22,36,84,105,153,163,175,187,191,],[5,5,5,72,5,5,5,5,5,5,5,]),'call_function':([0,9,21,22,23,30,33,34,36,39,54,63,74,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,105,106,108,109,110,121,131,153,163,174,175,180,186,187,191,],[6,6,53,6,53,53,53,53,73,53,53,53,53,53,6,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,6,53,53,53,53,53,53,6,6,53,6,53,53,6,6,]),'rotulo':([0,9,22,84,105,153,163,175,187,191,],[7,7,7,7,7,7,7,7,7,7,]),'struct_while':([0,9,22,84,105,153,163,175,187,191,],[10,10,10,10,10,10,10,10,10,10,]),'struct_repeat':([0,9,22,84,105,153,163,175,187,191,],[11,11,11,11,11,11,11,11,11,11,]),'if':([0,9,22,84,105,153,163,175,187,191,],[12,12,12,12,12,12,12,12,12,12,]),'struct_for':([0,9,22,84,105,153,163,175,187,191,],[13,13,13,13,13,13,13,13,13,13,]),'struct_for_in':([0,9,22,84,105,153,163,175,187,191,],[14,14,14,14,14,14,14,14,14,14,]),'def_function':([0,9,21,22,23,30,33,34,39,54,63,74,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,105,106,108,109,110,121,131,153,163,174,175,180,186,187,191,],[15,15,50,15,50,50,50,50,50,50,50,50,50,15,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,15,50,50,50,50,50,50,15,15,50,15,50,50,15,15,]),'local_var':([0,9,22,84,105,153,163,175,187,191,],[16,16,16,16,16,16,16,16,16,16,]),'var':([0,9,22,36,84,105,153,163,175,187,191,],[17,17,17,17,17,17,17,17,17,17,17,]),'exp_prefix':([0,9,21,22,23,30,33,34,36,39,54,63,74,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,105,106,108,109,110,121,131,153,163,174,175,180,186,187,191,],[18,18,51,18,51,51,51,51,18,51,51,51,51,51,18,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,18,51,51,51,51,51,51,18,18,51,18,51,51,18,18,]),'function':([0,9,21,22,23,30,33,34,39,54,63,74,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,105,106,108,109,110,121,131,153,163,174,175,180,186,187,191,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'local_function':([0,9,21,22,23,30,33,34,39,54,63,74,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,105,106,108,109,110,121,131,153,163,174,175,180,186,187,191,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'prefix_exp':([0,9,22,36,84,105,153,163,175,187,191,],[28,28,28,28,28,28,28,28,28,28,28,]),'command_ret':([3,],[32,]),'args':([18,51,75,],[37,37,123,]),'construct_table':([18,21,23,30,33,34,39,51,54,63,74,75,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,106,108,109,110,121,131,174,180,186,],[40,52,52,52,52,52,52,40,52,52,52,40,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'exp':([21,23,30,33,34,39,54,63,74,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,104,106,108,109,110,121,131,174,180,186,],[43,57,65,69,69,69,103,113,122,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,150,154,69,69,158,69,170,182,185,189,]),'list_names':([24,27,67,107,],[59,60,117,155,]),'body_function':([31,111,],[66,159,]),'list_exps':([33,34,39,108,109,121,],[68,70,76,156,157,165,]),'list_fields':([41,126,129,],[77,167,168,]),'field':([41,126,129,],[79,79,79,]),'field_empty':([41,126,129,],[80,80,80,]),'op_unary':([43,57,65,69,103,113,122,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,150,154,158,170,182,185,189,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'name_function':([62,],[111,]),'list_pars':([67,],[116,]),'separator_fields':([79,80,],[126,129,]),'else':([105,],[152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','ExpressionLanguageParser.py',13),
  ('block -> command','block',1,'p_block','ExpressionLanguageParser.py',18),
  ('block -> command command_ret','block',2,'p_block','ExpressionLanguageParser.py',19),
  ('command -> SEMICOLON','command',1,'p_command','ExpressionLanguageParser.py',24),
  ('command -> list_vars ATRIB list_exps','command',3,'p_command','ExpressionLanguageParser.py',25),
  ('command -> call_function','command',1,'p_command','ExpressionLanguageParser.py',26),
  ('command -> rotulo','command',1,'p_command','ExpressionLanguageParser.py',27),
  ('command -> BREAK','command',1,'p_command','ExpressionLanguageParser.py',28),
  ('command -> DO block END','command',3,'p_command','ExpressionLanguageParser.py',29),
  ('command -> struct_while','command',1,'p_command','ExpressionLanguageParser.py',30),
  ('command -> struct_repeat','command',1,'p_command','ExpressionLanguageParser.py',31),
  ('command -> if','command',1,'p_command','ExpressionLanguageParser.py',32),
  ('command -> struct_for','command',1,'p_command','ExpressionLanguageParser.py',33),
  ('command -> struct_for_in','command',1,'p_command','ExpressionLanguageParser.py',34),
  ('command -> def_function','command',1,'p_command','ExpressionLanguageParser.py',35),
  ('command -> local_var','command',1,'p_command','ExpressionLanguageParser.py',36),
  ('list_command -> command list_command','list_command',2,'p_list_command','ExpressionLanguageParser.py',40),
  ('list_command -> command','list_command',1,'p_list_command','ExpressionLanguageParser.py',41),
  ('command_ret -> RETURN','command_ret',1,'p_command_ret','ExpressionLanguageParser.py',46),
  ('command_ret -> RETURN list_exps','command_ret',2,'p_command_ret','ExpressionLanguageParser.py',47),
  ('command_ret -> RETURN list_exps SEMICOLON','command_ret',3,'p_command_ret','ExpressionLanguageParser.py',48),
  ('rotulo -> DUALCOLON NAME DUALCOLON','rotulo',3,'p_rotulo','ExpressionLanguageParser.py',53),
  ('name_function -> NAME','name_function',1,'p_name_function','ExpressionLanguageParser.py',58),
  ('name_function -> NAME DOT NAME','name_function',3,'p_name_function','ExpressionLanguageParser.py',59),
  ('name_function -> NAME COLON NAME','name_function',3,'p_name_function','ExpressionLanguageParser.py',60),
  ('list_vars -> var','list_vars',1,'p_list_vars','ExpressionLanguageParser.py',65),
  ('list_vars -> var COMMA list_vars','list_vars',3,'p_list_vars','ExpressionLanguageParser.py',66),
  ('var -> NAME','var',1,'p_var','ExpressionLanguageParser.py',71),
  ('var -> prefix_exp LCOLCH exp RCOLCH','var',4,'p_var','ExpressionLanguageParser.py',72),
  ('var -> prefix_exp DOT NAME','var',3,'p_var','ExpressionLanguageParser.py',73),
  ('prefix_exp -> var','prefix_exp',1,'p_prefix_exp','ExpressionLanguageParser.py',77),
  ('prefix_exp -> call_function','prefix_exp',1,'p_prefix_exp','ExpressionLanguageParser.py',78),
  ('prefix_exp -> LPAREN exp RPAREN','prefix_exp',3,'p_prefix_exp','ExpressionLanguageParser.py',79),
  ('list_names -> NAME COMMA list_names','list_names',3,'p_list_names','ExpressionLanguageParser.py',84),
  ('list_names -> NAME','list_names',1,'p_list_names','ExpressionLanguageParser.py',85),
  ('list_exps -> exp COMMA list_exps','list_exps',3,'p_list_exps','ExpressionLanguageParser.py',90),
  ('list_exps -> exp','list_exps',1,'p_list_exps','ExpressionLanguageParser.py',91),
  ('exp -> NIL','exp',1,'p_exp','ExpressionLanguageParser.py',96),
  ('exp -> FALSE','exp',1,'p_exp','ExpressionLanguageParser.py',97),
  ('exp -> TRUE','exp',1,'p_exp','ExpressionLanguageParser.py',98),
  ('exp -> NUMBER','exp',1,'p_exp','ExpressionLanguageParser.py',99),
  ('exp -> STRING','exp',1,'p_exp','ExpressionLanguageParser.py',100),
  ('exp -> VARARGS','exp',1,'p_exp','ExpressionLanguageParser.py',101),
  ('exp -> def_function','exp',1,'p_exp','ExpressionLanguageParser.py',102),
  ('exp -> exp_prefix','exp',1,'p_exp','ExpressionLanguageParser.py',103),
  ('exp -> construct_table','exp',1,'p_exp','ExpressionLanguageParser.py',104),
  ('exp -> exp op_unary exp','exp',3,'p_exp','ExpressionLanguageParser.py',105),
  ('exp -> exp PLUS exp','exp',3,'p_exp','ExpressionLanguageParser.py',106),
  ('exp -> exp MINUS exp','exp',3,'p_exp','ExpressionLanguageParser.py',107),
  ('exp -> exp TIMES exp','exp',3,'p_exp','ExpressionLanguageParser.py',108),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','ExpressionLanguageParser.py',109),
  ('exp -> exp EXPO exp','exp',3,'p_exp','ExpressionLanguageParser.py',110),
  ('exp -> exp PERCENTUAL exp','exp',3,'p_exp','ExpressionLanguageParser.py',111),
  ('exp -> exp CONCAT exp','exp',3,'p_exp','ExpressionLanguageParser.py',112),
  ('exp -> exp LT exp','exp',3,'p_exp','ExpressionLanguageParser.py',113),
  ('exp -> exp LTEQUALS exp','exp',3,'p_exp','ExpressionLanguageParser.py',114),
  ('exp -> exp GT exp','exp',3,'p_exp','ExpressionLanguageParser.py',115),
  ('exp -> exp GTEQUALS exp','exp',3,'p_exp','ExpressionLanguageParser.py',116),
  ('exp -> exp EQUALS exp','exp',3,'p_exp','ExpressionLanguageParser.py',117),
  ('exp -> exp DIF exp','exp',3,'p_exp','ExpressionLanguageParser.py',118),
  ('exp -> exp AND exp','exp',3,'p_exp','ExpressionLanguageParser.py',119),
  ('exp -> exp OR exp','exp',3,'p_exp','ExpressionLanguageParser.py',120),
  ('exp_prefix -> VAR','exp_prefix',1,'p_exp_prefix','ExpressionLanguageParser.py',125),
  ('exp_prefix -> call_function','exp_prefix',1,'p_exp_prefix','ExpressionLanguageParser.py',126),
  ('exp_prefix -> LPAREN exp RPAREN','exp_prefix',3,'p_exp_prefix','ExpressionLanguageParser.py',127),
  ('call_function -> exp_prefix args','call_function',2,'p_call_function','ExpressionLanguageParser.py',132),
  ('call_function -> exp_prefix COLON NAME args','call_function',4,'p_call_function','ExpressionLanguageParser.py',133),
  ('args -> LPAREN list_exps RPAREN','args',3,'p_args','ExpressionLanguageParser.py',138),
  ('args -> construct_table','args',1,'p_args','ExpressionLanguageParser.py',139),
  ('def_function -> function','def_function',1,'p_def_function','ExpressionLanguageParser.py',144),
  ('def_function -> local_function','def_function',1,'p_def_function','ExpressionLanguageParser.py',145),
  ('body_function -> LPAREN list_pars RPAREN block END','body_function',5,'p_body_function','ExpressionLanguageParser.py',149),
  ('list_pars -> list_names COMMA VARARGS','list_pars',3,'p_list_pars','ExpressionLanguageParser.py',154),
  ('list_pars -> VARARGS','list_pars',1,'p_list_pars','ExpressionLanguageParser.py',155),
  ('construct_table -> LBRACE list_fields RBRACE','construct_table',3,'p_construct_table','ExpressionLanguageParser.py',160),
  ('construct_table -> LBRACE RBRACE','construct_table',2,'p_construct_table','ExpressionLanguageParser.py',161),
  ('list_fields -> field','list_fields',1,'p_list_fields','ExpressionLanguageParser.py',166),
  ('list_fields -> field separator_fields list_fields','list_fields',3,'p_list_fields','ExpressionLanguageParser.py',167),
  ('list_fields -> field_empty','list_fields',1,'p_list_fields','ExpressionLanguageParser.py',168),
  ('list_fields -> field_empty separator_fields list_fields','list_fields',3,'p_list_fields','ExpressionLanguageParser.py',169),
  ('field_empty -> LCOLCH exp RCOLCH','field_empty',3,'p_field_empty','ExpressionLanguageParser.py',174),
  ('field_empty -> NAME','field_empty',1,'p_field_empty','ExpressionLanguageParser.py',175),
  ('field -> LCOLCH exp RCOLCH ATRIB exp','field',5,'p_field','ExpressionLanguageParser.py',180),
  ('field -> NAME ATRIB exp','field',3,'p_field','ExpressionLanguageParser.py',181),
  ('separator_fields -> COMMA','separator_fields',1,'p_separator_fields','ExpressionLanguageParser.py',186),
  ('separator_fields -> SEMICOLON','separator_fields',1,'p_separator_fields','ExpressionLanguageParser.py',187),
  ('local_var -> LOCAL list_names ATRIB list_exps','local_var',4,'p_local_var','ExpressionLanguageParser.py',192),
  ('local_var -> LOCAL NAME ATRIB exp','local_var',4,'p_local_var','ExpressionLanguageParser.py',193),
  ('op_unary -> MINUS','op_unary',1,'p_op_unary','ExpressionLanguageParser.py',197),
  ('op_unary -> NOT','op_unary',1,'p_op_unary','ExpressionLanguageParser.py',198),
  ('op_unary -> TAG','op_unary',1,'p_op_unary','ExpressionLanguageParser.py',199),
  ('function -> FUNCTION body_function','function',2,'p_function','ExpressionLanguageParser.py',204),
  ('if -> IF exp THEN block END','if',5,'p_if','ExpressionLanguageParser.py',209),
  ('if -> IF exp THEN else','if',4,'p_if','ExpressionLanguageParser.py',210),
  ('else -> ELSE block END','else',3,'p_else','ExpressionLanguageParser.py',225),
  ('struct_while -> WHILE exp DO block END','struct_while',5,'p_struct_while','ExpressionLanguageParser.py',230),
  ('struct_for -> FOR NAME ATRIB exp COMMA exp DO block END','struct_for',9,'p_struct_for','ExpressionLanguageParser.py',235),
  ('struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END','struct_for',11,'p_struct_for','ExpressionLanguageParser.py',236),
  ('struct_for_in -> FOR list_names IN list_exps DO block END','struct_for_in',7,'p_struct_for_in','ExpressionLanguageParser.py',240),
  ('struct_repeat -> REPEAT block UNTIL exp','struct_repeat',4,'p_struct_repeat','ExpressionLanguageParser.py',245),
  ('local_function -> LOCAL FUNCTION name_function body_function','local_function',4,'p_local_function','ExpressionLanguageParser.py',250),
]
