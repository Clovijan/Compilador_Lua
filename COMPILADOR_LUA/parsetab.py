
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftGTLTGTEQUALSLTEQUALSEQUALSDIFleftCONCATleftPLUSMINUSleftPERCENTUALTIMESDIVIDEleftNOTTAGleftEXPOAND ATRIB BREAK COLON COMMA CONCAT DIF DIVIDE DO DOT DUALCOLON ELSE ELSEIF END EQUALS EXPO FALSE FOR FUNCTION GT GTEQUALS IF IN LBRACE LCOLCH LOCAL LPAREN LT LTEQUALS MINUS NAME NIL NOT NUMBER OR PERCENTUAL PLUS RBRACE RCOLCH REPEAT RETURN RPAREN SEMICOLON STRING TAG THEN TIMES TRUE UNTIL VARARGS WHILEprogram : block\n               | function \n               | function programblock : command\n             | command blockcommand : list_vars ATRIB list_exps\n               | call_function\n               | rotulo\n               | BREAK\n               | DO block END\n               | struct_while\n               | struct_repeat\n               | if\n               | struct_for\n               | struct_for_in\n               | LOCAL list_vars ATRIB list_exps\n               | command_retcommand_ret : RETURN SEMICOLON\n                   | RETURN list_exps\n                   | RETURN list_exps SEMICOLON rotulo : DUALCOLON NAME DUALCOLONname_function : NAME\n                     | NAME COLON NAMElist_vars : var \n                 | var COMMA list_varsvar : NAME \n           | prefix_exp LCOLCH exp RCOLCH prefix_exp : var\n                   | call_function list_names : NAME COMMA list_names\n                  | NAMElist_names2 : list_names2 COMMA NAME \n                   | NAMElist_exps : exp COMMA list_exps\n                 | expexp : NIL \n           | FALSE\n           | TRUE \n           | NUMBER\n           | STRING \n           | VARARGS \n           | def_function \n           | prefix_exp\n           | TAG exp\n           | MINUS exp\n           | NOT exp\n           | exp PLUS exp\n           | exp MINUS exp\n           | exp TIMES exp\n           | exp DIVIDE exp\n           | exp EXPO exp\n           | exp PERCENTUAL exp\n           | exp CONCAT exp\n           | exp LT exp\n           | exp LTEQUALS exp\n           | exp GT exp\n           | exp GTEQUALS exp\n           | exp EQUALS exp\n           | exp DIF exp\n           | exp AND exp\n           | exp OR expcall_function : prefix_exp args args : LPAREN list_exps RPAREN\n             | LPAREN RPARENdef_function : functionbody_function : LPAREN list_pars RPAREN block ENDlist_pars : list_names2\n                 | list_names2 COMMA VARARGS\n                 | VARARGSlist_fields : field \n                   | field separator_fields list_fields\n                   | field_empty\n                   | field_empty separator_fields list_fieldsfield_empty : LCOLCH exp RCOLCH\n                   | NAMEfield : LCOLCH exp RCOLCH ATRIB exp\n             | NAME ATRIB exp separator_fields : COMMA\n                        | SEMICOLONlocal_var : LOCAL list_names ATRIB list_exps\n                 | LOCAL list_names\n                 | LOCAL NAME ATRIB expfunction : FUNCTION name_function body_functionif : IF exp THEN block END\n          | IF exp THEN block else\n          | IF exp THEN block else_if elseelse_if : ELSEIF exp THEN block\n               | ELSEIF exp THEN block else_ifelse : ELSE block ENDstruct_while : WHILE exp DO block ENDstruct_for : FOR NAME ATRIB exp COMMA exp DO block END\n                  | FOR NAME ATRIB exp COMMA exp COMMA exp DO block ENDstruct_for_in : FOR list_names IN list_exps DO block ENDstruct_repeat : REPEAT block UNTIL exp'
    
_lr_action_items = {'FUNCTION':([0,3,22,24,26,31,38,39,50,51,52,62,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,148,151,],[5,5,5,5,5,5,5,5,5,5,5,-83,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-66,5,]),'BREAK':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,130,132,133,134,136,139,143,148,149,150,152,153,158,159,161,],[9,9,9,-7,-8,-9,9,-11,-12,-13,-14,-15,-17,-26,9,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,9,-44,-45,-46,9,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,9,-90,-84,-85,9,9,-86,-66,-89,9,9,-93,9,-91,-92,]),'DO':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,41,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,128,129,130,132,133,134,136,139,143,146,148,149,150,152,153,155,158,159,161,],[10,10,10,-7,-8,-9,10,-11,-12,-13,-14,-15,-17,-26,10,-29,-62,73,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,10,-44,-45,-46,10,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,139,-34,10,-90,-84,-85,10,10,-86,152,-66,-89,10,10,-93,158,10,-91,-92,]),'LOCAL':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,130,132,133,134,136,139,143,148,149,150,152,153,158,159,161,],[16,16,16,-7,-8,-9,16,-11,-12,-13,-14,-15,-17,-26,16,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,16,-44,-45,-46,16,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,16,-90,-84,-85,16,16,-86,-66,-89,16,16,-93,16,-91,-92,]),'DUALCOLON':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,40,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,130,132,133,134,136,139,143,148,149,150,152,153,158,159,161,],[20,20,20,-7,-8,-9,20,-11,-12,-13,-14,-15,-17,-26,20,-29,-62,72,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,20,-44,-45,-46,20,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,20,-90,-84,-85,20,20,-86,-66,-89,20,20,-93,20,-91,-92,]),'WHILE':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,130,132,133,134,136,139,143,148,149,150,152,153,158,159,161,],[22,22,22,-7,-8,-9,22,-11,-12,-13,-14,-15,-17,-26,22,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,22,-44,-45,-46,22,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,22,-90,-84,-85,22,22,-86,-66,-89,22,22,-93,22,-91,-92,]),'REPEAT':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,130,132,133,134,136,139,143,148,149,150,152,153,158,159,161,],[23,23,23,-7,-8,-9,23,-11,-12,-13,-14,-15,-17,-26,23,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,23,-44,-45,-46,23,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,23,-90,-84,-85,23,23,-86,-66,-89,23,23,-93,23,-91,-92,]),'IF':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,130,132,133,134,136,139,143,148,149,150,152,153,158,159,161,],[24,24,24,-7,-8,-9,24,-11,-12,-13,-14,-15,-17,-26,24,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,24,-44,-45,-46,24,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,24,-90,-84,-85,24,24,-86,-66,-89,24,24,-93,24,-91,-92,]),'FOR':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,130,132,133,134,136,139,143,148,149,150,152,153,158,159,161,],[25,25,25,-7,-8,-9,25,-11,-12,-13,-14,-15,-17,-26,25,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,25,-44,-45,-46,25,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,25,-90,-84,-85,25,25,-86,-66,-89,25,25,-93,25,-91,-92,]),'RETURN':([0,3,4,7,8,9,10,11,12,13,14,15,17,21,23,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,73,89,90,91,93,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,130,132,133,134,136,139,143,148,149,150,152,153,158,159,161,],[26,26,26,-7,-8,-9,26,-11,-12,-13,-14,-15,-17,-26,26,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,26,-44,-45,-46,26,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,26,-90,-84,-85,26,26,-86,-66,-89,26,26,-93,26,-91,-92,]),'NAME':([0,3,4,5,7,8,9,10,11,12,13,14,15,16,17,20,21,22,23,24,25,26,31,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,53,54,59,60,61,62,63,64,65,66,67,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,130,131,132,133,134,136,137,138,139,143,148,149,150,151,152,153,158,159,161,],[21,21,21,30,-7,-8,-9,21,-11,-12,-13,-14,-15,21,-17,40,-26,21,21,21,57,21,21,-29,21,-62,21,21,-36,-37,-38,-39,-40,-41,-42,-43,21,21,21,-65,-28,-18,-19,-35,-83,102,103,-6,-10,21,-64,-21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-44,-45,-46,21,21,21,126,21,-20,21,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,21,142,-90,-84,-85,21,21,21,21,-86,-66,-89,21,21,21,-93,21,-91,-92,]),'$end':([1,2,3,4,7,8,9,11,12,13,14,15,17,21,27,28,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,89,90,91,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,132,133,134,143,148,149,153,159,161,],[0,-1,-2,-4,-7,-8,-9,-11,-12,-13,-14,-15,-17,-26,-3,-5,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,-44,-45,-46,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,-90,-84,-85,-86,-66,-89,-93,-91,-92,]),'END':([4,7,8,9,11,12,13,14,15,17,21,28,32,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,89,90,91,97,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,133,134,140,143,144,147,148,149,153,156,159,160,161,],[-4,-7,-8,-9,-11,-12,-13,-14,-15,-17,-26,-5,66,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,-44,-45,-46,-20,-16,-27,-63,132,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,133,-34,-90,-84,-85,148,-86,149,153,-66,-89,-93,159,-91,161,-92,]),'UNTIL':([4,7,8,9,11,12,13,14,15,17,21,28,35,37,42,43,44,45,46,47,48,49,53,54,55,59,60,61,62,65,66,71,72,89,90,91,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,129,132,133,134,143,148,149,153,159,161,],[-4,-7,-8,-9,-11,-12,-13,-14,-15,-17,-26,-5,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,92,-18,-19,-35,-83,-6,-10,-64,-21,-44,-45,-46,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,-34,-90,-84,-85,-86,-66,-89,-93,-91,-92,]),'ELSE':([4,7,8,9,11,12,13,14,15,17,21,28,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,89,90,91,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,133,134,135,143,148,149,153,154,157,159,161,],[-4,-7,-8,-9,-11,-12,-13,-14,-15,-17,-26,-5,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,-44,-45,-46,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,136,-34,-90,-84,-85,136,-86,-66,-89,-93,-87,-88,-91,-92,]),'ELSEIF':([4,7,8,9,11,12,13,14,15,17,21,28,35,37,42,43,44,45,46,47,48,49,53,54,59,60,61,62,65,66,71,72,89,90,91,97,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,132,133,134,143,148,149,153,154,159,161,],[-4,-7,-8,-9,-11,-12,-13,-14,-15,-17,-26,-5,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-18,-19,-35,-83,-6,-10,-64,-21,-44,-45,-46,-20,-16,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-94,137,-34,-90,-84,-85,-86,-66,-89,-93,137,-91,-92,]),'ATRIB':([6,18,21,33,57,68,105,],[31,-24,-26,67,94,-25,-27,]),'LCOLCH':([7,18,19,21,34,35,37,49,54,71,105,106,],[-29,-28,38,-26,38,-29,-62,38,-28,-64,-27,-63,]),'LPAREN':([7,18,19,21,29,30,34,35,37,49,54,71,103,105,106,],[-29,-28,39,-26,63,-22,39,-29,-62,39,-28,-64,-23,-27,-63,]),'COMMA':([18,21,35,37,42,43,44,45,46,47,48,49,53,54,57,61,62,71,89,90,91,100,102,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,142,146,148,],[36,-26,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,95,98,-83,-64,-44,-45,-46,131,-33,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,138,95,-32,151,-66,]),'PLUS':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,74,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,74,74,-83,74,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,74,74,74,74,74,74,74,74,74,74,74,74,74,-66,74,]),'MINUS':([21,22,24,26,31,35,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,61,62,67,69,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,96,98,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,137,138,145,146,148,151,155,],[-26,51,51,51,51,-29,-62,51,51,75,-36,-37,-38,-39,-40,-41,-42,-43,51,51,51,-65,-28,75,75,-83,51,75,-64,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-44,-45,-46,51,51,51,51,-27,-63,-47,-48,-49,-50,-51,-52,75,75,75,75,75,75,75,75,75,75,75,51,51,75,75,-66,51,75,]),'TIMES':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,76,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,76,76,-83,76,-64,-44,76,-46,-27,-63,76,76,-49,-50,-51,-52,76,76,76,76,76,76,76,76,76,76,76,76,76,-66,76,]),'DIVIDE':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,77,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,77,77,-83,77,-64,-44,77,-46,-27,-63,77,77,-49,-50,-51,-52,77,77,77,77,77,77,77,77,77,77,77,77,77,-66,77,]),'EXPO':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,78,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,78,78,-83,78,-64,78,78,78,-27,-63,78,78,78,78,-51,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-66,78,]),'PERCENTUAL':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,79,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,79,79,-83,79,-64,-44,79,-46,-27,-63,79,79,-49,-50,-51,-52,79,79,79,79,79,79,79,79,79,79,79,79,79,-66,79,]),'CONCAT':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,80,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,80,80,-83,80,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,80,80,80,80,80,80,80,80,80,80,80,80,-66,80,]),'LT':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,81,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,81,81,-83,81,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,81,81,81,81,81,81,-66,81,]),'LTEQUALS':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,82,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,82,82,-83,82,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,82,82,82,82,82,82,-66,82,]),'GT':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,83,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,83,83,-83,83,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,83,83,83,83,83,83,-66,83,]),'GTEQUALS':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,84,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,84,84,-83,84,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,84,84,84,84,84,84,-66,84,]),'EQUALS':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,85,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,85,85,-83,85,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,85,85,85,85,85,85,-66,85,]),'DIF':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,86,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,86,86,-83,86,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,86,86,86,86,86,86,-66,86,]),'AND':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,87,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,87,87,-83,87,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,87,87,87,87,87,-66,87,]),'OR':([21,35,37,41,42,43,44,45,46,47,48,49,53,54,56,61,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,145,146,148,155,],[-26,-29,-62,88,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,88,88,-83,88,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,88,88,88,88,-66,88,]),'THEN':([21,35,37,42,43,44,45,46,47,48,49,53,54,56,62,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,145,148,],[-26,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,93,-83,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,150,-66,]),'SEMICOLON':([21,26,35,37,42,43,44,45,46,47,48,49,53,54,60,61,62,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,148,],[-26,59,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,97,-35,-83,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-34,-66,]),'RCOLCH':([21,35,37,42,43,44,45,46,47,48,49,53,54,62,69,71,89,90,91,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,148,],[-26,-29,-62,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-83,105,-64,-44,-45,-46,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-66,]),'RPAREN':([21,35,37,39,42,43,44,45,46,47,48,49,53,54,61,62,70,71,89,90,91,99,100,101,102,105,106,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,129,141,142,148,],[-26,-29,-62,71,-36,-37,-38,-39,-40,-41,-42,-43,-65,-28,-35,-83,106,-64,-44,-45,-46,130,-67,-69,-33,-27,-63,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-34,-68,-32,-66,]),'NIL':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,151,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'FALSE':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,151,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'TRUE':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,151,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'NUMBER':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,151,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'STRING':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,151,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'VARARGS':([22,24,26,31,38,39,50,51,52,63,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,131,137,138,151,],[47,47,47,47,47,47,47,47,47,101,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,141,47,47,47,]),'TAG':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,151,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'NOT':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,151,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'COLON':([30,],[64,]),'IN':([57,58,126,127,],[-31,96,-31,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,3,],[1,27,]),'block':([0,3,4,10,23,73,93,130,136,139,150,152,158,],[2,2,28,32,55,107,124,140,144,147,154,156,160,]),'function':([0,3,22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,151,],[3,3,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'command':([0,3,4,10,23,73,93,130,136,139,150,152,158,],[4,4,4,4,4,4,4,4,4,4,4,4,4,]),'list_vars':([0,3,4,10,16,23,36,73,93,130,136,139,150,152,158,],[6,6,6,6,33,6,68,6,6,6,6,6,6,6,6,]),'call_function':([0,3,4,10,16,22,23,24,26,31,36,38,39,50,51,52,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,96,98,130,136,137,138,139,150,151,152,158,],[7,7,7,7,35,35,7,35,35,35,35,35,35,35,35,35,35,7,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,7,35,35,35,7,7,35,35,7,7,35,7,7,]),'rotulo':([0,3,4,10,23,73,93,130,136,139,150,152,158,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'struct_while':([0,3,4,10,23,73,93,130,136,139,150,152,158,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'struct_repeat':([0,3,4,10,23,73,93,130,136,139,150,152,158,],[12,12,12,12,12,12,12,12,12,12,12,12,12,]),'if':([0,3,4,10,23,73,93,130,136,139,150,152,158,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'struct_for':([0,3,4,10,23,73,93,130,136,139,150,152,158,],[14,14,14,14,14,14,14,14,14,14,14,14,14,]),'struct_for_in':([0,3,4,10,23,73,93,130,136,139,150,152,158,],[15,15,15,15,15,15,15,15,15,15,15,15,15,]),'command_ret':([0,3,4,10,23,73,93,130,136,139,150,152,158,],[17,17,17,17,17,17,17,17,17,17,17,17,17,]),'var':([0,3,4,10,16,22,23,24,26,31,36,38,39,50,51,52,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,96,98,130,136,137,138,139,150,151,152,158,],[18,18,18,18,18,54,18,54,54,54,18,54,54,54,54,54,54,18,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,18,54,54,54,18,18,54,54,18,18,54,18,18,]),'prefix_exp':([0,3,4,10,16,22,23,24,26,31,36,38,39,50,51,52,67,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,96,98,130,136,137,138,139,150,151,152,158,],[19,19,19,19,34,49,19,49,49,49,34,49,49,49,49,49,49,19,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,19,49,49,49,19,19,49,49,19,19,49,19,19,]),'name_function':([5,],[29,]),'args':([19,34,49,],[37,37,37,]),'exp':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,151,],[41,56,61,61,69,61,89,90,91,61,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,61,61,145,146,155,]),'def_function':([22,24,26,31,38,39,50,51,52,67,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,94,96,98,137,138,151,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'list_names':([25,95,],[58,127,]),'list_exps':([26,31,39,67,96,98,],[60,65,70,104,128,129,]),'body_function':([29,],[62,]),'list_pars':([63,],[99,]),'list_names2':([63,],[100,]),'else':([124,135,],[134,143,]),'else_if':([124,154,],[135,157,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> block','program',1,'p_program','ExpressionLanguageParser.py',13),
  ('program -> function','program',1,'p_program','ExpressionLanguageParser.py',14),
  ('program -> function program','program',2,'p_program','ExpressionLanguageParser.py',15),
  ('block -> command','block',1,'p_block','ExpressionLanguageParser.py',20),
  ('block -> command block','block',2,'p_block','ExpressionLanguageParser.py',21),
  ('command -> list_vars ATRIB list_exps','command',3,'p_command','ExpressionLanguageParser.py',26),
  ('command -> call_function','command',1,'p_command','ExpressionLanguageParser.py',27),
  ('command -> rotulo','command',1,'p_command','ExpressionLanguageParser.py',28),
  ('command -> BREAK','command',1,'p_command','ExpressionLanguageParser.py',29),
  ('command -> DO block END','command',3,'p_command','ExpressionLanguageParser.py',30),
  ('command -> struct_while','command',1,'p_command','ExpressionLanguageParser.py',31),
  ('command -> struct_repeat','command',1,'p_command','ExpressionLanguageParser.py',32),
  ('command -> if','command',1,'p_command','ExpressionLanguageParser.py',33),
  ('command -> struct_for','command',1,'p_command','ExpressionLanguageParser.py',34),
  ('command -> struct_for_in','command',1,'p_command','ExpressionLanguageParser.py',35),
  ('command -> LOCAL list_vars ATRIB list_exps','command',4,'p_command','ExpressionLanguageParser.py',36),
  ('command -> command_ret','command',1,'p_command','ExpressionLanguageParser.py',37),
  ('command_ret -> RETURN SEMICOLON','command_ret',2,'p_command_ret','ExpressionLanguageParser.py',42),
  ('command_ret -> RETURN list_exps','command_ret',2,'p_command_ret','ExpressionLanguageParser.py',43),
  ('command_ret -> RETURN list_exps SEMICOLON','command_ret',3,'p_command_ret','ExpressionLanguageParser.py',44),
  ('rotulo -> DUALCOLON NAME DUALCOLON','rotulo',3,'p_rotulo','ExpressionLanguageParser.py',49),
  ('name_function -> NAME','name_function',1,'p_name_function','ExpressionLanguageParser.py',54),
  ('name_function -> NAME COLON NAME','name_function',3,'p_name_function','ExpressionLanguageParser.py',55),
  ('list_vars -> var','list_vars',1,'p_list_vars','ExpressionLanguageParser.py',60),
  ('list_vars -> var COMMA list_vars','list_vars',3,'p_list_vars','ExpressionLanguageParser.py',61),
  ('var -> NAME','var',1,'p_var','ExpressionLanguageParser.py',66),
  ('var -> prefix_exp LCOLCH exp RCOLCH','var',4,'p_var','ExpressionLanguageParser.py',67),
  ('prefix_exp -> var','prefix_exp',1,'p_prefix_exp','ExpressionLanguageParser.py',72),
  ('prefix_exp -> call_function','prefix_exp',1,'p_prefix_exp','ExpressionLanguageParser.py',73),
  ('list_names -> NAME COMMA list_names','list_names',3,'p_list_names','ExpressionLanguageParser.py',78),
  ('list_names -> NAME','list_names',1,'p_list_names','ExpressionLanguageParser.py',79),
  ('list_names2 -> list_names2 COMMA NAME','list_names2',3,'p_list_names2','ExpressionLanguageParser.py',82),
  ('list_names2 -> NAME','list_names2',1,'p_list_names2','ExpressionLanguageParser.py',83),
  ('list_exps -> exp COMMA list_exps','list_exps',3,'p_list_exps','ExpressionLanguageParser.py',87),
  ('list_exps -> exp','list_exps',1,'p_list_exps','ExpressionLanguageParser.py',88),
  ('exp -> NIL','exp',1,'p_exp','ExpressionLanguageParser.py',93),
  ('exp -> FALSE','exp',1,'p_exp','ExpressionLanguageParser.py',94),
  ('exp -> TRUE','exp',1,'p_exp','ExpressionLanguageParser.py',95),
  ('exp -> NUMBER','exp',1,'p_exp','ExpressionLanguageParser.py',96),
  ('exp -> STRING','exp',1,'p_exp','ExpressionLanguageParser.py',97),
  ('exp -> VARARGS','exp',1,'p_exp','ExpressionLanguageParser.py',98),
  ('exp -> def_function','exp',1,'p_exp','ExpressionLanguageParser.py',99),
  ('exp -> prefix_exp','exp',1,'p_exp','ExpressionLanguageParser.py',100),
  ('exp -> TAG exp','exp',2,'p_exp','ExpressionLanguageParser.py',101),
  ('exp -> MINUS exp','exp',2,'p_exp','ExpressionLanguageParser.py',102),
  ('exp -> NOT exp','exp',2,'p_exp','ExpressionLanguageParser.py',103),
  ('exp -> exp PLUS exp','exp',3,'p_exp','ExpressionLanguageParser.py',104),
  ('exp -> exp MINUS exp','exp',3,'p_exp','ExpressionLanguageParser.py',105),
  ('exp -> exp TIMES exp','exp',3,'p_exp','ExpressionLanguageParser.py',106),
  ('exp -> exp DIVIDE exp','exp',3,'p_exp','ExpressionLanguageParser.py',107),
  ('exp -> exp EXPO exp','exp',3,'p_exp','ExpressionLanguageParser.py',108),
  ('exp -> exp PERCENTUAL exp','exp',3,'p_exp','ExpressionLanguageParser.py',109),
  ('exp -> exp CONCAT exp','exp',3,'p_exp','ExpressionLanguageParser.py',110),
  ('exp -> exp LT exp','exp',3,'p_exp','ExpressionLanguageParser.py',111),
  ('exp -> exp LTEQUALS exp','exp',3,'p_exp','ExpressionLanguageParser.py',112),
  ('exp -> exp GT exp','exp',3,'p_exp','ExpressionLanguageParser.py',113),
  ('exp -> exp GTEQUALS exp','exp',3,'p_exp','ExpressionLanguageParser.py',114),
  ('exp -> exp EQUALS exp','exp',3,'p_exp','ExpressionLanguageParser.py',115),
  ('exp -> exp DIF exp','exp',3,'p_exp','ExpressionLanguageParser.py',116),
  ('exp -> exp AND exp','exp',3,'p_exp','ExpressionLanguageParser.py',117),
  ('exp -> exp OR exp','exp',3,'p_exp','ExpressionLanguageParser.py',118),
  ('call_function -> prefix_exp args','call_function',2,'p_call_function','ExpressionLanguageParser.py',123),
  ('args -> LPAREN list_exps RPAREN','args',3,'p_args','ExpressionLanguageParser.py',128),
  ('args -> LPAREN RPAREN','args',2,'p_args','ExpressionLanguageParser.py',129),
  ('def_function -> function','def_function',1,'p_def_function','ExpressionLanguageParser.py',134),
  ('body_function -> LPAREN list_pars RPAREN block END','body_function',5,'p_body_function','ExpressionLanguageParser.py',139),
  ('list_pars -> list_names2','list_pars',1,'p_list_pars','ExpressionLanguageParser.py',144),
  ('list_pars -> list_names2 COMMA VARARGS','list_pars',3,'p_list_pars','ExpressionLanguageParser.py',145),
  ('list_pars -> VARARGS','list_pars',1,'p_list_pars','ExpressionLanguageParser.py',146),
  ('list_fields -> field','list_fields',1,'p_list_fields','ExpressionLanguageParser.py',151),
  ('list_fields -> field separator_fields list_fields','list_fields',3,'p_list_fields','ExpressionLanguageParser.py',152),
  ('list_fields -> field_empty','list_fields',1,'p_list_fields','ExpressionLanguageParser.py',153),
  ('list_fields -> field_empty separator_fields list_fields','list_fields',3,'p_list_fields','ExpressionLanguageParser.py',154),
  ('field_empty -> LCOLCH exp RCOLCH','field_empty',3,'p_field_empty','ExpressionLanguageParser.py',159),
  ('field_empty -> NAME','field_empty',1,'p_field_empty','ExpressionLanguageParser.py',160),
  ('field -> LCOLCH exp RCOLCH ATRIB exp','field',5,'p_field','ExpressionLanguageParser.py',165),
  ('field -> NAME ATRIB exp','field',3,'p_field','ExpressionLanguageParser.py',166),
  ('separator_fields -> COMMA','separator_fields',1,'p_separator_fields','ExpressionLanguageParser.py',171),
  ('separator_fields -> SEMICOLON','separator_fields',1,'p_separator_fields','ExpressionLanguageParser.py',172),
  ('local_var -> LOCAL list_names ATRIB list_exps','local_var',4,'p_local_var','ExpressionLanguageParser.py',177),
  ('local_var -> LOCAL list_names','local_var',2,'p_local_var','ExpressionLanguageParser.py',178),
  ('local_var -> LOCAL NAME ATRIB exp','local_var',4,'p_local_var','ExpressionLanguageParser.py',179),
  ('function -> FUNCTION name_function body_function','function',3,'p_function','ExpressionLanguageParser.py',184),
  ('if -> IF exp THEN block END','if',5,'p_if','ExpressionLanguageParser.py',189),
  ('if -> IF exp THEN block else','if',5,'p_if','ExpressionLanguageParser.py',190),
  ('if -> IF exp THEN block else_if else','if',6,'p_if','ExpressionLanguageParser.py',191),
  ('else_if -> ELSEIF exp THEN block','else_if',4,'p_else_if','ExpressionLanguageParser.py',195),
  ('else_if -> ELSEIF exp THEN block else_if','else_if',5,'p_else_if','ExpressionLanguageParser.py',196),
  ('else -> ELSE block END','else',3,'p_else','ExpressionLanguageParser.py',200),
  ('struct_while -> WHILE exp DO block END','struct_while',5,'p_struct_while','ExpressionLanguageParser.py',205),
  ('struct_for -> FOR NAME ATRIB exp COMMA exp DO block END','struct_for',9,'p_struct_for','ExpressionLanguageParser.py',210),
  ('struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END','struct_for',11,'p_struct_for','ExpressionLanguageParser.py',211),
  ('struct_for_in -> FOR list_names IN list_exps DO block END','struct_for_in',7,'p_struct_for_in','ExpressionLanguageParser.py',216),
  ('struct_repeat -> REPEAT block UNTIL exp','struct_repeat',4,'p_struct_repeat','ExpressionLanguageParser.py',221),
]
