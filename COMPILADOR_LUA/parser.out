Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> command
Rule 3     block -> command command_ret
Rule 4     command -> SEMICOLON
Rule 5     command -> list_vars ATRIB list_exps
Rule 6     command -> call_function
Rule 7     command -> rotulo
Rule 8     command -> BREAK
Rule 9     command -> GOTO NAME
Rule 10    command -> DO block END
Rule 11    command -> struct_while
Rule 12    command -> struct_repeat
Rule 13    command -> if
Rule 14    command -> struct_for
Rule 15    command -> struct_for_in
Rule 16    command -> def_function
Rule 17    command -> local_var
Rule 18    command_ret -> RETURN
Rule 19    command_ret -> RETURN list_exps
Rule 20    command_ret -> RETURN list_exps SEMICOLON
Rule 21    rotulo -> DUALCOLON NAME DUALCOLON
Rule 22    name_function -> NAME
Rule 23    name_function -> NAME DOT NAME
Rule 24    name_function -> NAME COLON NAME
Rule 25    list_vars -> var COMMA var
Rule 26    var -> NAME
Rule 27    var -> prefix_exp LCOLCH exp RCOLCH
Rule 28    var -> prefix_exp DOT NAME
Rule 29    prefix_exp -> var
Rule 30    prefix_exp -> call_function
Rule 31    prefix_exp -> LPAREN exp RPAREN
Rule 32    list_names -> NAME COMMA list_names
Rule 33    list_names -> NAME
Rule 34    list_exps -> exp COMMA list_exps
Rule 35    list_exps -> exp
Rule 36    exp -> NIL
Rule 37    exp -> FALSE
Rule 38    exp -> TRUE
Rule 39    exp -> NUMBER
Rule 40    exp -> STRING
Rule 41    exp -> VARARGS
Rule 42    exp -> def_function
Rule 43    exp -> exp_prefix
Rule 44    exp -> construct_table
Rule 45    exp -> exp op_bin exp
Rule 46    exp -> exp op_unary exp
Rule 47    exp_prefix -> VAR
Rule 48    exp_prefix -> call_function
Rule 49    exp_prefix -> LPAREN exp RPAREN
Rule 50    call_function -> exp_prefix args
Rule 51    call_function -> exp_prefix COLON NAME args
Rule 52    args -> LPAREN list_exps RPAREN
Rule 53    args -> construct_table
Rule 54    def_function -> function
Rule 55    def_function -> local_function
Rule 56    body_function -> LPAREN list_pars RPAREN block END
Rule 57    list_pars -> list_names COMMA VARARGS
Rule 58    list_pars -> VARARGS
Rule 59    construct_table -> LBRACE list_fields RBRACE
Rule 60    construct_table -> LBRACE RBRACE
Rule 61    list_fields -> field
Rule 62    list_fields -> field separator_fields list_fields
Rule 63    list_fields -> field_empty
Rule 64    list_fields -> field_empty separator_fields list_fields
Rule 65    field_empty -> LCOLCH exp RCOLCH
Rule 66    field_empty -> NAME
Rule 67    field -> LCOLCH exp RCOLCH ATRIB exp
Rule 68    field -> NAME ATRIB exp
Rule 69    separator_fields -> COMMA
Rule 70    separator_fields -> SEMICOLON
Rule 71    local_var -> LOCAL list_names ATRIB list_exps
Rule 72    local_var -> LOCAL NAME ATRIB exp
Rule 73    op_bin -> exp PLUS exp
Rule 74    op_bin -> exp MINUS exp
Rule 75    op_bin -> exp TIMES exp
Rule 76    op_bin -> exp DIVIDE exp
Rule 77    op_bin -> exp EXPO
Rule 78    op_bin -> exp PERCENTUAL exp
Rule 79    op_bin -> exp CONCAT exp
Rule 80    op_bin -> exp LT exp
Rule 81    op_bin -> exp LTEQUALS exp
Rule 82    op_bin -> exp GT exp
Rule 83    op_bin -> exp GTEQUALS exp
Rule 84    op_bin -> exp EQUALS exp
Rule 85    op_bin -> exp DIF exp
Rule 86    op_bin -> exp AND exp
Rule 87    op_bin -> exp OR exp
Rule 88    op_unary -> MINUS
Rule 89    op_unary -> NOT
Rule 90    op_unary -> TAG
Rule 91    function -> FUNCTION body_function
Rule 92    if -> IF exp THEN block END
Rule 93    if -> IF exp THEN else
Rule 94    if -> IF exp THEN block else_ifs
Rule 95    else_ifs -> else_if else_ifs
Rule 96    else_ifs -> else_if
Rule 97    else_if -> ELSEIF exp THEN block
Rule 98    else_if -> else
Rule 99    else -> ELSE block END
Rule 100   struct_while -> WHILE exp DO block END
Rule 101   struct_for -> FOR NAME ATRIB exp COMMA exp DO block END
Rule 102   struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
Rule 103   struct_for_in -> FOR list_names IN list_exps DO block END
Rule 104   struct_repeat -> REPEAT block UNTIL exp
Rule 105   local_function -> LOCAL FUNCTION name_function body_function

Terminals, with rules where they appear

AND                  : 86
ATRIB                : 5 67 68 71 72 101 102
BREAK                : 8
COLON                : 24 51
COMMA                : 25 32 34 57 69 101 102 102
CONCAT               : 79
DIF                  : 85
DIVIDE               : 76
DO                   : 10 100 101 102 103
DOT                  : 23 28
DUALCOLON            : 21 21
ELSE                 : 99
ELSEIF               : 97
END                  : 10 56 92 99 100 101 102 103
EQUALS               : 84
EXPO                 : 77
FALSE                : 37
FOR                  : 101 102 103
FUNCTION             : 91 105
GOTO                 : 9
GT                   : 82
GTEQUALS             : 83
IF                   : 92 93 94
IN                   : 103
LBRACE               : 59 60
LCOLCH               : 27 65 67
LOCAL                : 71 72 105
LPAREN               : 31 49 52 56
LT                   : 80
LTEQUALS             : 81
MINUS                : 74 88
NAME                 : 9 21 22 23 23 24 24 26 28 32 33 51 66 68 72 101 102
NIL                  : 36
NOT                  : 89
NUMBER               : 39
OR                   : 87
PERCENTUAL           : 78
PLUS                 : 73
RBRACE               : 59 60
RCOLCH               : 27 65 67
REPEAT               : 104
RETURN               : 18 19 20
RPAREN               : 31 49 52 56
SEMICOLON            : 4 20 70
STRING               : 40
TAG                  : 90
THEN                 : 92 93 94 97
TIMES                : 75
TRUE                 : 38
UNTIL                : 104
VAR                  : 47
VARARGS              : 41 57 58
WHILE                : 100
error                : 

Nonterminals, with rules where they appear

args                 : 50 51
block                : 1 10 56 92 94 97 99 100 101 102 103 104
body_function        : 91 105
call_function        : 6 30 48
command              : 2 3
command_ret          : 3
construct_table      : 44 53
def_function         : 16 42
else                 : 93 98
else_if              : 95 96
else_ifs             : 94 95
exp                  : 27 31 34 35 45 45 46 46 49 65 67 67 68 72 73 73 74 74 75 75 76 76 77 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 92 93 94 97 100 101 101 102 102 102 104
exp_prefix           : 43 50 51
field                : 61 62
field_empty          : 63 64
function             : 54
if                   : 13
list_exps            : 5 19 20 34 52 71 103
list_fields          : 59 62 64
list_names           : 32 57 71 103
list_pars            : 56
list_vars            : 5
local_function       : 55
local_var            : 17
name_function        : 105
op_bin               : 45
op_unary             : 46
prefix_exp           : 27 28
program              : 0
rotulo               : 7
separator_fields     : 62 64
struct_for           : 14
struct_for_in        : 15
struct_repeat        : 12
struct_while         : 11
var                  : 25 25 29

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    program                        shift and go to state 1
    block                          shift and go to state 2
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> command .
    (3) block -> command . command_ret
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON

  ! shift/reduce conflict for RETURN resolved as shift
    $end            reduce using rule 2 (block -> command .)
    END             reduce using rule 2 (block -> command .)
    UNTIL           reduce using rule 2 (block -> command .)
    ELSEIF          reduce using rule 2 (block -> command .)
    ELSE            reduce using rule 2 (block -> command .)
    RETURN          shift and go to state 34

  ! RETURN          [ reduce using rule 2 (block -> command .) ]

    command_ret                    shift and go to state 33

state 4

    (4) command -> SEMICOLON .

    RETURN          reduce using rule 4 (command -> SEMICOLON .)
    $end            reduce using rule 4 (command -> SEMICOLON .)
    END             reduce using rule 4 (command -> SEMICOLON .)
    UNTIL           reduce using rule 4 (command -> SEMICOLON .)
    ELSEIF          reduce using rule 4 (command -> SEMICOLON .)
    ELSE            reduce using rule 4 (command -> SEMICOLON .)


state 5

    (5) command -> list_vars . ATRIB list_exps

    ATRIB           shift and go to state 35


state 6

    (6) command -> call_function .
    (48) exp_prefix -> call_function .
    (30) prefix_exp -> call_function .

    RETURN          reduce using rule 6 (command -> call_function .)
    $end            reduce using rule 6 (command -> call_function .)
    END             reduce using rule 6 (command -> call_function .)
    UNTIL           reduce using rule 6 (command -> call_function .)
    ELSEIF          reduce using rule 6 (command -> call_function .)
    ELSE            reduce using rule 6 (command -> call_function .)
    COLON           reduce using rule 48 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 48 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 48 (exp_prefix -> call_function .)
    LCOLCH          reduce using rule 30 (prefix_exp -> call_function .)
    DOT             reduce using rule 30 (prefix_exp -> call_function .)


state 7

    (7) command -> rotulo .

    RETURN          reduce using rule 7 (command -> rotulo .)
    $end            reduce using rule 7 (command -> rotulo .)
    END             reduce using rule 7 (command -> rotulo .)
    UNTIL           reduce using rule 7 (command -> rotulo .)
    ELSEIF          reduce using rule 7 (command -> rotulo .)
    ELSE            reduce using rule 7 (command -> rotulo .)


state 8

    (8) command -> BREAK .

    RETURN          reduce using rule 8 (command -> BREAK .)
    $end            reduce using rule 8 (command -> BREAK .)
    END             reduce using rule 8 (command -> BREAK .)
    UNTIL           reduce using rule 8 (command -> BREAK .)
    ELSEIF          reduce using rule 8 (command -> BREAK .)
    ELSE            reduce using rule 8 (command -> BREAK .)


state 9

    (9) command -> GOTO . NAME

    NAME            shift and go to state 36


state 10

    (26) var -> NAME .

    COMMA           reduce using rule 26 (var -> NAME .)
    LCOLCH          reduce using rule 26 (var -> NAME .)
    DOT             reduce using rule 26 (var -> NAME .)
    ATRIB           reduce using rule 26 (var -> NAME .)


state 11

    (10) command -> DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 37
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 12

    (11) command -> struct_while .

    RETURN          reduce using rule 11 (command -> struct_while .)
    $end            reduce using rule 11 (command -> struct_while .)
    END             reduce using rule 11 (command -> struct_while .)
    UNTIL           reduce using rule 11 (command -> struct_while .)
    ELSEIF          reduce using rule 11 (command -> struct_while .)
    ELSE            reduce using rule 11 (command -> struct_while .)


state 13

    (12) command -> struct_repeat .

    RETURN          reduce using rule 12 (command -> struct_repeat .)
    $end            reduce using rule 12 (command -> struct_repeat .)
    END             reduce using rule 12 (command -> struct_repeat .)
    UNTIL           reduce using rule 12 (command -> struct_repeat .)
    ELSEIF          reduce using rule 12 (command -> struct_repeat .)
    ELSE            reduce using rule 12 (command -> struct_repeat .)


state 14

    (13) command -> if .

    RETURN          reduce using rule 13 (command -> if .)
    $end            reduce using rule 13 (command -> if .)
    END             reduce using rule 13 (command -> if .)
    UNTIL           reduce using rule 13 (command -> if .)
    ELSEIF          reduce using rule 13 (command -> if .)
    ELSE            reduce using rule 13 (command -> if .)


state 15

    (14) command -> struct_for .

    RETURN          reduce using rule 14 (command -> struct_for .)
    $end            reduce using rule 14 (command -> struct_for .)
    END             reduce using rule 14 (command -> struct_for .)
    UNTIL           reduce using rule 14 (command -> struct_for .)
    ELSEIF          reduce using rule 14 (command -> struct_for .)
    ELSE            reduce using rule 14 (command -> struct_for .)


state 16

    (15) command -> struct_for_in .

    RETURN          reduce using rule 15 (command -> struct_for_in .)
    $end            reduce using rule 15 (command -> struct_for_in .)
    END             reduce using rule 15 (command -> struct_for_in .)
    UNTIL           reduce using rule 15 (command -> struct_for_in .)
    ELSEIF          reduce using rule 15 (command -> struct_for_in .)
    ELSE            reduce using rule 15 (command -> struct_for_in .)


state 17

    (16) command -> def_function .

    RETURN          reduce using rule 16 (command -> def_function .)
    $end            reduce using rule 16 (command -> def_function .)
    END             reduce using rule 16 (command -> def_function .)
    UNTIL           reduce using rule 16 (command -> def_function .)
    ELSEIF          reduce using rule 16 (command -> def_function .)
    ELSE            reduce using rule 16 (command -> def_function .)


state 18

    (17) command -> local_var .

    RETURN          reduce using rule 17 (command -> local_var .)
    $end            reduce using rule 17 (command -> local_var .)
    END             reduce using rule 17 (command -> local_var .)
    UNTIL           reduce using rule 17 (command -> local_var .)
    ELSEIF          reduce using rule 17 (command -> local_var .)
    ELSE            reduce using rule 17 (command -> local_var .)


state 19

    (25) list_vars -> var . COMMA var
    (29) prefix_exp -> var .

    COMMA           shift and go to state 38
    LCOLCH          reduce using rule 29 (prefix_exp -> var .)
    DOT             reduce using rule 29 (prefix_exp -> var .)


state 20

    (50) call_function -> exp_prefix . args
    (51) call_function -> exp_prefix . COLON NAME args
    (52) args -> . LPAREN list_exps RPAREN
    (53) args -> . construct_table
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE

    COLON           shift and go to state 40
    LPAREN          shift and go to state 41
    LBRACE          shift and go to state 43

    args                           shift and go to state 39
    construct_table                shift and go to state 42

state 21

    (21) rotulo -> DUALCOLON . NAME DUALCOLON

    NAME            shift and go to state 44


state 22

    (100) struct_while -> WHILE . exp DO block END
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 45
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 23

    (104) struct_repeat -> REPEAT . block UNTIL exp
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 58
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 24

    (92) if -> IF . exp THEN block END
    (93) if -> IF . exp THEN else
    (94) if -> IF . exp THEN block else_ifs
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 59
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 25

    (101) struct_for -> FOR . NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> FOR . NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> FOR . list_names IN list_exps DO block END
    (32) list_names -> . NAME COMMA list_names
    (33) list_names -> . NAME

    NAME            shift and go to state 60

    list_names                     shift and go to state 61

state 26

    (54) def_function -> function .

    RETURN          reduce using rule 54 (def_function -> function .)
    $end            reduce using rule 54 (def_function -> function .)
    END             reduce using rule 54 (def_function -> function .)
    DO              reduce using rule 54 (def_function -> function .)
    MINUS           reduce using rule 54 (def_function -> function .)
    NOT             reduce using rule 54 (def_function -> function .)
    TAG             reduce using rule 54 (def_function -> function .)
    NIL             reduce using rule 54 (def_function -> function .)
    FALSE           reduce using rule 54 (def_function -> function .)
    TRUE            reduce using rule 54 (def_function -> function .)
    NUMBER          reduce using rule 54 (def_function -> function .)
    STRING          reduce using rule 54 (def_function -> function .)
    VARARGS         reduce using rule 54 (def_function -> function .)
    VAR             reduce using rule 54 (def_function -> function .)
    LPAREN          reduce using rule 54 (def_function -> function .)
    LBRACE          reduce using rule 54 (def_function -> function .)
    FUNCTION        reduce using rule 54 (def_function -> function .)
    LOCAL           reduce using rule 54 (def_function -> function .)
    UNTIL           reduce using rule 54 (def_function -> function .)
    THEN            reduce using rule 54 (def_function -> function .)
    RPAREN          reduce using rule 54 (def_function -> function .)
    COMMA           reduce using rule 54 (def_function -> function .)
    SEMICOLON       reduce using rule 54 (def_function -> function .)
    ELSEIF          reduce using rule 54 (def_function -> function .)
    ELSE            reduce using rule 54 (def_function -> function .)
    PLUS            reduce using rule 54 (def_function -> function .)
    TIMES           reduce using rule 54 (def_function -> function .)
    DIVIDE          reduce using rule 54 (def_function -> function .)
    EXPO            reduce using rule 54 (def_function -> function .)
    PERCENTUAL      reduce using rule 54 (def_function -> function .)
    CONCAT          reduce using rule 54 (def_function -> function .)
    LT              reduce using rule 54 (def_function -> function .)
    LTEQUALS        reduce using rule 54 (def_function -> function .)
    GT              reduce using rule 54 (def_function -> function .)
    GTEQUALS        reduce using rule 54 (def_function -> function .)
    EQUALS          reduce using rule 54 (def_function -> function .)
    DIF             reduce using rule 54 (def_function -> function .)
    AND             reduce using rule 54 (def_function -> function .)
    OR              reduce using rule 54 (def_function -> function .)
    RCOLCH          reduce using rule 54 (def_function -> function .)
    RBRACE          reduce using rule 54 (def_function -> function .)


state 27

    (55) def_function -> local_function .

    RETURN          reduce using rule 55 (def_function -> local_function .)
    $end            reduce using rule 55 (def_function -> local_function .)
    END             reduce using rule 55 (def_function -> local_function .)
    DO              reduce using rule 55 (def_function -> local_function .)
    MINUS           reduce using rule 55 (def_function -> local_function .)
    NOT             reduce using rule 55 (def_function -> local_function .)
    TAG             reduce using rule 55 (def_function -> local_function .)
    NIL             reduce using rule 55 (def_function -> local_function .)
    FALSE           reduce using rule 55 (def_function -> local_function .)
    TRUE            reduce using rule 55 (def_function -> local_function .)
    NUMBER          reduce using rule 55 (def_function -> local_function .)
    STRING          reduce using rule 55 (def_function -> local_function .)
    VARARGS         reduce using rule 55 (def_function -> local_function .)
    VAR             reduce using rule 55 (def_function -> local_function .)
    LPAREN          reduce using rule 55 (def_function -> local_function .)
    LBRACE          reduce using rule 55 (def_function -> local_function .)
    FUNCTION        reduce using rule 55 (def_function -> local_function .)
    LOCAL           reduce using rule 55 (def_function -> local_function .)
    UNTIL           reduce using rule 55 (def_function -> local_function .)
    THEN            reduce using rule 55 (def_function -> local_function .)
    RPAREN          reduce using rule 55 (def_function -> local_function .)
    COMMA           reduce using rule 55 (def_function -> local_function .)
    SEMICOLON       reduce using rule 55 (def_function -> local_function .)
    ELSEIF          reduce using rule 55 (def_function -> local_function .)
    ELSE            reduce using rule 55 (def_function -> local_function .)
    PLUS            reduce using rule 55 (def_function -> local_function .)
    TIMES           reduce using rule 55 (def_function -> local_function .)
    DIVIDE          reduce using rule 55 (def_function -> local_function .)
    EXPO            reduce using rule 55 (def_function -> local_function .)
    PERCENTUAL      reduce using rule 55 (def_function -> local_function .)
    CONCAT          reduce using rule 55 (def_function -> local_function .)
    LT              reduce using rule 55 (def_function -> local_function .)
    LTEQUALS        reduce using rule 55 (def_function -> local_function .)
    GT              reduce using rule 55 (def_function -> local_function .)
    GTEQUALS        reduce using rule 55 (def_function -> local_function .)
    EQUALS          reduce using rule 55 (def_function -> local_function .)
    DIF             reduce using rule 55 (def_function -> local_function .)
    AND             reduce using rule 55 (def_function -> local_function .)
    OR              reduce using rule 55 (def_function -> local_function .)
    RCOLCH          reduce using rule 55 (def_function -> local_function .)
    RBRACE          reduce using rule 55 (def_function -> local_function .)


state 28

    (71) local_var -> LOCAL . list_names ATRIB list_exps
    (72) local_var -> LOCAL . NAME ATRIB exp
    (105) local_function -> LOCAL . FUNCTION name_function body_function
    (32) list_names -> . NAME COMMA list_names
    (33) list_names -> . NAME

    NAME            shift and go to state 63
    FUNCTION        shift and go to state 64

    list_names                     shift and go to state 62

state 29

    (27) var -> prefix_exp . LCOLCH exp RCOLCH
    (28) var -> prefix_exp . DOT NAME

    LCOLCH          shift and go to state 65
    DOT             shift and go to state 66


state 30

    (47) exp_prefix -> VAR .

    COLON           reduce using rule 47 (exp_prefix -> VAR .)
    LPAREN          reduce using rule 47 (exp_prefix -> VAR .)
    LBRACE          reduce using rule 47 (exp_prefix -> VAR .)
    DO              reduce using rule 47 (exp_prefix -> VAR .)
    MINUS           reduce using rule 47 (exp_prefix -> VAR .)
    NOT             reduce using rule 47 (exp_prefix -> VAR .)
    TAG             reduce using rule 47 (exp_prefix -> VAR .)
    NIL             reduce using rule 47 (exp_prefix -> VAR .)
    FALSE           reduce using rule 47 (exp_prefix -> VAR .)
    TRUE            reduce using rule 47 (exp_prefix -> VAR .)
    NUMBER          reduce using rule 47 (exp_prefix -> VAR .)
    STRING          reduce using rule 47 (exp_prefix -> VAR .)
    VARARGS         reduce using rule 47 (exp_prefix -> VAR .)
    VAR             reduce using rule 47 (exp_prefix -> VAR .)
    FUNCTION        reduce using rule 47 (exp_prefix -> VAR .)
    LOCAL           reduce using rule 47 (exp_prefix -> VAR .)
    THEN            reduce using rule 47 (exp_prefix -> VAR .)
    RPAREN          reduce using rule 47 (exp_prefix -> VAR .)
    COMMA           reduce using rule 47 (exp_prefix -> VAR .)
    SEMICOLON       reduce using rule 47 (exp_prefix -> VAR .)
    $end            reduce using rule 47 (exp_prefix -> VAR .)
    END             reduce using rule 47 (exp_prefix -> VAR .)
    UNTIL           reduce using rule 47 (exp_prefix -> VAR .)
    ELSEIF          reduce using rule 47 (exp_prefix -> VAR .)
    ELSE            reduce using rule 47 (exp_prefix -> VAR .)
    RETURN          reduce using rule 47 (exp_prefix -> VAR .)
    PLUS            reduce using rule 47 (exp_prefix -> VAR .)
    TIMES           reduce using rule 47 (exp_prefix -> VAR .)
    DIVIDE          reduce using rule 47 (exp_prefix -> VAR .)
    EXPO            reduce using rule 47 (exp_prefix -> VAR .)
    PERCENTUAL      reduce using rule 47 (exp_prefix -> VAR .)
    CONCAT          reduce using rule 47 (exp_prefix -> VAR .)
    LT              reduce using rule 47 (exp_prefix -> VAR .)
    LTEQUALS        reduce using rule 47 (exp_prefix -> VAR .)
    GT              reduce using rule 47 (exp_prefix -> VAR .)
    GTEQUALS        reduce using rule 47 (exp_prefix -> VAR .)
    EQUALS          reduce using rule 47 (exp_prefix -> VAR .)
    DIF             reduce using rule 47 (exp_prefix -> VAR .)
    AND             reduce using rule 47 (exp_prefix -> VAR .)
    OR              reduce using rule 47 (exp_prefix -> VAR .)
    RCOLCH          reduce using rule 47 (exp_prefix -> VAR .)
    RBRACE          reduce using rule 47 (exp_prefix -> VAR .)


state 31

    (49) exp_prefix -> LPAREN . exp RPAREN
    (31) prefix_exp -> LPAREN . exp RPAREN
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 67
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 32

    (91) function -> FUNCTION . body_function
    (56) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 69

    body_function                  shift and go to state 68

state 33

    (3) block -> command command_ret .

    $end            reduce using rule 3 (block -> command command_ret .)
    END             reduce using rule 3 (block -> command command_ret .)
    UNTIL           reduce using rule 3 (block -> command command_ret .)
    ELSEIF          reduce using rule 3 (block -> command command_ret .)
    ELSE            reduce using rule 3 (block -> command command_ret .)
    RETURN          reduce using rule 3 (block -> command command_ret .)


state 34

    (18) command_ret -> RETURN .
    (19) command_ret -> RETURN . list_exps
    (20) command_ret -> RETURN . list_exps SEMICOLON
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    $end            reduce using rule 18 (command_ret -> RETURN .)
    END             reduce using rule 18 (command_ret -> RETURN .)
    UNTIL           reduce using rule 18 (command_ret -> RETURN .)
    ELSEIF          reduce using rule 18 (command_ret -> RETURN .)
    ELSE            reduce using rule 18 (command_ret -> RETURN .)
    RETURN          reduce using rule 18 (command_ret -> RETURN .)
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    list_exps                      shift and go to state 70
    exp                            shift and go to state 71
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 35

    (5) command -> list_vars ATRIB . list_exps
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    list_exps                      shift and go to state 72
    exp                            shift and go to state 71
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 36

    (9) command -> GOTO NAME .

    RETURN          reduce using rule 9 (command -> GOTO NAME .)
    $end            reduce using rule 9 (command -> GOTO NAME .)
    END             reduce using rule 9 (command -> GOTO NAME .)
    UNTIL           reduce using rule 9 (command -> GOTO NAME .)
    ELSEIF          reduce using rule 9 (command -> GOTO NAME .)
    ELSE            reduce using rule 9 (command -> GOTO NAME .)


state 37

    (10) command -> DO block . END

    END             shift and go to state 73


state 38

    (25) list_vars -> var COMMA . var
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN

    NAME            shift and go to state 10
    LPAREN          shift and go to state 76
    VAR             shift and go to state 30

    var                            shift and go to state 74
    prefix_exp                     shift and go to state 29
    call_function                  shift and go to state 75
    exp_prefix                     shift and go to state 20

state 39

    (50) call_function -> exp_prefix args .

    RETURN          reduce using rule 50 (call_function -> exp_prefix args .)
    $end            reduce using rule 50 (call_function -> exp_prefix args .)
    COLON           reduce using rule 50 (call_function -> exp_prefix args .)
    LPAREN          reduce using rule 50 (call_function -> exp_prefix args .)
    LBRACE          reduce using rule 50 (call_function -> exp_prefix args .)
    LCOLCH          reduce using rule 50 (call_function -> exp_prefix args .)
    DOT             reduce using rule 50 (call_function -> exp_prefix args .)
    END             reduce using rule 50 (call_function -> exp_prefix args .)
    DO              reduce using rule 50 (call_function -> exp_prefix args .)
    MINUS           reduce using rule 50 (call_function -> exp_prefix args .)
    NOT             reduce using rule 50 (call_function -> exp_prefix args .)
    TAG             reduce using rule 50 (call_function -> exp_prefix args .)
    NIL             reduce using rule 50 (call_function -> exp_prefix args .)
    FALSE           reduce using rule 50 (call_function -> exp_prefix args .)
    TRUE            reduce using rule 50 (call_function -> exp_prefix args .)
    NUMBER          reduce using rule 50 (call_function -> exp_prefix args .)
    STRING          reduce using rule 50 (call_function -> exp_prefix args .)
    VARARGS         reduce using rule 50 (call_function -> exp_prefix args .)
    VAR             reduce using rule 50 (call_function -> exp_prefix args .)
    FUNCTION        reduce using rule 50 (call_function -> exp_prefix args .)
    LOCAL           reduce using rule 50 (call_function -> exp_prefix args .)
    UNTIL           reduce using rule 50 (call_function -> exp_prefix args .)
    THEN            reduce using rule 50 (call_function -> exp_prefix args .)
    RPAREN          reduce using rule 50 (call_function -> exp_prefix args .)
    COMMA           reduce using rule 50 (call_function -> exp_prefix args .)
    SEMICOLON       reduce using rule 50 (call_function -> exp_prefix args .)
    ELSEIF          reduce using rule 50 (call_function -> exp_prefix args .)
    ELSE            reduce using rule 50 (call_function -> exp_prefix args .)
    PLUS            reduce using rule 50 (call_function -> exp_prefix args .)
    TIMES           reduce using rule 50 (call_function -> exp_prefix args .)
    DIVIDE          reduce using rule 50 (call_function -> exp_prefix args .)
    EXPO            reduce using rule 50 (call_function -> exp_prefix args .)
    PERCENTUAL      reduce using rule 50 (call_function -> exp_prefix args .)
    CONCAT          reduce using rule 50 (call_function -> exp_prefix args .)
    LT              reduce using rule 50 (call_function -> exp_prefix args .)
    LTEQUALS        reduce using rule 50 (call_function -> exp_prefix args .)
    GT              reduce using rule 50 (call_function -> exp_prefix args .)
    GTEQUALS        reduce using rule 50 (call_function -> exp_prefix args .)
    EQUALS          reduce using rule 50 (call_function -> exp_prefix args .)
    DIF             reduce using rule 50 (call_function -> exp_prefix args .)
    AND             reduce using rule 50 (call_function -> exp_prefix args .)
    OR              reduce using rule 50 (call_function -> exp_prefix args .)
    RCOLCH          reduce using rule 50 (call_function -> exp_prefix args .)
    RBRACE          reduce using rule 50 (call_function -> exp_prefix args .)


state 40

    (51) call_function -> exp_prefix COLON . NAME args

    NAME            shift and go to state 77


state 41

    (52) args -> LPAREN . list_exps RPAREN
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    list_exps                      shift and go to state 78
    exp                            shift and go to state 71
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 42

    (53) args -> construct_table .

    RETURN          reduce using rule 53 (args -> construct_table .)
    $end            reduce using rule 53 (args -> construct_table .)
    COLON           reduce using rule 53 (args -> construct_table .)
    LPAREN          reduce using rule 53 (args -> construct_table .)
    LBRACE          reduce using rule 53 (args -> construct_table .)
    LCOLCH          reduce using rule 53 (args -> construct_table .)
    DOT             reduce using rule 53 (args -> construct_table .)
    END             reduce using rule 53 (args -> construct_table .)
    UNTIL           reduce using rule 53 (args -> construct_table .)
    ELSEIF          reduce using rule 53 (args -> construct_table .)
    ELSE            reduce using rule 53 (args -> construct_table .)
    DO              reduce using rule 53 (args -> construct_table .)
    MINUS           reduce using rule 53 (args -> construct_table .)
    NOT             reduce using rule 53 (args -> construct_table .)
    TAG             reduce using rule 53 (args -> construct_table .)
    NIL             reduce using rule 53 (args -> construct_table .)
    FALSE           reduce using rule 53 (args -> construct_table .)
    TRUE            reduce using rule 53 (args -> construct_table .)
    NUMBER          reduce using rule 53 (args -> construct_table .)
    STRING          reduce using rule 53 (args -> construct_table .)
    VARARGS         reduce using rule 53 (args -> construct_table .)
    VAR             reduce using rule 53 (args -> construct_table .)
    FUNCTION        reduce using rule 53 (args -> construct_table .)
    LOCAL           reduce using rule 53 (args -> construct_table .)
    THEN            reduce using rule 53 (args -> construct_table .)
    RPAREN          reduce using rule 53 (args -> construct_table .)
    COMMA           reduce using rule 53 (args -> construct_table .)
    SEMICOLON       reduce using rule 53 (args -> construct_table .)
    PLUS            reduce using rule 53 (args -> construct_table .)
    TIMES           reduce using rule 53 (args -> construct_table .)
    DIVIDE          reduce using rule 53 (args -> construct_table .)
    EXPO            reduce using rule 53 (args -> construct_table .)
    PERCENTUAL      reduce using rule 53 (args -> construct_table .)
    CONCAT          reduce using rule 53 (args -> construct_table .)
    LT              reduce using rule 53 (args -> construct_table .)
    LTEQUALS        reduce using rule 53 (args -> construct_table .)
    GT              reduce using rule 53 (args -> construct_table .)
    GTEQUALS        reduce using rule 53 (args -> construct_table .)
    EQUALS          reduce using rule 53 (args -> construct_table .)
    DIF             reduce using rule 53 (args -> construct_table .)
    AND             reduce using rule 53 (args -> construct_table .)
    OR              reduce using rule 53 (args -> construct_table .)
    RCOLCH          reduce using rule 53 (args -> construct_table .)
    RBRACE          reduce using rule 53 (args -> construct_table .)


state 43

    (59) construct_table -> LBRACE . list_fields RBRACE
    (60) construct_table -> LBRACE . RBRACE
    (61) list_fields -> . field
    (62) list_fields -> . field separator_fields list_fields
    (63) list_fields -> . field_empty
    (64) list_fields -> . field_empty separator_fields list_fields
    (67) field -> . LCOLCH exp RCOLCH ATRIB exp
    (68) field -> . NAME ATRIB exp
    (65) field_empty -> . LCOLCH exp RCOLCH
    (66) field_empty -> . NAME

    RBRACE          shift and go to state 80
    LCOLCH          shift and go to state 83
    NAME            shift and go to state 84

    list_fields                    shift and go to state 79
    field                          shift and go to state 81
    field_empty                    shift and go to state 82

state 44

    (21) rotulo -> DUALCOLON NAME . DUALCOLON

    DUALCOLON       shift and go to state 85


state 45

    (100) struct_while -> WHILE exp . DO block END
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    DO              shift and go to state 87
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 46

    (36) exp -> NIL .

    DO              reduce using rule 36 (exp -> NIL .)
    MINUS           reduce using rule 36 (exp -> NIL .)
    NOT             reduce using rule 36 (exp -> NIL .)
    TAG             reduce using rule 36 (exp -> NIL .)
    NIL             reduce using rule 36 (exp -> NIL .)
    FALSE           reduce using rule 36 (exp -> NIL .)
    TRUE            reduce using rule 36 (exp -> NIL .)
    NUMBER          reduce using rule 36 (exp -> NIL .)
    STRING          reduce using rule 36 (exp -> NIL .)
    VARARGS         reduce using rule 36 (exp -> NIL .)
    VAR             reduce using rule 36 (exp -> NIL .)
    LPAREN          reduce using rule 36 (exp -> NIL .)
    LBRACE          reduce using rule 36 (exp -> NIL .)
    FUNCTION        reduce using rule 36 (exp -> NIL .)
    LOCAL           reduce using rule 36 (exp -> NIL .)
    THEN            reduce using rule 36 (exp -> NIL .)
    RPAREN          reduce using rule 36 (exp -> NIL .)
    COMMA           reduce using rule 36 (exp -> NIL .)
    SEMICOLON       reduce using rule 36 (exp -> NIL .)
    $end            reduce using rule 36 (exp -> NIL .)
    END             reduce using rule 36 (exp -> NIL .)
    UNTIL           reduce using rule 36 (exp -> NIL .)
    ELSEIF          reduce using rule 36 (exp -> NIL .)
    ELSE            reduce using rule 36 (exp -> NIL .)
    RETURN          reduce using rule 36 (exp -> NIL .)
    PLUS            reduce using rule 36 (exp -> NIL .)
    TIMES           reduce using rule 36 (exp -> NIL .)
    DIVIDE          reduce using rule 36 (exp -> NIL .)
    EXPO            reduce using rule 36 (exp -> NIL .)
    PERCENTUAL      reduce using rule 36 (exp -> NIL .)
    CONCAT          reduce using rule 36 (exp -> NIL .)
    LT              reduce using rule 36 (exp -> NIL .)
    LTEQUALS        reduce using rule 36 (exp -> NIL .)
    GT              reduce using rule 36 (exp -> NIL .)
    GTEQUALS        reduce using rule 36 (exp -> NIL .)
    EQUALS          reduce using rule 36 (exp -> NIL .)
    DIF             reduce using rule 36 (exp -> NIL .)
    AND             reduce using rule 36 (exp -> NIL .)
    OR              reduce using rule 36 (exp -> NIL .)
    RCOLCH          reduce using rule 36 (exp -> NIL .)
    RBRACE          reduce using rule 36 (exp -> NIL .)


state 47

    (37) exp -> FALSE .

    DO              reduce using rule 37 (exp -> FALSE .)
    MINUS           reduce using rule 37 (exp -> FALSE .)
    NOT             reduce using rule 37 (exp -> FALSE .)
    TAG             reduce using rule 37 (exp -> FALSE .)
    NIL             reduce using rule 37 (exp -> FALSE .)
    FALSE           reduce using rule 37 (exp -> FALSE .)
    TRUE            reduce using rule 37 (exp -> FALSE .)
    NUMBER          reduce using rule 37 (exp -> FALSE .)
    STRING          reduce using rule 37 (exp -> FALSE .)
    VARARGS         reduce using rule 37 (exp -> FALSE .)
    VAR             reduce using rule 37 (exp -> FALSE .)
    LPAREN          reduce using rule 37 (exp -> FALSE .)
    LBRACE          reduce using rule 37 (exp -> FALSE .)
    FUNCTION        reduce using rule 37 (exp -> FALSE .)
    LOCAL           reduce using rule 37 (exp -> FALSE .)
    THEN            reduce using rule 37 (exp -> FALSE .)
    RPAREN          reduce using rule 37 (exp -> FALSE .)
    COMMA           reduce using rule 37 (exp -> FALSE .)
    SEMICOLON       reduce using rule 37 (exp -> FALSE .)
    $end            reduce using rule 37 (exp -> FALSE .)
    END             reduce using rule 37 (exp -> FALSE .)
    UNTIL           reduce using rule 37 (exp -> FALSE .)
    ELSEIF          reduce using rule 37 (exp -> FALSE .)
    ELSE            reduce using rule 37 (exp -> FALSE .)
    RETURN          reduce using rule 37 (exp -> FALSE .)
    PLUS            reduce using rule 37 (exp -> FALSE .)
    TIMES           reduce using rule 37 (exp -> FALSE .)
    DIVIDE          reduce using rule 37 (exp -> FALSE .)
    EXPO            reduce using rule 37 (exp -> FALSE .)
    PERCENTUAL      reduce using rule 37 (exp -> FALSE .)
    CONCAT          reduce using rule 37 (exp -> FALSE .)
    LT              reduce using rule 37 (exp -> FALSE .)
    LTEQUALS        reduce using rule 37 (exp -> FALSE .)
    GT              reduce using rule 37 (exp -> FALSE .)
    GTEQUALS        reduce using rule 37 (exp -> FALSE .)
    EQUALS          reduce using rule 37 (exp -> FALSE .)
    DIF             reduce using rule 37 (exp -> FALSE .)
    AND             reduce using rule 37 (exp -> FALSE .)
    OR              reduce using rule 37 (exp -> FALSE .)
    RCOLCH          reduce using rule 37 (exp -> FALSE .)
    RBRACE          reduce using rule 37 (exp -> FALSE .)


state 48

    (38) exp -> TRUE .

    DO              reduce using rule 38 (exp -> TRUE .)
    MINUS           reduce using rule 38 (exp -> TRUE .)
    NOT             reduce using rule 38 (exp -> TRUE .)
    TAG             reduce using rule 38 (exp -> TRUE .)
    NIL             reduce using rule 38 (exp -> TRUE .)
    FALSE           reduce using rule 38 (exp -> TRUE .)
    TRUE            reduce using rule 38 (exp -> TRUE .)
    NUMBER          reduce using rule 38 (exp -> TRUE .)
    STRING          reduce using rule 38 (exp -> TRUE .)
    VARARGS         reduce using rule 38 (exp -> TRUE .)
    VAR             reduce using rule 38 (exp -> TRUE .)
    LPAREN          reduce using rule 38 (exp -> TRUE .)
    LBRACE          reduce using rule 38 (exp -> TRUE .)
    FUNCTION        reduce using rule 38 (exp -> TRUE .)
    LOCAL           reduce using rule 38 (exp -> TRUE .)
    THEN            reduce using rule 38 (exp -> TRUE .)
    RPAREN          reduce using rule 38 (exp -> TRUE .)
    COMMA           reduce using rule 38 (exp -> TRUE .)
    SEMICOLON       reduce using rule 38 (exp -> TRUE .)
    $end            reduce using rule 38 (exp -> TRUE .)
    END             reduce using rule 38 (exp -> TRUE .)
    UNTIL           reduce using rule 38 (exp -> TRUE .)
    ELSEIF          reduce using rule 38 (exp -> TRUE .)
    ELSE            reduce using rule 38 (exp -> TRUE .)
    RETURN          reduce using rule 38 (exp -> TRUE .)
    PLUS            reduce using rule 38 (exp -> TRUE .)
    TIMES           reduce using rule 38 (exp -> TRUE .)
    DIVIDE          reduce using rule 38 (exp -> TRUE .)
    EXPO            reduce using rule 38 (exp -> TRUE .)
    PERCENTUAL      reduce using rule 38 (exp -> TRUE .)
    CONCAT          reduce using rule 38 (exp -> TRUE .)
    LT              reduce using rule 38 (exp -> TRUE .)
    LTEQUALS        reduce using rule 38 (exp -> TRUE .)
    GT              reduce using rule 38 (exp -> TRUE .)
    GTEQUALS        reduce using rule 38 (exp -> TRUE .)
    EQUALS          reduce using rule 38 (exp -> TRUE .)
    DIF             reduce using rule 38 (exp -> TRUE .)
    AND             reduce using rule 38 (exp -> TRUE .)
    OR              reduce using rule 38 (exp -> TRUE .)
    RCOLCH          reduce using rule 38 (exp -> TRUE .)
    RBRACE          reduce using rule 38 (exp -> TRUE .)


state 49

    (39) exp -> NUMBER .

    DO              reduce using rule 39 (exp -> NUMBER .)
    MINUS           reduce using rule 39 (exp -> NUMBER .)
    NOT             reduce using rule 39 (exp -> NUMBER .)
    TAG             reduce using rule 39 (exp -> NUMBER .)
    NIL             reduce using rule 39 (exp -> NUMBER .)
    FALSE           reduce using rule 39 (exp -> NUMBER .)
    TRUE            reduce using rule 39 (exp -> NUMBER .)
    NUMBER          reduce using rule 39 (exp -> NUMBER .)
    STRING          reduce using rule 39 (exp -> NUMBER .)
    VARARGS         reduce using rule 39 (exp -> NUMBER .)
    VAR             reduce using rule 39 (exp -> NUMBER .)
    LPAREN          reduce using rule 39 (exp -> NUMBER .)
    LBRACE          reduce using rule 39 (exp -> NUMBER .)
    FUNCTION        reduce using rule 39 (exp -> NUMBER .)
    LOCAL           reduce using rule 39 (exp -> NUMBER .)
    THEN            reduce using rule 39 (exp -> NUMBER .)
    RPAREN          reduce using rule 39 (exp -> NUMBER .)
    COMMA           reduce using rule 39 (exp -> NUMBER .)
    SEMICOLON       reduce using rule 39 (exp -> NUMBER .)
    $end            reduce using rule 39 (exp -> NUMBER .)
    END             reduce using rule 39 (exp -> NUMBER .)
    UNTIL           reduce using rule 39 (exp -> NUMBER .)
    ELSEIF          reduce using rule 39 (exp -> NUMBER .)
    ELSE            reduce using rule 39 (exp -> NUMBER .)
    RETURN          reduce using rule 39 (exp -> NUMBER .)
    PLUS            reduce using rule 39 (exp -> NUMBER .)
    TIMES           reduce using rule 39 (exp -> NUMBER .)
    DIVIDE          reduce using rule 39 (exp -> NUMBER .)
    EXPO            reduce using rule 39 (exp -> NUMBER .)
    PERCENTUAL      reduce using rule 39 (exp -> NUMBER .)
    CONCAT          reduce using rule 39 (exp -> NUMBER .)
    LT              reduce using rule 39 (exp -> NUMBER .)
    LTEQUALS        reduce using rule 39 (exp -> NUMBER .)
    GT              reduce using rule 39 (exp -> NUMBER .)
    GTEQUALS        reduce using rule 39 (exp -> NUMBER .)
    EQUALS          reduce using rule 39 (exp -> NUMBER .)
    DIF             reduce using rule 39 (exp -> NUMBER .)
    AND             reduce using rule 39 (exp -> NUMBER .)
    OR              reduce using rule 39 (exp -> NUMBER .)
    RCOLCH          reduce using rule 39 (exp -> NUMBER .)
    RBRACE          reduce using rule 39 (exp -> NUMBER .)


state 50

    (40) exp -> STRING .

    DO              reduce using rule 40 (exp -> STRING .)
    MINUS           reduce using rule 40 (exp -> STRING .)
    NOT             reduce using rule 40 (exp -> STRING .)
    TAG             reduce using rule 40 (exp -> STRING .)
    NIL             reduce using rule 40 (exp -> STRING .)
    FALSE           reduce using rule 40 (exp -> STRING .)
    TRUE            reduce using rule 40 (exp -> STRING .)
    NUMBER          reduce using rule 40 (exp -> STRING .)
    STRING          reduce using rule 40 (exp -> STRING .)
    VARARGS         reduce using rule 40 (exp -> STRING .)
    VAR             reduce using rule 40 (exp -> STRING .)
    LPAREN          reduce using rule 40 (exp -> STRING .)
    LBRACE          reduce using rule 40 (exp -> STRING .)
    FUNCTION        reduce using rule 40 (exp -> STRING .)
    LOCAL           reduce using rule 40 (exp -> STRING .)
    THEN            reduce using rule 40 (exp -> STRING .)
    RPAREN          reduce using rule 40 (exp -> STRING .)
    COMMA           reduce using rule 40 (exp -> STRING .)
    SEMICOLON       reduce using rule 40 (exp -> STRING .)
    $end            reduce using rule 40 (exp -> STRING .)
    END             reduce using rule 40 (exp -> STRING .)
    UNTIL           reduce using rule 40 (exp -> STRING .)
    ELSEIF          reduce using rule 40 (exp -> STRING .)
    ELSE            reduce using rule 40 (exp -> STRING .)
    RETURN          reduce using rule 40 (exp -> STRING .)
    PLUS            reduce using rule 40 (exp -> STRING .)
    TIMES           reduce using rule 40 (exp -> STRING .)
    DIVIDE          reduce using rule 40 (exp -> STRING .)
    EXPO            reduce using rule 40 (exp -> STRING .)
    PERCENTUAL      reduce using rule 40 (exp -> STRING .)
    CONCAT          reduce using rule 40 (exp -> STRING .)
    LT              reduce using rule 40 (exp -> STRING .)
    LTEQUALS        reduce using rule 40 (exp -> STRING .)
    GT              reduce using rule 40 (exp -> STRING .)
    GTEQUALS        reduce using rule 40 (exp -> STRING .)
    EQUALS          reduce using rule 40 (exp -> STRING .)
    DIF             reduce using rule 40 (exp -> STRING .)
    AND             reduce using rule 40 (exp -> STRING .)
    OR              reduce using rule 40 (exp -> STRING .)
    RCOLCH          reduce using rule 40 (exp -> STRING .)
    RBRACE          reduce using rule 40 (exp -> STRING .)


state 51

    (41) exp -> VARARGS .

    DO              reduce using rule 41 (exp -> VARARGS .)
    MINUS           reduce using rule 41 (exp -> VARARGS .)
    NOT             reduce using rule 41 (exp -> VARARGS .)
    TAG             reduce using rule 41 (exp -> VARARGS .)
    NIL             reduce using rule 41 (exp -> VARARGS .)
    FALSE           reduce using rule 41 (exp -> VARARGS .)
    TRUE            reduce using rule 41 (exp -> VARARGS .)
    NUMBER          reduce using rule 41 (exp -> VARARGS .)
    STRING          reduce using rule 41 (exp -> VARARGS .)
    VARARGS         reduce using rule 41 (exp -> VARARGS .)
    VAR             reduce using rule 41 (exp -> VARARGS .)
    LPAREN          reduce using rule 41 (exp -> VARARGS .)
    LBRACE          reduce using rule 41 (exp -> VARARGS .)
    FUNCTION        reduce using rule 41 (exp -> VARARGS .)
    LOCAL           reduce using rule 41 (exp -> VARARGS .)
    THEN            reduce using rule 41 (exp -> VARARGS .)
    RPAREN          reduce using rule 41 (exp -> VARARGS .)
    COMMA           reduce using rule 41 (exp -> VARARGS .)
    SEMICOLON       reduce using rule 41 (exp -> VARARGS .)
    $end            reduce using rule 41 (exp -> VARARGS .)
    END             reduce using rule 41 (exp -> VARARGS .)
    UNTIL           reduce using rule 41 (exp -> VARARGS .)
    ELSEIF          reduce using rule 41 (exp -> VARARGS .)
    ELSE            reduce using rule 41 (exp -> VARARGS .)
    RETURN          reduce using rule 41 (exp -> VARARGS .)
    PLUS            reduce using rule 41 (exp -> VARARGS .)
    TIMES           reduce using rule 41 (exp -> VARARGS .)
    DIVIDE          reduce using rule 41 (exp -> VARARGS .)
    EXPO            reduce using rule 41 (exp -> VARARGS .)
    PERCENTUAL      reduce using rule 41 (exp -> VARARGS .)
    CONCAT          reduce using rule 41 (exp -> VARARGS .)
    LT              reduce using rule 41 (exp -> VARARGS .)
    LTEQUALS        reduce using rule 41 (exp -> VARARGS .)
    GT              reduce using rule 41 (exp -> VARARGS .)
    GTEQUALS        reduce using rule 41 (exp -> VARARGS .)
    EQUALS          reduce using rule 41 (exp -> VARARGS .)
    DIF             reduce using rule 41 (exp -> VARARGS .)
    AND             reduce using rule 41 (exp -> VARARGS .)
    OR              reduce using rule 41 (exp -> VARARGS .)
    RCOLCH          reduce using rule 41 (exp -> VARARGS .)
    RBRACE          reduce using rule 41 (exp -> VARARGS .)


state 52

    (42) exp -> def_function .

    DO              reduce using rule 42 (exp -> def_function .)
    MINUS           reduce using rule 42 (exp -> def_function .)
    NOT             reduce using rule 42 (exp -> def_function .)
    TAG             reduce using rule 42 (exp -> def_function .)
    NIL             reduce using rule 42 (exp -> def_function .)
    FALSE           reduce using rule 42 (exp -> def_function .)
    TRUE            reduce using rule 42 (exp -> def_function .)
    NUMBER          reduce using rule 42 (exp -> def_function .)
    STRING          reduce using rule 42 (exp -> def_function .)
    VARARGS         reduce using rule 42 (exp -> def_function .)
    VAR             reduce using rule 42 (exp -> def_function .)
    LPAREN          reduce using rule 42 (exp -> def_function .)
    LBRACE          reduce using rule 42 (exp -> def_function .)
    FUNCTION        reduce using rule 42 (exp -> def_function .)
    LOCAL           reduce using rule 42 (exp -> def_function .)
    THEN            reduce using rule 42 (exp -> def_function .)
    RPAREN          reduce using rule 42 (exp -> def_function .)
    COMMA           reduce using rule 42 (exp -> def_function .)
    SEMICOLON       reduce using rule 42 (exp -> def_function .)
    $end            reduce using rule 42 (exp -> def_function .)
    END             reduce using rule 42 (exp -> def_function .)
    UNTIL           reduce using rule 42 (exp -> def_function .)
    ELSEIF          reduce using rule 42 (exp -> def_function .)
    ELSE            reduce using rule 42 (exp -> def_function .)
    RETURN          reduce using rule 42 (exp -> def_function .)
    PLUS            reduce using rule 42 (exp -> def_function .)
    TIMES           reduce using rule 42 (exp -> def_function .)
    DIVIDE          reduce using rule 42 (exp -> def_function .)
    EXPO            reduce using rule 42 (exp -> def_function .)
    PERCENTUAL      reduce using rule 42 (exp -> def_function .)
    CONCAT          reduce using rule 42 (exp -> def_function .)
    LT              reduce using rule 42 (exp -> def_function .)
    LTEQUALS        reduce using rule 42 (exp -> def_function .)
    GT              reduce using rule 42 (exp -> def_function .)
    GTEQUALS        reduce using rule 42 (exp -> def_function .)
    EQUALS          reduce using rule 42 (exp -> def_function .)
    DIF             reduce using rule 42 (exp -> def_function .)
    AND             reduce using rule 42 (exp -> def_function .)
    OR              reduce using rule 42 (exp -> def_function .)
    RCOLCH          reduce using rule 42 (exp -> def_function .)
    RBRACE          reduce using rule 42 (exp -> def_function .)


state 53

    (43) exp -> exp_prefix .
    (50) call_function -> exp_prefix . args
    (51) call_function -> exp_prefix . COLON NAME args
    (52) args -> . LPAREN list_exps RPAREN
    (53) args -> . construct_table
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    DO              reduce using rule 43 (exp -> exp_prefix .)
    MINUS           reduce using rule 43 (exp -> exp_prefix .)
    NOT             reduce using rule 43 (exp -> exp_prefix .)
    TAG             reduce using rule 43 (exp -> exp_prefix .)
    NIL             reduce using rule 43 (exp -> exp_prefix .)
    FALSE           reduce using rule 43 (exp -> exp_prefix .)
    TRUE            reduce using rule 43 (exp -> exp_prefix .)
    NUMBER          reduce using rule 43 (exp -> exp_prefix .)
    STRING          reduce using rule 43 (exp -> exp_prefix .)
    VARARGS         reduce using rule 43 (exp -> exp_prefix .)
    VAR             reduce using rule 43 (exp -> exp_prefix .)
    FUNCTION        reduce using rule 43 (exp -> exp_prefix .)
    LOCAL           reduce using rule 43 (exp -> exp_prefix .)
    THEN            reduce using rule 43 (exp -> exp_prefix .)
    RPAREN          reduce using rule 43 (exp -> exp_prefix .)
    COMMA           reduce using rule 43 (exp -> exp_prefix .)
    SEMICOLON       reduce using rule 43 (exp -> exp_prefix .)
    $end            reduce using rule 43 (exp -> exp_prefix .)
    END             reduce using rule 43 (exp -> exp_prefix .)
    UNTIL           reduce using rule 43 (exp -> exp_prefix .)
    ELSEIF          reduce using rule 43 (exp -> exp_prefix .)
    ELSE            reduce using rule 43 (exp -> exp_prefix .)
    RETURN          reduce using rule 43 (exp -> exp_prefix .)
    PLUS            reduce using rule 43 (exp -> exp_prefix .)
    TIMES           reduce using rule 43 (exp -> exp_prefix .)
    DIVIDE          reduce using rule 43 (exp -> exp_prefix .)
    EXPO            reduce using rule 43 (exp -> exp_prefix .)
    PERCENTUAL      reduce using rule 43 (exp -> exp_prefix .)
    CONCAT          reduce using rule 43 (exp -> exp_prefix .)
    LT              reduce using rule 43 (exp -> exp_prefix .)
    LTEQUALS        reduce using rule 43 (exp -> exp_prefix .)
    GT              reduce using rule 43 (exp -> exp_prefix .)
    GTEQUALS        reduce using rule 43 (exp -> exp_prefix .)
    EQUALS          reduce using rule 43 (exp -> exp_prefix .)
    DIF             reduce using rule 43 (exp -> exp_prefix .)
    AND             reduce using rule 43 (exp -> exp_prefix .)
    OR              reduce using rule 43 (exp -> exp_prefix .)
    RCOLCH          reduce using rule 43 (exp -> exp_prefix .)
    RBRACE          reduce using rule 43 (exp -> exp_prefix .)
    COLON           shift and go to state 40
    LPAREN          shift and go to state 41
    LBRACE          shift and go to state 43

  ! LPAREN          [ reduce using rule 43 (exp -> exp_prefix .) ]
  ! LBRACE          [ reduce using rule 43 (exp -> exp_prefix .) ]

    args                           shift and go to state 39
    construct_table                shift and go to state 42

state 54

    (44) exp -> construct_table .

    DO              reduce using rule 44 (exp -> construct_table .)
    MINUS           reduce using rule 44 (exp -> construct_table .)
    NOT             reduce using rule 44 (exp -> construct_table .)
    TAG             reduce using rule 44 (exp -> construct_table .)
    NIL             reduce using rule 44 (exp -> construct_table .)
    FALSE           reduce using rule 44 (exp -> construct_table .)
    TRUE            reduce using rule 44 (exp -> construct_table .)
    NUMBER          reduce using rule 44 (exp -> construct_table .)
    STRING          reduce using rule 44 (exp -> construct_table .)
    VARARGS         reduce using rule 44 (exp -> construct_table .)
    VAR             reduce using rule 44 (exp -> construct_table .)
    LPAREN          reduce using rule 44 (exp -> construct_table .)
    LBRACE          reduce using rule 44 (exp -> construct_table .)
    FUNCTION        reduce using rule 44 (exp -> construct_table .)
    LOCAL           reduce using rule 44 (exp -> construct_table .)
    THEN            reduce using rule 44 (exp -> construct_table .)
    RPAREN          reduce using rule 44 (exp -> construct_table .)
    COMMA           reduce using rule 44 (exp -> construct_table .)
    SEMICOLON       reduce using rule 44 (exp -> construct_table .)
    $end            reduce using rule 44 (exp -> construct_table .)
    END             reduce using rule 44 (exp -> construct_table .)
    UNTIL           reduce using rule 44 (exp -> construct_table .)
    ELSEIF          reduce using rule 44 (exp -> construct_table .)
    ELSE            reduce using rule 44 (exp -> construct_table .)
    RETURN          reduce using rule 44 (exp -> construct_table .)
    PLUS            reduce using rule 44 (exp -> construct_table .)
    TIMES           reduce using rule 44 (exp -> construct_table .)
    DIVIDE          reduce using rule 44 (exp -> construct_table .)
    EXPO            reduce using rule 44 (exp -> construct_table .)
    PERCENTUAL      reduce using rule 44 (exp -> construct_table .)
    CONCAT          reduce using rule 44 (exp -> construct_table .)
    LT              reduce using rule 44 (exp -> construct_table .)
    LTEQUALS        reduce using rule 44 (exp -> construct_table .)
    GT              reduce using rule 44 (exp -> construct_table .)
    GTEQUALS        reduce using rule 44 (exp -> construct_table .)
    EQUALS          reduce using rule 44 (exp -> construct_table .)
    DIF             reduce using rule 44 (exp -> construct_table .)
    AND             reduce using rule 44 (exp -> construct_table .)
    OR              reduce using rule 44 (exp -> construct_table .)
    RCOLCH          reduce using rule 44 (exp -> construct_table .)
    RBRACE          reduce using rule 44 (exp -> construct_table .)


state 55

    (48) exp_prefix -> call_function .

    COLON           reduce using rule 48 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 48 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 48 (exp_prefix -> call_function .)
    DO              reduce using rule 48 (exp_prefix -> call_function .)
    MINUS           reduce using rule 48 (exp_prefix -> call_function .)
    NOT             reduce using rule 48 (exp_prefix -> call_function .)
    TAG             reduce using rule 48 (exp_prefix -> call_function .)
    NIL             reduce using rule 48 (exp_prefix -> call_function .)
    FALSE           reduce using rule 48 (exp_prefix -> call_function .)
    TRUE            reduce using rule 48 (exp_prefix -> call_function .)
    NUMBER          reduce using rule 48 (exp_prefix -> call_function .)
    STRING          reduce using rule 48 (exp_prefix -> call_function .)
    VARARGS         reduce using rule 48 (exp_prefix -> call_function .)
    VAR             reduce using rule 48 (exp_prefix -> call_function .)
    FUNCTION        reduce using rule 48 (exp_prefix -> call_function .)
    LOCAL           reduce using rule 48 (exp_prefix -> call_function .)
    THEN            reduce using rule 48 (exp_prefix -> call_function .)
    RPAREN          reduce using rule 48 (exp_prefix -> call_function .)
    COMMA           reduce using rule 48 (exp_prefix -> call_function .)
    SEMICOLON       reduce using rule 48 (exp_prefix -> call_function .)
    $end            reduce using rule 48 (exp_prefix -> call_function .)
    END             reduce using rule 48 (exp_prefix -> call_function .)
    UNTIL           reduce using rule 48 (exp_prefix -> call_function .)
    ELSEIF          reduce using rule 48 (exp_prefix -> call_function .)
    ELSE            reduce using rule 48 (exp_prefix -> call_function .)
    RETURN          reduce using rule 48 (exp_prefix -> call_function .)
    PLUS            reduce using rule 48 (exp_prefix -> call_function .)
    TIMES           reduce using rule 48 (exp_prefix -> call_function .)
    DIVIDE          reduce using rule 48 (exp_prefix -> call_function .)
    EXPO            reduce using rule 48 (exp_prefix -> call_function .)
    PERCENTUAL      reduce using rule 48 (exp_prefix -> call_function .)
    CONCAT          reduce using rule 48 (exp_prefix -> call_function .)
    LT              reduce using rule 48 (exp_prefix -> call_function .)
    LTEQUALS        reduce using rule 48 (exp_prefix -> call_function .)
    GT              reduce using rule 48 (exp_prefix -> call_function .)
    GTEQUALS        reduce using rule 48 (exp_prefix -> call_function .)
    EQUALS          reduce using rule 48 (exp_prefix -> call_function .)
    DIF             reduce using rule 48 (exp_prefix -> call_function .)
    AND             reduce using rule 48 (exp_prefix -> call_function .)
    OR              reduce using rule 48 (exp_prefix -> call_function .)
    RCOLCH          reduce using rule 48 (exp_prefix -> call_function .)
    RBRACE          reduce using rule 48 (exp_prefix -> call_function .)


state 56

    (49) exp_prefix -> LPAREN . exp RPAREN
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 93
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 57

    (105) local_function -> LOCAL . FUNCTION name_function body_function

    FUNCTION        shift and go to state 64


state 58

    (104) struct_repeat -> REPEAT block . UNTIL exp

    UNTIL           shift and go to state 94


state 59

    (92) if -> IF exp . THEN block END
    (93) if -> IF exp . THEN else
    (94) if -> IF exp . THEN block else_ifs
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    THEN            shift and go to state 95
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 60

    (101) struct_for -> FOR NAME . ATRIB exp COMMA exp DO block END
    (102) struct_for -> FOR NAME . ATRIB exp COMMA exp COMMA exp DO block END
    (32) list_names -> NAME . COMMA list_names
    (33) list_names -> NAME .

    ATRIB           shift and go to state 96
    COMMA           shift and go to state 97
    IN              reduce using rule 33 (list_names -> NAME .)


state 61

    (103) struct_for_in -> FOR list_names . IN list_exps DO block END

    IN              shift and go to state 98


state 62

    (71) local_var -> LOCAL list_names . ATRIB list_exps

    ATRIB           shift and go to state 99


state 63

    (72) local_var -> LOCAL NAME . ATRIB exp
    (32) list_names -> NAME . COMMA list_names
    (33) list_names -> NAME .

  ! shift/reduce conflict for ATRIB resolved as shift
    ATRIB           shift and go to state 100
    COMMA           shift and go to state 97

  ! ATRIB           [ reduce using rule 33 (list_names -> NAME .) ]


state 64

    (105) local_function -> LOCAL FUNCTION . name_function body_function
    (22) name_function -> . NAME
    (23) name_function -> . NAME DOT NAME
    (24) name_function -> . NAME COLON NAME

    NAME            shift and go to state 102

    name_function                  shift and go to state 101

state 65

    (27) var -> prefix_exp LCOLCH . exp RCOLCH
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 103
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 66

    (28) var -> prefix_exp DOT . NAME

    NAME            shift and go to state 104


state 67

    (49) exp_prefix -> LPAREN exp . RPAREN
    (31) prefix_exp -> LPAREN exp . RPAREN
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    RPAREN          shift and go to state 105
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 68

    (91) function -> FUNCTION body_function .

    RETURN          reduce using rule 91 (function -> FUNCTION body_function .)
    $end            reduce using rule 91 (function -> FUNCTION body_function .)
    END             reduce using rule 91 (function -> FUNCTION body_function .)
    DO              reduce using rule 91 (function -> FUNCTION body_function .)
    MINUS           reduce using rule 91 (function -> FUNCTION body_function .)
    NOT             reduce using rule 91 (function -> FUNCTION body_function .)
    TAG             reduce using rule 91 (function -> FUNCTION body_function .)
    NIL             reduce using rule 91 (function -> FUNCTION body_function .)
    FALSE           reduce using rule 91 (function -> FUNCTION body_function .)
    TRUE            reduce using rule 91 (function -> FUNCTION body_function .)
    NUMBER          reduce using rule 91 (function -> FUNCTION body_function .)
    STRING          reduce using rule 91 (function -> FUNCTION body_function .)
    VARARGS         reduce using rule 91 (function -> FUNCTION body_function .)
    VAR             reduce using rule 91 (function -> FUNCTION body_function .)
    LPAREN          reduce using rule 91 (function -> FUNCTION body_function .)
    LBRACE          reduce using rule 91 (function -> FUNCTION body_function .)
    FUNCTION        reduce using rule 91 (function -> FUNCTION body_function .)
    LOCAL           reduce using rule 91 (function -> FUNCTION body_function .)
    UNTIL           reduce using rule 91 (function -> FUNCTION body_function .)
    THEN            reduce using rule 91 (function -> FUNCTION body_function .)
    RPAREN          reduce using rule 91 (function -> FUNCTION body_function .)
    COMMA           reduce using rule 91 (function -> FUNCTION body_function .)
    SEMICOLON       reduce using rule 91 (function -> FUNCTION body_function .)
    ELSEIF          reduce using rule 91 (function -> FUNCTION body_function .)
    ELSE            reduce using rule 91 (function -> FUNCTION body_function .)
    PLUS            reduce using rule 91 (function -> FUNCTION body_function .)
    TIMES           reduce using rule 91 (function -> FUNCTION body_function .)
    DIVIDE          reduce using rule 91 (function -> FUNCTION body_function .)
    EXPO            reduce using rule 91 (function -> FUNCTION body_function .)
    PERCENTUAL      reduce using rule 91 (function -> FUNCTION body_function .)
    CONCAT          reduce using rule 91 (function -> FUNCTION body_function .)
    LT              reduce using rule 91 (function -> FUNCTION body_function .)
    LTEQUALS        reduce using rule 91 (function -> FUNCTION body_function .)
    GT              reduce using rule 91 (function -> FUNCTION body_function .)
    GTEQUALS        reduce using rule 91 (function -> FUNCTION body_function .)
    EQUALS          reduce using rule 91 (function -> FUNCTION body_function .)
    DIF             reduce using rule 91 (function -> FUNCTION body_function .)
    AND             reduce using rule 91 (function -> FUNCTION body_function .)
    OR              reduce using rule 91 (function -> FUNCTION body_function .)
    RCOLCH          reduce using rule 91 (function -> FUNCTION body_function .)
    RBRACE          reduce using rule 91 (function -> FUNCTION body_function .)


state 69

    (56) body_function -> LPAREN . list_pars RPAREN block END
    (57) list_pars -> . list_names COMMA VARARGS
    (58) list_pars -> . VARARGS
    (32) list_names -> . NAME COMMA list_names
    (33) list_names -> . NAME

    VARARGS         shift and go to state 108
    NAME            shift and go to state 109

    list_pars                      shift and go to state 106
    list_names                     shift and go to state 107

state 70

    (19) command_ret -> RETURN list_exps .
    (20) command_ret -> RETURN list_exps . SEMICOLON

    $end            reduce using rule 19 (command_ret -> RETURN list_exps .)
    END             reduce using rule 19 (command_ret -> RETURN list_exps .)
    UNTIL           reduce using rule 19 (command_ret -> RETURN list_exps .)
    ELSEIF          reduce using rule 19 (command_ret -> RETURN list_exps .)
    ELSE            reduce using rule 19 (command_ret -> RETURN list_exps .)
    RETURN          reduce using rule 19 (command_ret -> RETURN list_exps .)
    SEMICOLON       shift and go to state 110


state 71

    (34) list_exps -> exp . COMMA list_exps
    (35) list_exps -> exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    COMMA           shift and go to state 111
    SEMICOLON       reduce using rule 35 (list_exps -> exp .)
    $end            reduce using rule 35 (list_exps -> exp .)
    END             reduce using rule 35 (list_exps -> exp .)
    UNTIL           reduce using rule 35 (list_exps -> exp .)
    ELSEIF          reduce using rule 35 (list_exps -> exp .)
    ELSE            reduce using rule 35 (list_exps -> exp .)
    RETURN          reduce using rule 35 (list_exps -> exp .)
    RPAREN          reduce using rule 35 (list_exps -> exp .)
    DO              reduce using rule 35 (list_exps -> exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 72

    (5) command -> list_vars ATRIB list_exps .

    RETURN          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    $end            reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    END             reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    UNTIL           reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    ELSEIF          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    ELSE            reduce using rule 5 (command -> list_vars ATRIB list_exps .)


state 73

    (10) command -> DO block END .

    RETURN          reduce using rule 10 (command -> DO block END .)
    $end            reduce using rule 10 (command -> DO block END .)
    END             reduce using rule 10 (command -> DO block END .)
    UNTIL           reduce using rule 10 (command -> DO block END .)
    ELSEIF          reduce using rule 10 (command -> DO block END .)
    ELSE            reduce using rule 10 (command -> DO block END .)


state 74

    (25) list_vars -> var COMMA var .
    (29) prefix_exp -> var .

    ATRIB           reduce using rule 25 (list_vars -> var COMMA var .)
    LCOLCH          reduce using rule 29 (prefix_exp -> var .)
    DOT             reduce using rule 29 (prefix_exp -> var .)


state 75

    (30) prefix_exp -> call_function .
    (48) exp_prefix -> call_function .

    LCOLCH          reduce using rule 30 (prefix_exp -> call_function .)
    DOT             reduce using rule 30 (prefix_exp -> call_function .)
    COLON           reduce using rule 48 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 48 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 48 (exp_prefix -> call_function .)


state 76

    (31) prefix_exp -> LPAREN . exp RPAREN
    (49) exp_prefix -> LPAREN . exp RPAREN
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 112
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 77

    (51) call_function -> exp_prefix COLON NAME . args
    (52) args -> . LPAREN list_exps RPAREN
    (53) args -> . construct_table
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE

    LPAREN          shift and go to state 41
    LBRACE          shift and go to state 43

    args                           shift and go to state 113
    construct_table                shift and go to state 42

state 78

    (52) args -> LPAREN list_exps . RPAREN

    RPAREN          shift and go to state 114


state 79

    (59) construct_table -> LBRACE list_fields . RBRACE

    RBRACE          shift and go to state 115


state 80

    (60) construct_table -> LBRACE RBRACE .

    RETURN          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    $end            reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    COLON           reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    LPAREN          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    LBRACE          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    LCOLCH          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    DOT             reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    END             reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    UNTIL           reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    ELSEIF          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    ELSE            reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    DO              reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    MINUS           reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    NOT             reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    TAG             reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    NIL             reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    FALSE           reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    TRUE            reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    NUMBER          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    STRING          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    VARARGS         reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    VAR             reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    LOCAL           reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    THEN            reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    RPAREN          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    COMMA           reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    PLUS            reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    TIMES           reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    EXPO            reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    PERCENTUAL      reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    CONCAT          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    LT              reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    LTEQUALS        reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    GT              reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    GTEQUALS        reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    EQUALS          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    DIF             reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    AND             reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    OR              reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    RCOLCH          reduce using rule 60 (construct_table -> LBRACE RBRACE .)
    RBRACE          reduce using rule 60 (construct_table -> LBRACE RBRACE .)


state 81

    (61) list_fields -> field .
    (62) list_fields -> field . separator_fields list_fields
    (69) separator_fields -> . COMMA
    (70) separator_fields -> . SEMICOLON

    RBRACE          reduce using rule 61 (list_fields -> field .)
    COMMA           shift and go to state 117
    SEMICOLON       shift and go to state 118

    separator_fields               shift and go to state 116

state 82

    (63) list_fields -> field_empty .
    (64) list_fields -> field_empty . separator_fields list_fields
    (69) separator_fields -> . COMMA
    (70) separator_fields -> . SEMICOLON

    RBRACE          reduce using rule 63 (list_fields -> field_empty .)
    COMMA           shift and go to state 117
    SEMICOLON       shift and go to state 118

    separator_fields               shift and go to state 119

state 83

    (67) field -> LCOLCH . exp RCOLCH ATRIB exp
    (65) field_empty -> LCOLCH . exp RCOLCH
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 120
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 84

    (68) field -> NAME . ATRIB exp
    (66) field_empty -> NAME .

    ATRIB           shift and go to state 121
    COMMA           reduce using rule 66 (field_empty -> NAME .)
    SEMICOLON       reduce using rule 66 (field_empty -> NAME .)
    RBRACE          reduce using rule 66 (field_empty -> NAME .)


state 85

    (21) rotulo -> DUALCOLON NAME DUALCOLON .

    RETURN          reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    $end            reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    END             reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    UNTIL           reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    ELSEIF          reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    ELSE            reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)


state 86

    (73) op_bin -> exp . PLUS exp
    (74) op_bin -> exp . MINUS exp
    (75) op_bin -> exp . TIMES exp
    (76) op_bin -> exp . DIVIDE exp
    (77) op_bin -> exp . EXPO
    (78) op_bin -> exp . PERCENTUAL exp
    (79) op_bin -> exp . CONCAT exp
    (80) op_bin -> exp . LT exp
    (81) op_bin -> exp . LTEQUALS exp
    (82) op_bin -> exp . GT exp
    (83) op_bin -> exp . GTEQUALS exp
    (84) op_bin -> exp . EQUALS exp
    (85) op_bin -> exp . DIF exp
    (86) op_bin -> exp . AND exp
    (87) op_bin -> exp . OR exp
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    PLUS            shift and go to state 122
    MINUS           shift and go to state 123
    TIMES           shift and go to state 124
    DIVIDE          shift and go to state 125
    EXPO            shift and go to state 126
    PERCENTUAL      shift and go to state 127
    CONCAT          shift and go to state 128
    LT              shift and go to state 129
    LTEQUALS        shift and go to state 130
    GT              shift and go to state 131
    GTEQUALS        shift and go to state 132
    EQUALS          shift and go to state 133
    DIF             shift and go to state 134
    AND             shift and go to state 135
    OR              shift and go to state 136
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 87

    (100) struct_while -> WHILE exp DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 137
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 88

    (45) exp -> exp op_bin . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 138
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 89

    (46) exp -> exp op_unary . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 139
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 90

    (88) op_unary -> MINUS .

    NIL             reduce using rule 88 (op_unary -> MINUS .)
    FALSE           reduce using rule 88 (op_unary -> MINUS .)
    TRUE            reduce using rule 88 (op_unary -> MINUS .)
    NUMBER          reduce using rule 88 (op_unary -> MINUS .)
    STRING          reduce using rule 88 (op_unary -> MINUS .)
    VARARGS         reduce using rule 88 (op_unary -> MINUS .)
    VAR             reduce using rule 88 (op_unary -> MINUS .)
    LPAREN          reduce using rule 88 (op_unary -> MINUS .)
    LBRACE          reduce using rule 88 (op_unary -> MINUS .)
    FUNCTION        reduce using rule 88 (op_unary -> MINUS .)
    LOCAL           reduce using rule 88 (op_unary -> MINUS .)


state 91

    (89) op_unary -> NOT .

    NIL             reduce using rule 89 (op_unary -> NOT .)
    FALSE           reduce using rule 89 (op_unary -> NOT .)
    TRUE            reduce using rule 89 (op_unary -> NOT .)
    NUMBER          reduce using rule 89 (op_unary -> NOT .)
    STRING          reduce using rule 89 (op_unary -> NOT .)
    VARARGS         reduce using rule 89 (op_unary -> NOT .)
    VAR             reduce using rule 89 (op_unary -> NOT .)
    LPAREN          reduce using rule 89 (op_unary -> NOT .)
    LBRACE          reduce using rule 89 (op_unary -> NOT .)
    FUNCTION        reduce using rule 89 (op_unary -> NOT .)
    LOCAL           reduce using rule 89 (op_unary -> NOT .)


state 92

    (90) op_unary -> TAG .

    NIL             reduce using rule 90 (op_unary -> TAG .)
    FALSE           reduce using rule 90 (op_unary -> TAG .)
    TRUE            reduce using rule 90 (op_unary -> TAG .)
    NUMBER          reduce using rule 90 (op_unary -> TAG .)
    STRING          reduce using rule 90 (op_unary -> TAG .)
    VARARGS         reduce using rule 90 (op_unary -> TAG .)
    VAR             reduce using rule 90 (op_unary -> TAG .)
    LPAREN          reduce using rule 90 (op_unary -> TAG .)
    LBRACE          reduce using rule 90 (op_unary -> TAG .)
    FUNCTION        reduce using rule 90 (op_unary -> TAG .)
    LOCAL           reduce using rule 90 (op_unary -> TAG .)


state 93

    (49) exp_prefix -> LPAREN exp . RPAREN
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    RPAREN          shift and go to state 140
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 94

    (104) struct_repeat -> REPEAT block UNTIL . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 141
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 95

    (92) if -> IF exp THEN . block END
    (93) if -> IF exp THEN . else
    (94) if -> IF exp THEN . block else_ifs
    (2) block -> . command
    (3) block -> . command command_ret
    (99) else -> . ELSE block END
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    ELSE            shift and go to state 144
    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 142
    else                           shift and go to state 143
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 96

    (101) struct_for -> FOR NAME ATRIB . exp COMMA exp DO block END
    (102) struct_for -> FOR NAME ATRIB . exp COMMA exp COMMA exp DO block END
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 145
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 97

    (32) list_names -> NAME COMMA . list_names
    (32) list_names -> . NAME COMMA list_names
    (33) list_names -> . NAME

    NAME            shift and go to state 109

    list_names                     shift and go to state 146

state 98

    (103) struct_for_in -> FOR list_names IN . list_exps DO block END
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    list_exps                      shift and go to state 147
    exp                            shift and go to state 71
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 99

    (71) local_var -> LOCAL list_names ATRIB . list_exps
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    list_exps                      shift and go to state 148
    exp                            shift and go to state 71
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 100

    (72) local_var -> LOCAL NAME ATRIB . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 149
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 101

    (105) local_function -> LOCAL FUNCTION name_function . body_function
    (56) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 69

    body_function                  shift and go to state 150

state 102

    (22) name_function -> NAME .
    (23) name_function -> NAME . DOT NAME
    (24) name_function -> NAME . COLON NAME

    LPAREN          reduce using rule 22 (name_function -> NAME .)
    DOT             shift and go to state 151
    COLON           shift and go to state 152


state 103

    (27) var -> prefix_exp LCOLCH exp . RCOLCH
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    RCOLCH          shift and go to state 153
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 104

    (28) var -> prefix_exp DOT NAME .

    COMMA           reduce using rule 28 (var -> prefix_exp DOT NAME .)
    LCOLCH          reduce using rule 28 (var -> prefix_exp DOT NAME .)
    DOT             reduce using rule 28 (var -> prefix_exp DOT NAME .)
    ATRIB           reduce using rule 28 (var -> prefix_exp DOT NAME .)


state 105

    (49) exp_prefix -> LPAREN exp RPAREN .
    (31) prefix_exp -> LPAREN exp RPAREN .

    COLON           reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    LCOLCH          reduce using rule 31 (prefix_exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 31 (prefix_exp -> LPAREN exp RPAREN .)


state 106

    (56) body_function -> LPAREN list_pars . RPAREN block END

    RPAREN          shift and go to state 154


state 107

    (57) list_pars -> list_names . COMMA VARARGS

    COMMA           shift and go to state 155


state 108

    (58) list_pars -> VARARGS .

    RPAREN          reduce using rule 58 (list_pars -> VARARGS .)


state 109

    (32) list_names -> NAME . COMMA list_names
    (33) list_names -> NAME .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 97
    IN              reduce using rule 33 (list_names -> NAME .)
    ATRIB           reduce using rule 33 (list_names -> NAME .)

  ! COMMA           [ reduce using rule 33 (list_names -> NAME .) ]


state 110

    (20) command_ret -> RETURN list_exps SEMICOLON .

    $end            reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    END             reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    UNTIL           reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    ELSEIF          reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    ELSE            reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    RETURN          reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)


state 111

    (34) list_exps -> exp COMMA . list_exps
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 71
    list_exps                      shift and go to state 156
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 112

    (31) prefix_exp -> LPAREN exp . RPAREN
    (49) exp_prefix -> LPAREN exp . RPAREN
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    RPAREN          shift and go to state 157
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 113

    (51) call_function -> exp_prefix COLON NAME args .

    RETURN          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    $end            reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    COLON           reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    LPAREN          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    LBRACE          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    LCOLCH          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    DOT             reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    END             reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    DO              reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    MINUS           reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    NOT             reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    TAG             reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    NIL             reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    FALSE           reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    TRUE            reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    NUMBER          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    STRING          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    VARARGS         reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    VAR             reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    FUNCTION        reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    LOCAL           reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    UNTIL           reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    THEN            reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    RPAREN          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    COMMA           reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    SEMICOLON       reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    ELSEIF          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    ELSE            reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    PLUS            reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    TIMES           reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    DIVIDE          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    EXPO            reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    PERCENTUAL      reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    CONCAT          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    LT              reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    LTEQUALS        reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    GT              reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    GTEQUALS        reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    EQUALS          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    DIF             reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    AND             reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    OR              reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    RCOLCH          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)
    RBRACE          reduce using rule 51 (call_function -> exp_prefix COLON NAME args .)


state 114

    (52) args -> LPAREN list_exps RPAREN .

    RETURN          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    $end            reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    COLON           reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    LPAREN          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    LBRACE          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    LCOLCH          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    DOT             reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    END             reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    UNTIL           reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    ELSEIF          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    ELSE            reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    DO              reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    MINUS           reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    NOT             reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    TAG             reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    NIL             reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    FALSE           reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    TRUE            reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    NUMBER          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    STRING          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    VARARGS         reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    VAR             reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    FUNCTION        reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    LOCAL           reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    THEN            reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    RPAREN          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    COMMA           reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    SEMICOLON       reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    PLUS            reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    TIMES           reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    DIVIDE          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    EXPO            reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    PERCENTUAL      reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    CONCAT          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    LT              reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    LTEQUALS        reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    GT              reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    GTEQUALS        reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    EQUALS          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    DIF             reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    AND             reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    OR              reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    RCOLCH          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)
    RBRACE          reduce using rule 52 (args -> LPAREN list_exps RPAREN .)


state 115

    (59) construct_table -> LBRACE list_fields RBRACE .

    RETURN          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    $end            reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    COLON           reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    LPAREN          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    LBRACE          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    LCOLCH          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    DOT             reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    END             reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    UNTIL           reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    ELSEIF          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    ELSE            reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    DO              reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    MINUS           reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    NOT             reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    TAG             reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    NIL             reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    FALSE           reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    TRUE            reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    NUMBER          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    STRING          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    VARARGS         reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    VAR             reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    FUNCTION        reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    LOCAL           reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    THEN            reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    RPAREN          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    COMMA           reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    SEMICOLON       reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    PLUS            reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    TIMES           reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    DIVIDE          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    EXPO            reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    PERCENTUAL      reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    CONCAT          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    LT              reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    LTEQUALS        reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    GT              reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    GTEQUALS        reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    EQUALS          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    DIF             reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    AND             reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    OR              reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    RCOLCH          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)
    RBRACE          reduce using rule 59 (construct_table -> LBRACE list_fields RBRACE .)


state 116

    (62) list_fields -> field separator_fields . list_fields
    (61) list_fields -> . field
    (62) list_fields -> . field separator_fields list_fields
    (63) list_fields -> . field_empty
    (64) list_fields -> . field_empty separator_fields list_fields
    (67) field -> . LCOLCH exp RCOLCH ATRIB exp
    (68) field -> . NAME ATRIB exp
    (65) field_empty -> . LCOLCH exp RCOLCH
    (66) field_empty -> . NAME

    LCOLCH          shift and go to state 83
    NAME            shift and go to state 84

    field                          shift and go to state 81
    list_fields                    shift and go to state 158
    field_empty                    shift and go to state 82

state 117

    (69) separator_fields -> COMMA .

    LCOLCH          reduce using rule 69 (separator_fields -> COMMA .)
    NAME            reduce using rule 69 (separator_fields -> COMMA .)


state 118

    (70) separator_fields -> SEMICOLON .

    LCOLCH          reduce using rule 70 (separator_fields -> SEMICOLON .)
    NAME            reduce using rule 70 (separator_fields -> SEMICOLON .)


state 119

    (64) list_fields -> field_empty separator_fields . list_fields
    (61) list_fields -> . field
    (62) list_fields -> . field separator_fields list_fields
    (63) list_fields -> . field_empty
    (64) list_fields -> . field_empty separator_fields list_fields
    (67) field -> . LCOLCH exp RCOLCH ATRIB exp
    (68) field -> . NAME ATRIB exp
    (65) field_empty -> . LCOLCH exp RCOLCH
    (66) field_empty -> . NAME

    LCOLCH          shift and go to state 83
    NAME            shift and go to state 84

    field_empty                    shift and go to state 82
    list_fields                    shift and go to state 159
    field                          shift and go to state 81

state 120

    (67) field -> LCOLCH exp . RCOLCH ATRIB exp
    (65) field_empty -> LCOLCH exp . RCOLCH
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    RCOLCH          shift and go to state 160
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 121

    (68) field -> NAME ATRIB . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 161
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 122

    (73) op_bin -> exp PLUS . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 162
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 123

    (74) op_bin -> exp MINUS . exp
    (88) op_unary -> MINUS .
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 88 (op_unary -> MINUS .)
    FALSE           reduce using rule 88 (op_unary -> MINUS .)
    TRUE            reduce using rule 88 (op_unary -> MINUS .)
    NUMBER          reduce using rule 88 (op_unary -> MINUS .)
    STRING          reduce using rule 88 (op_unary -> MINUS .)
    VARARGS         reduce using rule 88 (op_unary -> MINUS .)
    VAR             reduce using rule 88 (op_unary -> MINUS .)
    LPAREN          reduce using rule 88 (op_unary -> MINUS .)
    LBRACE          reduce using rule 88 (op_unary -> MINUS .)
    FUNCTION        reduce using rule 88 (op_unary -> MINUS .)
    LOCAL           reduce using rule 88 (op_unary -> MINUS .)

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 163
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 124

    (75) op_bin -> exp TIMES . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 164
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 125

    (76) op_bin -> exp DIVIDE . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 165
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 126

    (77) op_bin -> exp EXPO .

    NIL             reduce using rule 77 (op_bin -> exp EXPO .)
    FALSE           reduce using rule 77 (op_bin -> exp EXPO .)
    TRUE            reduce using rule 77 (op_bin -> exp EXPO .)
    NUMBER          reduce using rule 77 (op_bin -> exp EXPO .)
    STRING          reduce using rule 77 (op_bin -> exp EXPO .)
    VARARGS         reduce using rule 77 (op_bin -> exp EXPO .)
    VAR             reduce using rule 77 (op_bin -> exp EXPO .)
    LPAREN          reduce using rule 77 (op_bin -> exp EXPO .)
    LBRACE          reduce using rule 77 (op_bin -> exp EXPO .)
    FUNCTION        reduce using rule 77 (op_bin -> exp EXPO .)
    LOCAL           reduce using rule 77 (op_bin -> exp EXPO .)


state 127

    (78) op_bin -> exp PERCENTUAL . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 166
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 128

    (79) op_bin -> exp CONCAT . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 167
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 129

    (80) op_bin -> exp LT . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 168
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 130

    (81) op_bin -> exp LTEQUALS . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 169
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 131

    (82) op_bin -> exp GT . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 170
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 132

    (83) op_bin -> exp GTEQUALS . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 171
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 133

    (84) op_bin -> exp EQUALS . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 172
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 134

    (85) op_bin -> exp DIF . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 173
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 135

    (86) op_bin -> exp AND . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 174
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 136

    (87) op_bin -> exp OR . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 175
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 137

    (100) struct_while -> WHILE exp DO block . END

    END             shift and go to state 176


state 138

    (45) exp -> exp op_bin exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TAG resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VARARGS resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for LOCAL resolved as shift
    DO              reduce using rule 45 (exp -> exp op_bin exp .)
    THEN            reduce using rule 45 (exp -> exp op_bin exp .)
    RPAREN          reduce using rule 45 (exp -> exp op_bin exp .)
    COMMA           reduce using rule 45 (exp -> exp op_bin exp .)
    SEMICOLON       reduce using rule 45 (exp -> exp op_bin exp .)
    $end            reduce using rule 45 (exp -> exp op_bin exp .)
    END             reduce using rule 45 (exp -> exp op_bin exp .)
    UNTIL           reduce using rule 45 (exp -> exp op_bin exp .)
    ELSEIF          reduce using rule 45 (exp -> exp op_bin exp .)
    ELSE            reduce using rule 45 (exp -> exp op_bin exp .)
    RETURN          reduce using rule 45 (exp -> exp op_bin exp .)
    PLUS            reduce using rule 45 (exp -> exp op_bin exp .)
    TIMES           reduce using rule 45 (exp -> exp op_bin exp .)
    DIVIDE          reduce using rule 45 (exp -> exp op_bin exp .)
    EXPO            reduce using rule 45 (exp -> exp op_bin exp .)
    PERCENTUAL      reduce using rule 45 (exp -> exp op_bin exp .)
    CONCAT          reduce using rule 45 (exp -> exp op_bin exp .)
    LT              reduce using rule 45 (exp -> exp op_bin exp .)
    LTEQUALS        reduce using rule 45 (exp -> exp op_bin exp .)
    GT              reduce using rule 45 (exp -> exp op_bin exp .)
    GTEQUALS        reduce using rule 45 (exp -> exp op_bin exp .)
    EQUALS          reduce using rule 45 (exp -> exp op_bin exp .)
    DIF             reduce using rule 45 (exp -> exp op_bin exp .)
    AND             reduce using rule 45 (exp -> exp op_bin exp .)
    OR              reduce using rule 45 (exp -> exp op_bin exp .)
    RCOLCH          reduce using rule 45 (exp -> exp op_bin exp .)
    RBRACE          reduce using rule 45 (exp -> exp op_bin exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

  ! MINUS           [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! NOT             [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! TAG             [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! NIL             [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! FALSE           [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! TRUE            [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! NUMBER          [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! STRING          [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! VARARGS         [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! VAR             [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! LPAREN          [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! LBRACE          [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! FUNCTION        [ reduce using rule 45 (exp -> exp op_bin exp .) ]
  ! LOCAL           [ reduce using rule 45 (exp -> exp op_bin exp .) ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 139

    (46) exp -> exp op_unary exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TAG resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for VARARGS resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for LOCAL resolved as shift
    DO              reduce using rule 46 (exp -> exp op_unary exp .)
    THEN            reduce using rule 46 (exp -> exp op_unary exp .)
    RPAREN          reduce using rule 46 (exp -> exp op_unary exp .)
    COMMA           reduce using rule 46 (exp -> exp op_unary exp .)
    SEMICOLON       reduce using rule 46 (exp -> exp op_unary exp .)
    $end            reduce using rule 46 (exp -> exp op_unary exp .)
    END             reduce using rule 46 (exp -> exp op_unary exp .)
    UNTIL           reduce using rule 46 (exp -> exp op_unary exp .)
    ELSEIF          reduce using rule 46 (exp -> exp op_unary exp .)
    ELSE            reduce using rule 46 (exp -> exp op_unary exp .)
    RETURN          reduce using rule 46 (exp -> exp op_unary exp .)
    PLUS            reduce using rule 46 (exp -> exp op_unary exp .)
    TIMES           reduce using rule 46 (exp -> exp op_unary exp .)
    DIVIDE          reduce using rule 46 (exp -> exp op_unary exp .)
    EXPO            reduce using rule 46 (exp -> exp op_unary exp .)
    PERCENTUAL      reduce using rule 46 (exp -> exp op_unary exp .)
    CONCAT          reduce using rule 46 (exp -> exp op_unary exp .)
    LT              reduce using rule 46 (exp -> exp op_unary exp .)
    LTEQUALS        reduce using rule 46 (exp -> exp op_unary exp .)
    GT              reduce using rule 46 (exp -> exp op_unary exp .)
    GTEQUALS        reduce using rule 46 (exp -> exp op_unary exp .)
    EQUALS          reduce using rule 46 (exp -> exp op_unary exp .)
    DIF             reduce using rule 46 (exp -> exp op_unary exp .)
    AND             reduce using rule 46 (exp -> exp op_unary exp .)
    OR              reduce using rule 46 (exp -> exp op_unary exp .)
    RCOLCH          reduce using rule 46 (exp -> exp op_unary exp .)
    RBRACE          reduce using rule 46 (exp -> exp op_unary exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

  ! MINUS           [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! NOT             [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! TAG             [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! NIL             [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! FALSE           [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! TRUE            [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! NUMBER          [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! STRING          [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! VARARGS         [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! VAR             [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! LPAREN          [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! LBRACE          [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! FUNCTION        [ reduce using rule 46 (exp -> exp op_unary exp .) ]
  ! LOCAL           [ reduce using rule 46 (exp -> exp op_unary exp .) ]

    exp                            shift and go to state 86
    op_unary                       shift and go to state 89
    op_bin                         shift and go to state 88
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 140

    (49) exp_prefix -> LPAREN exp RPAREN .

    COLON           reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    DO              reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    NOT             reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    TAG             reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    NIL             reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    FALSE           reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    TRUE            reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    NUMBER          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    STRING          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    VARARGS         reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    VAR             reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    FUNCTION        reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    LOCAL           reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    THEN            reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    $end            reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    END             reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    UNTIL           reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    ELSEIF          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    ELSE            reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    EXPO            reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    PERCENTUAL      reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    CONCAT          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    LT              reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    LTEQUALS        reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    GT              reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    GTEQUALS        reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    DIF             reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    AND             reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    OR              reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    RCOLCH          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    RBRACE          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)


state 141

    (104) struct_repeat -> REPEAT block UNTIL exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    RETURN          reduce using rule 104 (struct_repeat -> REPEAT block UNTIL exp .)
    $end            reduce using rule 104 (struct_repeat -> REPEAT block UNTIL exp .)
    END             reduce using rule 104 (struct_repeat -> REPEAT block UNTIL exp .)
    UNTIL           reduce using rule 104 (struct_repeat -> REPEAT block UNTIL exp .)
    ELSEIF          reduce using rule 104 (struct_repeat -> REPEAT block UNTIL exp .)
    ELSE            reduce using rule 104 (struct_repeat -> REPEAT block UNTIL exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 142

    (92) if -> IF exp THEN block . END
    (94) if -> IF exp THEN block . else_ifs
    (95) else_ifs -> . else_if else_ifs
    (96) else_ifs -> . else_if
    (97) else_if -> . ELSEIF exp THEN block
    (98) else_if -> . else
    (99) else -> . ELSE block END

    END             shift and go to state 177
    ELSEIF          shift and go to state 180
    ELSE            shift and go to state 144

    else_ifs                       shift and go to state 178
    else_if                        shift and go to state 179
    else                           shift and go to state 181

state 143

    (93) if -> IF exp THEN else .

    RETURN          reduce using rule 93 (if -> IF exp THEN else .)
    $end            reduce using rule 93 (if -> IF exp THEN else .)
    END             reduce using rule 93 (if -> IF exp THEN else .)
    UNTIL           reduce using rule 93 (if -> IF exp THEN else .)
    ELSEIF          reduce using rule 93 (if -> IF exp THEN else .)
    ELSE            reduce using rule 93 (if -> IF exp THEN else .)


state 144

    (99) else -> ELSE . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 182
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 145

    (101) struct_for -> FOR NAME ATRIB exp . COMMA exp DO block END
    (102) struct_for -> FOR NAME ATRIB exp . COMMA exp COMMA exp DO block END
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    COMMA           shift and go to state 183
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 146

    (32) list_names -> NAME COMMA list_names .

    IN              reduce using rule 32 (list_names -> NAME COMMA list_names .)
    ATRIB           reduce using rule 32 (list_names -> NAME COMMA list_names .)
    COMMA           reduce using rule 32 (list_names -> NAME COMMA list_names .)


state 147

    (103) struct_for_in -> FOR list_names IN list_exps . DO block END

    DO              shift and go to state 184


state 148

    (71) local_var -> LOCAL list_names ATRIB list_exps .

    RETURN          reduce using rule 71 (local_var -> LOCAL list_names ATRIB list_exps .)
    $end            reduce using rule 71 (local_var -> LOCAL list_names ATRIB list_exps .)
    END             reduce using rule 71 (local_var -> LOCAL list_names ATRIB list_exps .)
    UNTIL           reduce using rule 71 (local_var -> LOCAL list_names ATRIB list_exps .)
    ELSEIF          reduce using rule 71 (local_var -> LOCAL list_names ATRIB list_exps .)
    ELSE            reduce using rule 71 (local_var -> LOCAL list_names ATRIB list_exps .)


state 149

    (72) local_var -> LOCAL NAME ATRIB exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    RETURN          reduce using rule 72 (local_var -> LOCAL NAME ATRIB exp .)
    $end            reduce using rule 72 (local_var -> LOCAL NAME ATRIB exp .)
    END             reduce using rule 72 (local_var -> LOCAL NAME ATRIB exp .)
    UNTIL           reduce using rule 72 (local_var -> LOCAL NAME ATRIB exp .)
    ELSEIF          reduce using rule 72 (local_var -> LOCAL NAME ATRIB exp .)
    ELSE            reduce using rule 72 (local_var -> LOCAL NAME ATRIB exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 150

    (105) local_function -> LOCAL FUNCTION name_function body_function .

    RETURN          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    $end            reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    END             reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    DO              reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    MINUS           reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    NOT             reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    TAG             reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    NIL             reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    FALSE           reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    TRUE            reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    NUMBER          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    STRING          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    VARARGS         reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    VAR             reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    LPAREN          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    LBRACE          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    FUNCTION        reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    LOCAL           reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    UNTIL           reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    THEN            reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    RPAREN          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    COMMA           reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    SEMICOLON       reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    ELSEIF          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    ELSE            reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    PLUS            reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    TIMES           reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    DIVIDE          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    EXPO            reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    PERCENTUAL      reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    CONCAT          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    LT              reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    LTEQUALS        reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    GT              reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    GTEQUALS        reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    EQUALS          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    DIF             reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    AND             reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    OR              reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    RCOLCH          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)
    RBRACE          reduce using rule 105 (local_function -> LOCAL FUNCTION name_function body_function .)


state 151

    (23) name_function -> NAME DOT . NAME

    NAME            shift and go to state 185


state 152

    (24) name_function -> NAME COLON . NAME

    NAME            shift and go to state 186


state 153

    (27) var -> prefix_exp LCOLCH exp RCOLCH .

    COMMA           reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LCOLCH          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DOT             reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    ATRIB           reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)


state 154

    (56) body_function -> LPAREN list_pars RPAREN . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 187
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 155

    (57) list_pars -> list_names COMMA . VARARGS

    VARARGS         shift and go to state 188


state 156

    (34) list_exps -> exp COMMA list_exps .

    SEMICOLON       reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    $end            reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    END             reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    UNTIL           reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    ELSEIF          reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    ELSE            reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    RETURN          reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    RPAREN          reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    DO              reduce using rule 34 (list_exps -> exp COMMA list_exps .)


state 157

    (31) prefix_exp -> LPAREN exp RPAREN .
    (49) exp_prefix -> LPAREN exp RPAREN .

    LCOLCH          reduce using rule 31 (prefix_exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 31 (prefix_exp -> LPAREN exp RPAREN .)
    COLON           reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 49 (exp_prefix -> LPAREN exp RPAREN .)


state 158

    (62) list_fields -> field separator_fields list_fields .

    RBRACE          reduce using rule 62 (list_fields -> field separator_fields list_fields .)


state 159

    (64) list_fields -> field_empty separator_fields list_fields .

    RBRACE          reduce using rule 64 (list_fields -> field_empty separator_fields list_fields .)


state 160

    (67) field -> LCOLCH exp RCOLCH . ATRIB exp
    (65) field_empty -> LCOLCH exp RCOLCH .

    ATRIB           shift and go to state 189
    COMMA           reduce using rule 65 (field_empty -> LCOLCH exp RCOLCH .)
    SEMICOLON       reduce using rule 65 (field_empty -> LCOLCH exp RCOLCH .)
    RBRACE          reduce using rule 65 (field_empty -> LCOLCH exp RCOLCH .)


state 161

    (68) field -> NAME ATRIB exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    COMMA           reduce using rule 68 (field -> NAME ATRIB exp .)
    SEMICOLON       reduce using rule 68 (field -> NAME ATRIB exp .)
    RBRACE          reduce using rule 68 (field -> NAME ATRIB exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 162

    (73) op_bin -> exp PLUS exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 73 (op_bin -> exp PLUS exp .)
    FALSE           reduce using rule 73 (op_bin -> exp PLUS exp .)
    TRUE            reduce using rule 73 (op_bin -> exp PLUS exp .)
    NUMBER          reduce using rule 73 (op_bin -> exp PLUS exp .)
    STRING          reduce using rule 73 (op_bin -> exp PLUS exp .)
    VARARGS         reduce using rule 73 (op_bin -> exp PLUS exp .)
    VAR             reduce using rule 73 (op_bin -> exp PLUS exp .)
    LPAREN          reduce using rule 73 (op_bin -> exp PLUS exp .)
    LBRACE          reduce using rule 73 (op_bin -> exp PLUS exp .)
    FUNCTION        reduce using rule 73 (op_bin -> exp PLUS exp .)
    LOCAL           reduce using rule 73 (op_bin -> exp PLUS exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 163

    (74) op_bin -> exp MINUS exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 74 (op_bin -> exp MINUS exp .)
    FALSE           reduce using rule 74 (op_bin -> exp MINUS exp .)
    TRUE            reduce using rule 74 (op_bin -> exp MINUS exp .)
    NUMBER          reduce using rule 74 (op_bin -> exp MINUS exp .)
    STRING          reduce using rule 74 (op_bin -> exp MINUS exp .)
    VARARGS         reduce using rule 74 (op_bin -> exp MINUS exp .)
    VAR             reduce using rule 74 (op_bin -> exp MINUS exp .)
    LPAREN          reduce using rule 74 (op_bin -> exp MINUS exp .)
    LBRACE          reduce using rule 74 (op_bin -> exp MINUS exp .)
    FUNCTION        reduce using rule 74 (op_bin -> exp MINUS exp .)
    LOCAL           reduce using rule 74 (op_bin -> exp MINUS exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 164

    (75) op_bin -> exp TIMES exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 75 (op_bin -> exp TIMES exp .)
    FALSE           reduce using rule 75 (op_bin -> exp TIMES exp .)
    TRUE            reduce using rule 75 (op_bin -> exp TIMES exp .)
    NUMBER          reduce using rule 75 (op_bin -> exp TIMES exp .)
    STRING          reduce using rule 75 (op_bin -> exp TIMES exp .)
    VARARGS         reduce using rule 75 (op_bin -> exp TIMES exp .)
    VAR             reduce using rule 75 (op_bin -> exp TIMES exp .)
    LPAREN          reduce using rule 75 (op_bin -> exp TIMES exp .)
    LBRACE          reduce using rule 75 (op_bin -> exp TIMES exp .)
    FUNCTION        reduce using rule 75 (op_bin -> exp TIMES exp .)
    LOCAL           reduce using rule 75 (op_bin -> exp TIMES exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 165

    (76) op_bin -> exp DIVIDE exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    FALSE           reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    TRUE            reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    NUMBER          reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    STRING          reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    VARARGS         reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    VAR             reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    LPAREN          reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    LBRACE          reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    FUNCTION        reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    LOCAL           reduce using rule 76 (op_bin -> exp DIVIDE exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 166

    (78) op_bin -> exp PERCENTUAL exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    FALSE           reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    TRUE            reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    NUMBER          reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    STRING          reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    VARARGS         reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    VAR             reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    LPAREN          reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    LBRACE          reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    FUNCTION        reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    LOCAL           reduce using rule 78 (op_bin -> exp PERCENTUAL exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 167

    (79) op_bin -> exp CONCAT exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 79 (op_bin -> exp CONCAT exp .)
    FALSE           reduce using rule 79 (op_bin -> exp CONCAT exp .)
    TRUE            reduce using rule 79 (op_bin -> exp CONCAT exp .)
    NUMBER          reduce using rule 79 (op_bin -> exp CONCAT exp .)
    STRING          reduce using rule 79 (op_bin -> exp CONCAT exp .)
    VARARGS         reduce using rule 79 (op_bin -> exp CONCAT exp .)
    VAR             reduce using rule 79 (op_bin -> exp CONCAT exp .)
    LPAREN          reduce using rule 79 (op_bin -> exp CONCAT exp .)
    LBRACE          reduce using rule 79 (op_bin -> exp CONCAT exp .)
    FUNCTION        reduce using rule 79 (op_bin -> exp CONCAT exp .)
    LOCAL           reduce using rule 79 (op_bin -> exp CONCAT exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 168

    (80) op_bin -> exp LT exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 80 (op_bin -> exp LT exp .)
    FALSE           reduce using rule 80 (op_bin -> exp LT exp .)
    TRUE            reduce using rule 80 (op_bin -> exp LT exp .)
    NUMBER          reduce using rule 80 (op_bin -> exp LT exp .)
    STRING          reduce using rule 80 (op_bin -> exp LT exp .)
    VARARGS         reduce using rule 80 (op_bin -> exp LT exp .)
    VAR             reduce using rule 80 (op_bin -> exp LT exp .)
    LPAREN          reduce using rule 80 (op_bin -> exp LT exp .)
    LBRACE          reduce using rule 80 (op_bin -> exp LT exp .)
    FUNCTION        reduce using rule 80 (op_bin -> exp LT exp .)
    LOCAL           reduce using rule 80 (op_bin -> exp LT exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 169

    (81) op_bin -> exp LTEQUALS exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    FALSE           reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    TRUE            reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    NUMBER          reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    STRING          reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    VARARGS         reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    VAR             reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    LPAREN          reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    LBRACE          reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    FUNCTION        reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    LOCAL           reduce using rule 81 (op_bin -> exp LTEQUALS exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 170

    (82) op_bin -> exp GT exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 82 (op_bin -> exp GT exp .)
    FALSE           reduce using rule 82 (op_bin -> exp GT exp .)
    TRUE            reduce using rule 82 (op_bin -> exp GT exp .)
    NUMBER          reduce using rule 82 (op_bin -> exp GT exp .)
    STRING          reduce using rule 82 (op_bin -> exp GT exp .)
    VARARGS         reduce using rule 82 (op_bin -> exp GT exp .)
    VAR             reduce using rule 82 (op_bin -> exp GT exp .)
    LPAREN          reduce using rule 82 (op_bin -> exp GT exp .)
    LBRACE          reduce using rule 82 (op_bin -> exp GT exp .)
    FUNCTION        reduce using rule 82 (op_bin -> exp GT exp .)
    LOCAL           reduce using rule 82 (op_bin -> exp GT exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 171

    (83) op_bin -> exp GTEQUALS exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    FALSE           reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    TRUE            reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    NUMBER          reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    STRING          reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    VARARGS         reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    VAR             reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    LPAREN          reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    LBRACE          reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    FUNCTION        reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    LOCAL           reduce using rule 83 (op_bin -> exp GTEQUALS exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 172

    (84) op_bin -> exp EQUALS exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 84 (op_bin -> exp EQUALS exp .)
    FALSE           reduce using rule 84 (op_bin -> exp EQUALS exp .)
    TRUE            reduce using rule 84 (op_bin -> exp EQUALS exp .)
    NUMBER          reduce using rule 84 (op_bin -> exp EQUALS exp .)
    STRING          reduce using rule 84 (op_bin -> exp EQUALS exp .)
    VARARGS         reduce using rule 84 (op_bin -> exp EQUALS exp .)
    VAR             reduce using rule 84 (op_bin -> exp EQUALS exp .)
    LPAREN          reduce using rule 84 (op_bin -> exp EQUALS exp .)
    LBRACE          reduce using rule 84 (op_bin -> exp EQUALS exp .)
    FUNCTION        reduce using rule 84 (op_bin -> exp EQUALS exp .)
    LOCAL           reduce using rule 84 (op_bin -> exp EQUALS exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 173

    (85) op_bin -> exp DIF exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 85 (op_bin -> exp DIF exp .)
    FALSE           reduce using rule 85 (op_bin -> exp DIF exp .)
    TRUE            reduce using rule 85 (op_bin -> exp DIF exp .)
    NUMBER          reduce using rule 85 (op_bin -> exp DIF exp .)
    STRING          reduce using rule 85 (op_bin -> exp DIF exp .)
    VARARGS         reduce using rule 85 (op_bin -> exp DIF exp .)
    VAR             reduce using rule 85 (op_bin -> exp DIF exp .)
    LPAREN          reduce using rule 85 (op_bin -> exp DIF exp .)
    LBRACE          reduce using rule 85 (op_bin -> exp DIF exp .)
    FUNCTION        reduce using rule 85 (op_bin -> exp DIF exp .)
    LOCAL           reduce using rule 85 (op_bin -> exp DIF exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 174

    (86) op_bin -> exp AND exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 86 (op_bin -> exp AND exp .)
    FALSE           reduce using rule 86 (op_bin -> exp AND exp .)
    TRUE            reduce using rule 86 (op_bin -> exp AND exp .)
    NUMBER          reduce using rule 86 (op_bin -> exp AND exp .)
    STRING          reduce using rule 86 (op_bin -> exp AND exp .)
    VARARGS         reduce using rule 86 (op_bin -> exp AND exp .)
    VAR             reduce using rule 86 (op_bin -> exp AND exp .)
    LPAREN          reduce using rule 86 (op_bin -> exp AND exp .)
    LBRACE          reduce using rule 86 (op_bin -> exp AND exp .)
    FUNCTION        reduce using rule 86 (op_bin -> exp AND exp .)
    LOCAL           reduce using rule 86 (op_bin -> exp AND exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 175

    (87) op_bin -> exp OR exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 87 (op_bin -> exp OR exp .)
    FALSE           reduce using rule 87 (op_bin -> exp OR exp .)
    TRUE            reduce using rule 87 (op_bin -> exp OR exp .)
    NUMBER          reduce using rule 87 (op_bin -> exp OR exp .)
    STRING          reduce using rule 87 (op_bin -> exp OR exp .)
    VARARGS         reduce using rule 87 (op_bin -> exp OR exp .)
    VAR             reduce using rule 87 (op_bin -> exp OR exp .)
    LPAREN          reduce using rule 87 (op_bin -> exp OR exp .)
    LBRACE          reduce using rule 87 (op_bin -> exp OR exp .)
    FUNCTION        reduce using rule 87 (op_bin -> exp OR exp .)
    LOCAL           reduce using rule 87 (op_bin -> exp OR exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92

  ! NIL             [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 47 ]
  ! TRUE            [ shift and go to state 48 ]
  ! NUMBER          [ shift and go to state 49 ]
  ! STRING          [ shift and go to state 50 ]
  ! VARARGS         [ shift and go to state 51 ]
  ! VAR             [ shift and go to state 30 ]
  ! LPAREN          [ shift and go to state 56 ]
  ! LBRACE          [ shift and go to state 43 ]
  ! FUNCTION        [ shift and go to state 32 ]
  ! LOCAL           [ shift and go to state 57 ]

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 176

    (100) struct_while -> WHILE exp DO block END .

    RETURN          reduce using rule 100 (struct_while -> WHILE exp DO block END .)
    $end            reduce using rule 100 (struct_while -> WHILE exp DO block END .)
    END             reduce using rule 100 (struct_while -> WHILE exp DO block END .)
    UNTIL           reduce using rule 100 (struct_while -> WHILE exp DO block END .)
    ELSEIF          reduce using rule 100 (struct_while -> WHILE exp DO block END .)
    ELSE            reduce using rule 100 (struct_while -> WHILE exp DO block END .)


state 177

    (92) if -> IF exp THEN block END .

    RETURN          reduce using rule 92 (if -> IF exp THEN block END .)
    $end            reduce using rule 92 (if -> IF exp THEN block END .)
    END             reduce using rule 92 (if -> IF exp THEN block END .)
    UNTIL           reduce using rule 92 (if -> IF exp THEN block END .)
    ELSEIF          reduce using rule 92 (if -> IF exp THEN block END .)
    ELSE            reduce using rule 92 (if -> IF exp THEN block END .)


state 178

    (94) if -> IF exp THEN block else_ifs .

    RETURN          reduce using rule 94 (if -> IF exp THEN block else_ifs .)
    $end            reduce using rule 94 (if -> IF exp THEN block else_ifs .)
    END             reduce using rule 94 (if -> IF exp THEN block else_ifs .)
    UNTIL           reduce using rule 94 (if -> IF exp THEN block else_ifs .)
    ELSEIF          reduce using rule 94 (if -> IF exp THEN block else_ifs .)
    ELSE            reduce using rule 94 (if -> IF exp THEN block else_ifs .)


state 179

    (95) else_ifs -> else_if . else_ifs
    (96) else_ifs -> else_if .
    (95) else_ifs -> . else_if else_ifs
    (96) else_ifs -> . else_if
    (97) else_if -> . ELSEIF exp THEN block
    (98) else_if -> . else
    (99) else -> . ELSE block END

  ! shift/reduce conflict for ELSEIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    RETURN          reduce using rule 96 (else_ifs -> else_if .)
    $end            reduce using rule 96 (else_ifs -> else_if .)
    END             reduce using rule 96 (else_ifs -> else_if .)
    UNTIL           reduce using rule 96 (else_ifs -> else_if .)
    ELSEIF          shift and go to state 180
    ELSE            shift and go to state 144

  ! ELSEIF          [ reduce using rule 96 (else_ifs -> else_if .) ]
  ! ELSE            [ reduce using rule 96 (else_ifs -> else_if .) ]

    else_if                        shift and go to state 179
    else_ifs                       shift and go to state 190
    else                           shift and go to state 181

state 180

    (97) else_if -> ELSEIF . exp THEN block
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 191
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 181

    (98) else_if -> else .

    ELSEIF          reduce using rule 98 (else_if -> else .)
    ELSE            reduce using rule 98 (else_if -> else .)
    RETURN          reduce using rule 98 (else_if -> else .)
    $end            reduce using rule 98 (else_if -> else .)
    END             reduce using rule 98 (else_if -> else .)
    UNTIL           reduce using rule 98 (else_if -> else .)


state 182

    (99) else -> ELSE block . END

    END             shift and go to state 192


state 183

    (101) struct_for -> FOR NAME ATRIB exp COMMA . exp DO block END
    (102) struct_for -> FOR NAME ATRIB exp COMMA . exp COMMA exp DO block END
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 193
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 184

    (103) struct_for_in -> FOR list_names IN list_exps DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 194
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 185

    (23) name_function -> NAME DOT NAME .

    LPAREN          reduce using rule 23 (name_function -> NAME DOT NAME .)


state 186

    (24) name_function -> NAME COLON NAME .

    LPAREN          reduce using rule 24 (name_function -> NAME COLON NAME .)


state 187

    (56) body_function -> LPAREN list_pars RPAREN block . END

    END             shift and go to state 195


state 188

    (57) list_pars -> list_names COMMA VARARGS .

    RPAREN          reduce using rule 57 (list_pars -> list_names COMMA VARARGS .)


state 189

    (67) field -> LCOLCH exp RCOLCH ATRIB . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 196
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 190

    (95) else_ifs -> else_if else_ifs .

    ELSEIF          reduce using rule 95 (else_ifs -> else_if else_ifs .)
    ELSE            reduce using rule 95 (else_ifs -> else_if else_ifs .)
    RETURN          reduce using rule 95 (else_ifs -> else_if else_ifs .)
    $end            reduce using rule 95 (else_ifs -> else_if else_ifs .)
    END             reduce using rule 95 (else_ifs -> else_if else_ifs .)
    UNTIL           reduce using rule 95 (else_ifs -> else_if else_ifs .)


state 191

    (97) else_if -> ELSEIF exp . THEN block
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    THEN            shift and go to state 197
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 192

    (99) else -> ELSE block END .

    RETURN          reduce using rule 99 (else -> ELSE block END .)
    $end            reduce using rule 99 (else -> ELSE block END .)
    END             reduce using rule 99 (else -> ELSE block END .)
    UNTIL           reduce using rule 99 (else -> ELSE block END .)
    ELSEIF          reduce using rule 99 (else -> ELSE block END .)
    ELSE            reduce using rule 99 (else -> ELSE block END .)


state 193

    (101) struct_for -> FOR NAME ATRIB exp COMMA exp . DO block END
    (102) struct_for -> FOR NAME ATRIB exp COMMA exp . COMMA exp DO block END
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    DO              shift and go to state 199
    COMMA           shift and go to state 198
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 194

    (103) struct_for_in -> FOR list_names IN list_exps DO block . END

    END             shift and go to state 200


state 195

    (56) body_function -> LPAREN list_pars RPAREN block END .

    RETURN          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    $end            reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    END             reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    DO              reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    MINUS           reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    NOT             reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    TAG             reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    NIL             reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    FALSE           reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    TRUE            reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    NUMBER          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    STRING          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    VARARGS         reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    VAR             reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    LPAREN          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    LBRACE          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    FUNCTION        reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    LOCAL           reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    UNTIL           reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    THEN            reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    RPAREN          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    COMMA           reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    SEMICOLON       reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    ELSEIF          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    ELSE            reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    PLUS            reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    TIMES           reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    DIVIDE          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    EXPO            reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    PERCENTUAL      reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    CONCAT          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    LT              reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    LTEQUALS        reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    GT              reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    GTEQUALS        reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    EQUALS          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    DIF             reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    AND             reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    OR              reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    RCOLCH          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)
    RBRACE          reduce using rule 56 (body_function -> LPAREN list_pars RPAREN block END .)


state 196

    (67) field -> LCOLCH exp RCOLCH ATRIB exp .
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    COMMA           reduce using rule 67 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    SEMICOLON       reduce using rule 67 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    RBRACE          reduce using rule 67 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 197

    (97) else_if -> ELSEIF exp THEN . block
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 201
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 198

    (102) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA . exp DO block END
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 202
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 199

    (101) struct_for -> FOR NAME ATRIB exp COMMA exp DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 203
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 200

    (103) struct_for_in -> FOR list_names IN list_exps DO block END .

    RETURN          reduce using rule 103 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    $end            reduce using rule 103 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    END             reduce using rule 103 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    UNTIL           reduce using rule 103 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    ELSEIF          reduce using rule 103 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    ELSE            reduce using rule 103 (struct_for_in -> FOR list_names IN list_exps DO block END .)


state 201

    (97) else_if -> ELSEIF exp THEN block .

    ELSEIF          reduce using rule 97 (else_if -> ELSEIF exp THEN block .)
    ELSE            reduce using rule 97 (else_if -> ELSEIF exp THEN block .)
    RETURN          reduce using rule 97 (else_if -> ELSEIF exp THEN block .)
    $end            reduce using rule 97 (else_if -> ELSEIF exp THEN block .)
    END             reduce using rule 97 (else_if -> ELSEIF exp THEN block .)
    UNTIL           reduce using rule 97 (else_if -> ELSEIF exp THEN block .)


state 202

    (102) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp . DO block END
    (45) exp -> exp . op_bin exp
    (46) exp -> exp . op_unary exp
    (73) op_bin -> . exp PLUS exp
    (74) op_bin -> . exp MINUS exp
    (75) op_bin -> . exp TIMES exp
    (76) op_bin -> . exp DIVIDE exp
    (77) op_bin -> . exp EXPO
    (78) op_bin -> . exp PERCENTUAL exp
    (79) op_bin -> . exp CONCAT exp
    (80) op_bin -> . exp LT exp
    (81) op_bin -> . exp LTEQUALS exp
    (82) op_bin -> . exp GT exp
    (83) op_bin -> . exp GTEQUALS exp
    (84) op_bin -> . exp EQUALS exp
    (85) op_bin -> . exp DIF exp
    (86) op_bin -> . exp AND exp
    (87) op_bin -> . exp OR exp
    (88) op_unary -> . MINUS
    (89) op_unary -> . NOT
    (90) op_unary -> . TAG
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . exp_prefix
    (44) exp -> . construct_table
    (45) exp -> . exp op_bin exp
    (46) exp -> . exp op_unary exp
    (54) def_function -> . function
    (55) def_function -> . local_function
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (59) construct_table -> . LBRACE list_fields RBRACE
    (60) construct_table -> . LBRACE RBRACE
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args

    DO              shift and go to state 204
    MINUS           shift and go to state 90
    NOT             shift and go to state 91
    TAG             shift and go to state 92
    NIL             shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    NUMBER          shift and go to state 49
    STRING          shift and go to state 50
    VARARGS         shift and go to state 51
    VAR             shift and go to state 30
    LPAREN          shift and go to state 56
    LBRACE          shift and go to state 43
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 86
    op_bin                         shift and go to state 88
    op_unary                       shift and go to state 89
    def_function                   shift and go to state 52
    exp_prefix                     shift and go to state 53
    construct_table                shift and go to state 54
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 55

state 203

    (101) struct_for -> FOR NAME ATRIB exp COMMA exp DO block . END

    END             shift and go to state 205


state 204

    (102) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . def_function
    (17) command -> . local_var
    (25) list_vars -> . var COMMA var
    (50) call_function -> . exp_prefix args
    (51) call_function -> . exp_prefix COLON NAME args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (100) struct_while -> . WHILE exp DO block END
    (104) struct_repeat -> . REPEAT block UNTIL exp
    (92) if -> . IF exp THEN block END
    (93) if -> . IF exp THEN else
    (94) if -> . IF exp THEN block else_ifs
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (102) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (103) struct_for_in -> . FOR list_names IN list_exps DO block END
    (54) def_function -> . function
    (55) def_function -> . local_function
    (71) local_var -> . LOCAL list_names ATRIB list_exps
    (72) local_var -> . LOCAL NAME ATRIB exp
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) var -> . prefix_exp DOT NAME
    (47) exp_prefix -> . VAR
    (48) exp_prefix -> . call_function
    (49) exp_prefix -> . LPAREN exp RPAREN
    (91) function -> . FUNCTION body_function
    (105) local_function -> . LOCAL FUNCTION name_function body_function
    (29) prefix_exp -> . var
    (30) prefix_exp -> . call_function
    (31) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 206
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    def_function                   shift and go to state 17
    local_var                      shift and go to state 18
    var                            shift and go to state 19
    exp_prefix                     shift and go to state 20
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 29

state 205

    (101) struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .

    RETURN          reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    $end            reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    END             reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    UNTIL           reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    ELSEIF          reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    ELSE            reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)


state 206

    (102) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block . END

    END             shift and go to state 207


state 207

    (102) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .

    RETURN          reduce using rule 102 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    $end            reduce using rule 102 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    END             reduce using rule 102 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    UNTIL           reduce using rule 102 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    ELSEIF          reduce using rule 102 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    ELSE            reduce using rule 102 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 53 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 53 resolved as shift
WARNING: shift/reduce conflict for ATRIB in state 63 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for NOT in state 138 resolved as shift
WARNING: shift/reduce conflict for TAG in state 138 resolved as shift
WARNING: shift/reduce conflict for NIL in state 138 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 138 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 138 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 138 resolved as shift
WARNING: shift/reduce conflict for STRING in state 138 resolved as shift
WARNING: shift/reduce conflict for VARARGS in state 138 resolved as shift
WARNING: shift/reduce conflict for VAR in state 138 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 138 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 138 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 138 resolved as shift
WARNING: shift/reduce conflict for LOCAL in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for NOT in state 139 resolved as shift
WARNING: shift/reduce conflict for TAG in state 139 resolved as shift
WARNING: shift/reduce conflict for NIL in state 139 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 139 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 139 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 139 resolved as shift
WARNING: shift/reduce conflict for STRING in state 139 resolved as shift
WARNING: shift/reduce conflict for VARARGS in state 139 resolved as shift
WARNING: shift/reduce conflict for VAR in state 139 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 139 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 139 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 139 resolved as shift
WARNING: shift/reduce conflict for LOCAL in state 139 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 179 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 179 resolved as shift
