Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> command
Rule 3     block -> command command_ret
Rule 4     command -> COMMA
Rule 5     command -> list_vars ATRIB list_exps
Rule 6     command -> call_function
Rule 7     command -> rotulo
Rule 8     command -> BREAK
Rule 9     command -> GOTO NAME
Rule 10    command -> DO block END
Rule 11    command -> struct_while
Rule 12    command -> struct_repeat
Rule 13    command -> if
Rule 14    command -> struct_for
Rule 15    command -> struct_for_in
Rule 16    command -> function
Rule 17    command -> local_function
Rule 18    command -> local_var
Rule 19    command_ret -> RETURN
Rule 20    command_ret -> RETURN list_exps
Rule 21    command_ret -> RETURN list_exps COMMA
Rule 22    rotulo -> DUALCOLON NAME DUALCOLON
Rule 23    name_function -> NAME
Rule 24    name_function -> NAME DOT NAME
Rule 25    name_function -> NAME COLON NAME
Rule 26    list_vars -> var
Rule 27    list_vars -> var SEMICOLON list_vars
Rule 28    var -> NAME
Rule 29    var -> prefix_exp LCOLCH exp RCOLCH
Rule 30    var -> prefix_exp DOT NAME
Rule 31    prefix_exp -> var
Rule 32    prefix_exp -> call_function
Rule 33    prefix_exp -> LPAREN exp RPAREN
Rule 34    list_names -> NAME
Rule 35    list_names -> NAME COMMA list_names
Rule 36    list_exps -> exp
Rule 37    list_exps -> exp COMMA list_exps
Rule 38    exp -> NIL
Rule 39    exp -> FALSE
Rule 40    exp -> TRUE
Rule 41    exp -> NUMBER
Rule 42    exp -> STRING
Rule 43    exp -> VARARGS
Rule 44    exp -> def_function
Rule 45    exp -> exp_prefix
Rule 46    exp -> construct_table
Rule 47    exp -> exp op_bin exp
Rule 48    exp -> op_unary exp
Rule 49    exp_prefix -> VAR
Rule 50    exp_prefix -> call_function
Rule 51    exp_prefix -> LPAREN exp RPAREN
Rule 52    call_function -> exp_prefix args
Rule 53    call_function -> exp_prefix COLON NAME args
Rule 54    args -> LPAREN list_exps RPAREN
Rule 55    args -> construct_table
Rule 56    def_function -> FUNCTION body_function
Rule 57    body_function -> LPAREN list_pars RPAREN block END
Rule 58    list_pars -> list_names COMMA VARARGS
Rule 59    list_pars -> VARARGS
Rule 60    list_pars -> list_names
Rule 61    construct_table -> LBRACE list_fields RBRACE
Rule 62    list_fields -> field separator_fields field
Rule 63    list_fields -> separator_fields
Rule 64    field -> LCOLCH exp RCOLCH ATRIB exp
Rule 65    field -> NAME ATRIB exp
Rule 66    field -> exp
Rule 67    separator_fields -> COMMA
Rule 68    separator_fields -> SEMICOLON
Rule 69    local_var -> LOCAL list_names ATRIB list_exps
Rule 70    op_bin -> PLUS
Rule 71    op_bin -> MINUS
Rule 72    op_bin -> TIMES
Rule 73    op_bin -> DIVIDE
Rule 74    op_bin -> EXPO
Rule 75    op_bin -> PERCENTUAL
Rule 76    op_bin -> CONCAT
Rule 77    op_bin -> LT
Rule 78    op_bin -> LTEQUALS
Rule 79    op_bin -> GT
Rule 80    op_bin -> GTEQUALS
Rule 81    op_bin -> EQUALS
Rule 82    op_bin -> DIF
Rule 83    op_bin -> AND
Rule 84    op_bin -> OR
Rule 85    op_unary -> MINUS
Rule 86    op_unary -> NOT
Rule 87    op_unary -> TAG
Rule 88    function -> FUNCTION name_function body_function
Rule 89    if -> IF exp THEN block else_ifs else END
Rule 90    else_ifs -> else_ifs else_if
Rule 91    else_ifs -> else_if
Rule 92    else_if -> ELSEIF exp THEN block
Rule 93    else -> ELSE block
Rule 94    struct_while -> WHILE exp DO block END
Rule 95    struct_for -> FOR NAME ATRIB exp COMMA exp DO block END
Rule 96    struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
Rule 97    struct_for_in -> FOR list_names IN list_exps DO block END
Rule 98    struct_repeat -> REPEAT block UNTIL exp
Rule 99    local_function -> FUNCTION name_function body_function

Terminals, with rules where they appear

AND                  : 83
ATRIB                : 5 64 65 69 95 96
BREAK                : 8
COLON                : 25 53
COMMA                : 4 21 35 37 58 67 95 96 96
CONCAT               : 76
DIF                  : 82
DIVIDE               : 73
DO                   : 10 94 95 96 97
DOT                  : 24 30
DUALCOLON            : 22 22
ELSE                 : 93
ELSEIF               : 92
END                  : 10 57 89 94 95 96 97
EQUALS               : 81
EXPO                 : 74
FALSE                : 39
FOR                  : 95 96 97
FUNCTION             : 56 88 99
GOTO                 : 9
GT                   : 79
GTEQUALS             : 80
IF                   : 89
IN                   : 97
LBRACE               : 61
LCOLCH               : 29 64
LOCAL                : 69
LPAREN               : 33 51 54 57
LT                   : 77
LTEQUALS             : 78
MINUS                : 71 85
NAME                 : 9 22 23 24 24 25 25 28 30 34 35 53 65 95 96
NIL                  : 38
NOT                  : 86
NUMBER               : 41
OR                   : 84
PERCENTUAL           : 75
PLUS                 : 70
RBRACE               : 61
RCOLCH               : 29 64
REPEAT               : 98
RETURN               : 19 20 21
RPAREN               : 33 51 54 57
SEMICOLON            : 27 68
STRING               : 42
TAG                  : 87
THEN                 : 89 92
TIMES                : 72
TRUE                 : 40
UNTIL                : 98
VAR                  : 49
VARARGS              : 43 58 59
WHILE                : 94
error                : 

Nonterminals, with rules where they appear

args                 : 52 53
block                : 1 10 57 89 92 93 94 95 96 97 98
body_function        : 56 88 99
call_function        : 6 32 50
command              : 2 3
command_ret          : 3
construct_table      : 46 55
def_function         : 44
else                 : 89
else_if              : 90 91
else_ifs             : 89 90
exp                  : 29 33 36 37 47 47 48 51 64 64 65 66 89 92 94 95 95 96 96 96 98
exp_prefix           : 45 52 53
field                : 62 62
function             : 16
if                   : 13
list_exps            : 5 20 21 37 54 69 97
list_fields          : 61
list_names           : 35 58 60 69 97
list_pars            : 57
list_vars            : 5 27
local_function       : 17
local_var            : 18
name_function        : 88 99
op_bin               : 47
op_unary             : 48
prefix_exp           : 29 30
program              : 0
rotulo               : 7
separator_fields     : 62 63
struct_for           : 14
struct_for_in        : 15
struct_repeat        : 12
struct_while         : 11
var                  : 26 27 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    program                        shift and go to state 1
    block                          shift and go to state 2
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> command .
    (3) block -> command . command_ret
    (19) command_ret -> . RETURN
    (20) command_ret -> . RETURN list_exps
    (21) command_ret -> . RETURN list_exps COMMA

    $end            reduce using rule 2 (block -> command .)
    END             reduce using rule 2 (block -> command .)
    UNTIL           reduce using rule 2 (block -> command .)
    ELSEIF          reduce using rule 2 (block -> command .)
    ELSE            reduce using rule 2 (block -> command .)
    RETURN          shift and go to state 33

    command_ret                    shift and go to state 32

state 4

    (4) command -> COMMA .

    RETURN          reduce using rule 4 (command -> COMMA .)
    $end            reduce using rule 4 (command -> COMMA .)
    END             reduce using rule 4 (command -> COMMA .)
    UNTIL           reduce using rule 4 (command -> COMMA .)
    ELSEIF          reduce using rule 4 (command -> COMMA .)
    ELSE            reduce using rule 4 (command -> COMMA .)


state 5

    (5) command -> list_vars . ATRIB list_exps

    ATRIB           shift and go to state 34


state 6

    (6) command -> call_function .
    (50) exp_prefix -> call_function .
    (32) prefix_exp -> call_function .

    RETURN          reduce using rule 6 (command -> call_function .)
    $end            reduce using rule 6 (command -> call_function .)
    END             reduce using rule 6 (command -> call_function .)
    UNTIL           reduce using rule 6 (command -> call_function .)
    ELSEIF          reduce using rule 6 (command -> call_function .)
    ELSE            reduce using rule 6 (command -> call_function .)
    COLON           reduce using rule 50 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 50 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 50 (exp_prefix -> call_function .)
    LCOLCH          reduce using rule 32 (prefix_exp -> call_function .)
    DOT             reduce using rule 32 (prefix_exp -> call_function .)


state 7

    (7) command -> rotulo .

    RETURN          reduce using rule 7 (command -> rotulo .)
    $end            reduce using rule 7 (command -> rotulo .)
    END             reduce using rule 7 (command -> rotulo .)
    UNTIL           reduce using rule 7 (command -> rotulo .)
    ELSEIF          reduce using rule 7 (command -> rotulo .)
    ELSE            reduce using rule 7 (command -> rotulo .)


state 8

    (8) command -> BREAK .

    RETURN          reduce using rule 8 (command -> BREAK .)
    $end            reduce using rule 8 (command -> BREAK .)
    END             reduce using rule 8 (command -> BREAK .)
    UNTIL           reduce using rule 8 (command -> BREAK .)
    ELSEIF          reduce using rule 8 (command -> BREAK .)
    ELSE            reduce using rule 8 (command -> BREAK .)


state 9

    (9) command -> GOTO . NAME

    NAME            shift and go to state 35


state 10

    (28) var -> NAME .

    SEMICOLON       reduce using rule 28 (var -> NAME .)
    ATRIB           reduce using rule 28 (var -> NAME .)
    LCOLCH          reduce using rule 28 (var -> NAME .)
    DOT             reduce using rule 28 (var -> NAME .)


state 11

    (10) command -> DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    block                          shift and go to state 36
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 12

    (11) command -> struct_while .

    RETURN          reduce using rule 11 (command -> struct_while .)
    $end            reduce using rule 11 (command -> struct_while .)
    END             reduce using rule 11 (command -> struct_while .)
    UNTIL           reduce using rule 11 (command -> struct_while .)
    ELSEIF          reduce using rule 11 (command -> struct_while .)
    ELSE            reduce using rule 11 (command -> struct_while .)


state 13

    (12) command -> struct_repeat .

    RETURN          reduce using rule 12 (command -> struct_repeat .)
    $end            reduce using rule 12 (command -> struct_repeat .)
    END             reduce using rule 12 (command -> struct_repeat .)
    UNTIL           reduce using rule 12 (command -> struct_repeat .)
    ELSEIF          reduce using rule 12 (command -> struct_repeat .)
    ELSE            reduce using rule 12 (command -> struct_repeat .)


state 14

    (13) command -> if .

    RETURN          reduce using rule 13 (command -> if .)
    $end            reduce using rule 13 (command -> if .)
    END             reduce using rule 13 (command -> if .)
    UNTIL           reduce using rule 13 (command -> if .)
    ELSEIF          reduce using rule 13 (command -> if .)
    ELSE            reduce using rule 13 (command -> if .)


state 15

    (14) command -> struct_for .

    RETURN          reduce using rule 14 (command -> struct_for .)
    $end            reduce using rule 14 (command -> struct_for .)
    END             reduce using rule 14 (command -> struct_for .)
    UNTIL           reduce using rule 14 (command -> struct_for .)
    ELSEIF          reduce using rule 14 (command -> struct_for .)
    ELSE            reduce using rule 14 (command -> struct_for .)


state 16

    (15) command -> struct_for_in .

    RETURN          reduce using rule 15 (command -> struct_for_in .)
    $end            reduce using rule 15 (command -> struct_for_in .)
    END             reduce using rule 15 (command -> struct_for_in .)
    UNTIL           reduce using rule 15 (command -> struct_for_in .)
    ELSEIF          reduce using rule 15 (command -> struct_for_in .)
    ELSE            reduce using rule 15 (command -> struct_for_in .)


state 17

    (16) command -> function .

    RETURN          reduce using rule 16 (command -> function .)
    $end            reduce using rule 16 (command -> function .)
    END             reduce using rule 16 (command -> function .)
    UNTIL           reduce using rule 16 (command -> function .)
    ELSEIF          reduce using rule 16 (command -> function .)
    ELSE            reduce using rule 16 (command -> function .)


state 18

    (17) command -> local_function .

    RETURN          reduce using rule 17 (command -> local_function .)
    $end            reduce using rule 17 (command -> local_function .)
    END             reduce using rule 17 (command -> local_function .)
    UNTIL           reduce using rule 17 (command -> local_function .)
    ELSEIF          reduce using rule 17 (command -> local_function .)
    ELSE            reduce using rule 17 (command -> local_function .)


state 19

    (18) command -> local_var .

    RETURN          reduce using rule 18 (command -> local_var .)
    $end            reduce using rule 18 (command -> local_var .)
    END             reduce using rule 18 (command -> local_var .)
    UNTIL           reduce using rule 18 (command -> local_var .)
    ELSEIF          reduce using rule 18 (command -> local_var .)
    ELSE            reduce using rule 18 (command -> local_var .)


state 20

    (26) list_vars -> var .
    (27) list_vars -> var . SEMICOLON list_vars
    (31) prefix_exp -> var .

    ATRIB           reduce using rule 26 (list_vars -> var .)
    SEMICOLON       shift and go to state 37
    LCOLCH          reduce using rule 31 (prefix_exp -> var .)
    DOT             reduce using rule 31 (prefix_exp -> var .)


state 21

    (52) call_function -> exp_prefix . args
    (53) call_function -> exp_prefix . COLON NAME args
    (54) args -> . LPAREN list_exps RPAREN
    (55) args -> . construct_table
    (61) construct_table -> . LBRACE list_fields RBRACE

    COLON           shift and go to state 39
    LPAREN          shift and go to state 40
    LBRACE          shift and go to state 42

    args                           shift and go to state 38
    construct_table                shift and go to state 41

state 22

    (22) rotulo -> DUALCOLON . NAME DUALCOLON

    NAME            shift and go to state 43


state 23

    (94) struct_while -> WHILE . exp DO block END
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 44
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 24

    (98) struct_repeat -> REPEAT . block UNTIL exp
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    block                          shift and go to state 61
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 25

    (89) if -> IF . exp THEN block else_ifs else END
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 62
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 26

    (95) struct_for -> FOR . NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> FOR . NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> FOR . list_names IN list_exps DO block END
    (34) list_names -> . NAME
    (35) list_names -> . NAME COMMA list_names

    NAME            shift and go to state 63

    list_names                     shift and go to state 64

state 27

    (88) function -> FUNCTION . name_function body_function
    (99) local_function -> FUNCTION . name_function body_function
    (23) name_function -> . NAME
    (24) name_function -> . NAME DOT NAME
    (25) name_function -> . NAME COLON NAME

    NAME            shift and go to state 66

    name_function                  shift and go to state 65

state 28

    (69) local_var -> LOCAL . list_names ATRIB list_exps
    (34) list_names -> . NAME
    (35) list_names -> . NAME COMMA list_names

    NAME            shift and go to state 68

    list_names                     shift and go to state 67

state 29

    (29) var -> prefix_exp . LCOLCH exp RCOLCH
    (30) var -> prefix_exp . DOT NAME

    LCOLCH          shift and go to state 69
    DOT             shift and go to state 70


state 30

    (49) exp_prefix -> VAR .

    COLON           reduce using rule 49 (exp_prefix -> VAR .)
    LPAREN          reduce using rule 49 (exp_prefix -> VAR .)
    LBRACE          reduce using rule 49 (exp_prefix -> VAR .)
    DO              reduce using rule 49 (exp_prefix -> VAR .)
    PLUS            reduce using rule 49 (exp_prefix -> VAR .)
    MINUS           reduce using rule 49 (exp_prefix -> VAR .)
    TIMES           reduce using rule 49 (exp_prefix -> VAR .)
    DIVIDE          reduce using rule 49 (exp_prefix -> VAR .)
    EXPO            reduce using rule 49 (exp_prefix -> VAR .)
    PERCENTUAL      reduce using rule 49 (exp_prefix -> VAR .)
    CONCAT          reduce using rule 49 (exp_prefix -> VAR .)
    LT              reduce using rule 49 (exp_prefix -> VAR .)
    LTEQUALS        reduce using rule 49 (exp_prefix -> VAR .)
    GT              reduce using rule 49 (exp_prefix -> VAR .)
    GTEQUALS        reduce using rule 49 (exp_prefix -> VAR .)
    EQUALS          reduce using rule 49 (exp_prefix -> VAR .)
    DIF             reduce using rule 49 (exp_prefix -> VAR .)
    AND             reduce using rule 49 (exp_prefix -> VAR .)
    OR              reduce using rule 49 (exp_prefix -> VAR .)
    THEN            reduce using rule 49 (exp_prefix -> VAR .)
    RPAREN          reduce using rule 49 (exp_prefix -> VAR .)
    COMMA           reduce using rule 49 (exp_prefix -> VAR .)
    $end            reduce using rule 49 (exp_prefix -> VAR .)
    END             reduce using rule 49 (exp_prefix -> VAR .)
    UNTIL           reduce using rule 49 (exp_prefix -> VAR .)
    ELSEIF          reduce using rule 49 (exp_prefix -> VAR .)
    ELSE            reduce using rule 49 (exp_prefix -> VAR .)
    RETURN          reduce using rule 49 (exp_prefix -> VAR .)
    SEMICOLON       reduce using rule 49 (exp_prefix -> VAR .)
    RCOLCH          reduce using rule 49 (exp_prefix -> VAR .)
    RBRACE          reduce using rule 49 (exp_prefix -> VAR .)


state 31

    (51) exp_prefix -> LPAREN . exp RPAREN
    (33) prefix_exp -> LPAREN . exp RPAREN
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 71
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 32

    (3) block -> command command_ret .

    $end            reduce using rule 3 (block -> command command_ret .)
    END             reduce using rule 3 (block -> command command_ret .)
    UNTIL           reduce using rule 3 (block -> command command_ret .)
    ELSEIF          reduce using rule 3 (block -> command command_ret .)
    ELSE            reduce using rule 3 (block -> command command_ret .)


state 33

    (19) command_ret -> RETURN .
    (20) command_ret -> RETURN . list_exps
    (21) command_ret -> RETURN . list_exps COMMA
    (36) list_exps -> . exp
    (37) list_exps -> . exp COMMA list_exps
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    $end            reduce using rule 19 (command_ret -> RETURN .)
    END             reduce using rule 19 (command_ret -> RETURN .)
    UNTIL           reduce using rule 19 (command_ret -> RETURN .)
    ELSEIF          reduce using rule 19 (command_ret -> RETURN .)
    ELSE            reduce using rule 19 (command_ret -> RETURN .)
    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    list_exps                      shift and go to state 72
    exp                            shift and go to state 73
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 34

    (5) command -> list_vars ATRIB . list_exps
    (36) list_exps -> . exp
    (37) list_exps -> . exp COMMA list_exps
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    list_exps                      shift and go to state 74
    exp                            shift and go to state 73
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 35

    (9) command -> GOTO NAME .

    RETURN          reduce using rule 9 (command -> GOTO NAME .)
    $end            reduce using rule 9 (command -> GOTO NAME .)
    END             reduce using rule 9 (command -> GOTO NAME .)
    UNTIL           reduce using rule 9 (command -> GOTO NAME .)
    ELSEIF          reduce using rule 9 (command -> GOTO NAME .)
    ELSE            reduce using rule 9 (command -> GOTO NAME .)


state 36

    (10) command -> DO block . END

    END             shift and go to state 75


state 37

    (27) list_vars -> var SEMICOLON . list_vars
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN

    NAME            shift and go to state 10
    LPAREN          shift and go to state 78
    VAR             shift and go to state 30

    var                            shift and go to state 20
    list_vars                      shift and go to state 76
    prefix_exp                     shift and go to state 29
    call_function                  shift and go to state 77
    exp_prefix                     shift and go to state 21

state 38

    (52) call_function -> exp_prefix args .

    RETURN          reduce using rule 52 (call_function -> exp_prefix args .)
    $end            reduce using rule 52 (call_function -> exp_prefix args .)
    COLON           reduce using rule 52 (call_function -> exp_prefix args .)
    LPAREN          reduce using rule 52 (call_function -> exp_prefix args .)
    LBRACE          reduce using rule 52 (call_function -> exp_prefix args .)
    LCOLCH          reduce using rule 52 (call_function -> exp_prefix args .)
    DOT             reduce using rule 52 (call_function -> exp_prefix args .)
    END             reduce using rule 52 (call_function -> exp_prefix args .)
    DO              reduce using rule 52 (call_function -> exp_prefix args .)
    PLUS            reduce using rule 52 (call_function -> exp_prefix args .)
    MINUS           reduce using rule 52 (call_function -> exp_prefix args .)
    TIMES           reduce using rule 52 (call_function -> exp_prefix args .)
    DIVIDE          reduce using rule 52 (call_function -> exp_prefix args .)
    EXPO            reduce using rule 52 (call_function -> exp_prefix args .)
    PERCENTUAL      reduce using rule 52 (call_function -> exp_prefix args .)
    CONCAT          reduce using rule 52 (call_function -> exp_prefix args .)
    LT              reduce using rule 52 (call_function -> exp_prefix args .)
    LTEQUALS        reduce using rule 52 (call_function -> exp_prefix args .)
    GT              reduce using rule 52 (call_function -> exp_prefix args .)
    GTEQUALS        reduce using rule 52 (call_function -> exp_prefix args .)
    EQUALS          reduce using rule 52 (call_function -> exp_prefix args .)
    DIF             reduce using rule 52 (call_function -> exp_prefix args .)
    AND             reduce using rule 52 (call_function -> exp_prefix args .)
    OR              reduce using rule 52 (call_function -> exp_prefix args .)
    UNTIL           reduce using rule 52 (call_function -> exp_prefix args .)
    THEN            reduce using rule 52 (call_function -> exp_prefix args .)
    RPAREN          reduce using rule 52 (call_function -> exp_prefix args .)
    COMMA           reduce using rule 52 (call_function -> exp_prefix args .)
    ELSEIF          reduce using rule 52 (call_function -> exp_prefix args .)
    ELSE            reduce using rule 52 (call_function -> exp_prefix args .)
    SEMICOLON       reduce using rule 52 (call_function -> exp_prefix args .)
    RCOLCH          reduce using rule 52 (call_function -> exp_prefix args .)
    RBRACE          reduce using rule 52 (call_function -> exp_prefix args .)


state 39

    (53) call_function -> exp_prefix COLON . NAME args

    NAME            shift and go to state 79


state 40

    (54) args -> LPAREN . list_exps RPAREN
    (36) list_exps -> . exp
    (37) list_exps -> . exp COMMA list_exps
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    list_exps                      shift and go to state 80
    exp                            shift and go to state 73
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 41

    (55) args -> construct_table .

    RETURN          reduce using rule 55 (args -> construct_table .)
    $end            reduce using rule 55 (args -> construct_table .)
    COLON           reduce using rule 55 (args -> construct_table .)
    LPAREN          reduce using rule 55 (args -> construct_table .)
    LBRACE          reduce using rule 55 (args -> construct_table .)
    LCOLCH          reduce using rule 55 (args -> construct_table .)
    DOT             reduce using rule 55 (args -> construct_table .)
    END             reduce using rule 55 (args -> construct_table .)
    UNTIL           reduce using rule 55 (args -> construct_table .)
    ELSEIF          reduce using rule 55 (args -> construct_table .)
    ELSE            reduce using rule 55 (args -> construct_table .)
    DO              reduce using rule 55 (args -> construct_table .)
    PLUS            reduce using rule 55 (args -> construct_table .)
    MINUS           reduce using rule 55 (args -> construct_table .)
    TIMES           reduce using rule 55 (args -> construct_table .)
    DIVIDE          reduce using rule 55 (args -> construct_table .)
    EXPO            reduce using rule 55 (args -> construct_table .)
    PERCENTUAL      reduce using rule 55 (args -> construct_table .)
    CONCAT          reduce using rule 55 (args -> construct_table .)
    LT              reduce using rule 55 (args -> construct_table .)
    LTEQUALS        reduce using rule 55 (args -> construct_table .)
    GT              reduce using rule 55 (args -> construct_table .)
    GTEQUALS        reduce using rule 55 (args -> construct_table .)
    EQUALS          reduce using rule 55 (args -> construct_table .)
    DIF             reduce using rule 55 (args -> construct_table .)
    AND             reduce using rule 55 (args -> construct_table .)
    OR              reduce using rule 55 (args -> construct_table .)
    THEN            reduce using rule 55 (args -> construct_table .)
    RPAREN          reduce using rule 55 (args -> construct_table .)
    COMMA           reduce using rule 55 (args -> construct_table .)
    SEMICOLON       reduce using rule 55 (args -> construct_table .)
    RCOLCH          reduce using rule 55 (args -> construct_table .)
    RBRACE          reduce using rule 55 (args -> construct_table .)


state 42

    (61) construct_table -> LBRACE . list_fields RBRACE
    (62) list_fields -> . field separator_fields field
    (63) list_fields -> . separator_fields
    (64) field -> . LCOLCH exp RCOLCH ATRIB exp
    (65) field -> . NAME ATRIB exp
    (66) field -> . exp
    (67) separator_fields -> . COMMA
    (68) separator_fields -> . SEMICOLON
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    LCOLCH          shift and go to state 84
    NAME            shift and go to state 86
    COMMA           shift and go to state 87
    SEMICOLON       shift and go to state 88
    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    list_fields                    shift and go to state 81
    field                          shift and go to state 82
    separator_fields               shift and go to state 83
    exp                            shift and go to state 85
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 43

    (22) rotulo -> DUALCOLON NAME . DUALCOLON

    DUALCOLON       shift and go to state 89


state 44

    (94) struct_while -> WHILE exp . DO block END
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    DO              shift and go to state 90
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 45

    (38) exp -> NIL .

    DO              reduce using rule 38 (exp -> NIL .)
    PLUS            reduce using rule 38 (exp -> NIL .)
    MINUS           reduce using rule 38 (exp -> NIL .)
    TIMES           reduce using rule 38 (exp -> NIL .)
    DIVIDE          reduce using rule 38 (exp -> NIL .)
    EXPO            reduce using rule 38 (exp -> NIL .)
    PERCENTUAL      reduce using rule 38 (exp -> NIL .)
    CONCAT          reduce using rule 38 (exp -> NIL .)
    LT              reduce using rule 38 (exp -> NIL .)
    LTEQUALS        reduce using rule 38 (exp -> NIL .)
    GT              reduce using rule 38 (exp -> NIL .)
    GTEQUALS        reduce using rule 38 (exp -> NIL .)
    EQUALS          reduce using rule 38 (exp -> NIL .)
    DIF             reduce using rule 38 (exp -> NIL .)
    AND             reduce using rule 38 (exp -> NIL .)
    OR              reduce using rule 38 (exp -> NIL .)
    THEN            reduce using rule 38 (exp -> NIL .)
    RPAREN          reduce using rule 38 (exp -> NIL .)
    COMMA           reduce using rule 38 (exp -> NIL .)
    $end            reduce using rule 38 (exp -> NIL .)
    END             reduce using rule 38 (exp -> NIL .)
    UNTIL           reduce using rule 38 (exp -> NIL .)
    ELSEIF          reduce using rule 38 (exp -> NIL .)
    ELSE            reduce using rule 38 (exp -> NIL .)
    RETURN          reduce using rule 38 (exp -> NIL .)
    SEMICOLON       reduce using rule 38 (exp -> NIL .)
    RCOLCH          reduce using rule 38 (exp -> NIL .)
    RBRACE          reduce using rule 38 (exp -> NIL .)


state 46

    (39) exp -> FALSE .

    DO              reduce using rule 39 (exp -> FALSE .)
    PLUS            reduce using rule 39 (exp -> FALSE .)
    MINUS           reduce using rule 39 (exp -> FALSE .)
    TIMES           reduce using rule 39 (exp -> FALSE .)
    DIVIDE          reduce using rule 39 (exp -> FALSE .)
    EXPO            reduce using rule 39 (exp -> FALSE .)
    PERCENTUAL      reduce using rule 39 (exp -> FALSE .)
    CONCAT          reduce using rule 39 (exp -> FALSE .)
    LT              reduce using rule 39 (exp -> FALSE .)
    LTEQUALS        reduce using rule 39 (exp -> FALSE .)
    GT              reduce using rule 39 (exp -> FALSE .)
    GTEQUALS        reduce using rule 39 (exp -> FALSE .)
    EQUALS          reduce using rule 39 (exp -> FALSE .)
    DIF             reduce using rule 39 (exp -> FALSE .)
    AND             reduce using rule 39 (exp -> FALSE .)
    OR              reduce using rule 39 (exp -> FALSE .)
    THEN            reduce using rule 39 (exp -> FALSE .)
    RPAREN          reduce using rule 39 (exp -> FALSE .)
    COMMA           reduce using rule 39 (exp -> FALSE .)
    $end            reduce using rule 39 (exp -> FALSE .)
    END             reduce using rule 39 (exp -> FALSE .)
    UNTIL           reduce using rule 39 (exp -> FALSE .)
    ELSEIF          reduce using rule 39 (exp -> FALSE .)
    ELSE            reduce using rule 39 (exp -> FALSE .)
    RETURN          reduce using rule 39 (exp -> FALSE .)
    SEMICOLON       reduce using rule 39 (exp -> FALSE .)
    RCOLCH          reduce using rule 39 (exp -> FALSE .)
    RBRACE          reduce using rule 39 (exp -> FALSE .)


state 47

    (40) exp -> TRUE .

    DO              reduce using rule 40 (exp -> TRUE .)
    PLUS            reduce using rule 40 (exp -> TRUE .)
    MINUS           reduce using rule 40 (exp -> TRUE .)
    TIMES           reduce using rule 40 (exp -> TRUE .)
    DIVIDE          reduce using rule 40 (exp -> TRUE .)
    EXPO            reduce using rule 40 (exp -> TRUE .)
    PERCENTUAL      reduce using rule 40 (exp -> TRUE .)
    CONCAT          reduce using rule 40 (exp -> TRUE .)
    LT              reduce using rule 40 (exp -> TRUE .)
    LTEQUALS        reduce using rule 40 (exp -> TRUE .)
    GT              reduce using rule 40 (exp -> TRUE .)
    GTEQUALS        reduce using rule 40 (exp -> TRUE .)
    EQUALS          reduce using rule 40 (exp -> TRUE .)
    DIF             reduce using rule 40 (exp -> TRUE .)
    AND             reduce using rule 40 (exp -> TRUE .)
    OR              reduce using rule 40 (exp -> TRUE .)
    THEN            reduce using rule 40 (exp -> TRUE .)
    RPAREN          reduce using rule 40 (exp -> TRUE .)
    COMMA           reduce using rule 40 (exp -> TRUE .)
    $end            reduce using rule 40 (exp -> TRUE .)
    END             reduce using rule 40 (exp -> TRUE .)
    UNTIL           reduce using rule 40 (exp -> TRUE .)
    ELSEIF          reduce using rule 40 (exp -> TRUE .)
    ELSE            reduce using rule 40 (exp -> TRUE .)
    RETURN          reduce using rule 40 (exp -> TRUE .)
    SEMICOLON       reduce using rule 40 (exp -> TRUE .)
    RCOLCH          reduce using rule 40 (exp -> TRUE .)
    RBRACE          reduce using rule 40 (exp -> TRUE .)


state 48

    (41) exp -> NUMBER .

    DO              reduce using rule 41 (exp -> NUMBER .)
    PLUS            reduce using rule 41 (exp -> NUMBER .)
    MINUS           reduce using rule 41 (exp -> NUMBER .)
    TIMES           reduce using rule 41 (exp -> NUMBER .)
    DIVIDE          reduce using rule 41 (exp -> NUMBER .)
    EXPO            reduce using rule 41 (exp -> NUMBER .)
    PERCENTUAL      reduce using rule 41 (exp -> NUMBER .)
    CONCAT          reduce using rule 41 (exp -> NUMBER .)
    LT              reduce using rule 41 (exp -> NUMBER .)
    LTEQUALS        reduce using rule 41 (exp -> NUMBER .)
    GT              reduce using rule 41 (exp -> NUMBER .)
    GTEQUALS        reduce using rule 41 (exp -> NUMBER .)
    EQUALS          reduce using rule 41 (exp -> NUMBER .)
    DIF             reduce using rule 41 (exp -> NUMBER .)
    AND             reduce using rule 41 (exp -> NUMBER .)
    OR              reduce using rule 41 (exp -> NUMBER .)
    THEN            reduce using rule 41 (exp -> NUMBER .)
    RPAREN          reduce using rule 41 (exp -> NUMBER .)
    COMMA           reduce using rule 41 (exp -> NUMBER .)
    $end            reduce using rule 41 (exp -> NUMBER .)
    END             reduce using rule 41 (exp -> NUMBER .)
    UNTIL           reduce using rule 41 (exp -> NUMBER .)
    ELSEIF          reduce using rule 41 (exp -> NUMBER .)
    ELSE            reduce using rule 41 (exp -> NUMBER .)
    RETURN          reduce using rule 41 (exp -> NUMBER .)
    SEMICOLON       reduce using rule 41 (exp -> NUMBER .)
    RCOLCH          reduce using rule 41 (exp -> NUMBER .)
    RBRACE          reduce using rule 41 (exp -> NUMBER .)


state 49

    (42) exp -> STRING .

    DO              reduce using rule 42 (exp -> STRING .)
    PLUS            reduce using rule 42 (exp -> STRING .)
    MINUS           reduce using rule 42 (exp -> STRING .)
    TIMES           reduce using rule 42 (exp -> STRING .)
    DIVIDE          reduce using rule 42 (exp -> STRING .)
    EXPO            reduce using rule 42 (exp -> STRING .)
    PERCENTUAL      reduce using rule 42 (exp -> STRING .)
    CONCAT          reduce using rule 42 (exp -> STRING .)
    LT              reduce using rule 42 (exp -> STRING .)
    LTEQUALS        reduce using rule 42 (exp -> STRING .)
    GT              reduce using rule 42 (exp -> STRING .)
    GTEQUALS        reduce using rule 42 (exp -> STRING .)
    EQUALS          reduce using rule 42 (exp -> STRING .)
    DIF             reduce using rule 42 (exp -> STRING .)
    AND             reduce using rule 42 (exp -> STRING .)
    OR              reduce using rule 42 (exp -> STRING .)
    THEN            reduce using rule 42 (exp -> STRING .)
    RPAREN          reduce using rule 42 (exp -> STRING .)
    COMMA           reduce using rule 42 (exp -> STRING .)
    $end            reduce using rule 42 (exp -> STRING .)
    END             reduce using rule 42 (exp -> STRING .)
    UNTIL           reduce using rule 42 (exp -> STRING .)
    ELSEIF          reduce using rule 42 (exp -> STRING .)
    ELSE            reduce using rule 42 (exp -> STRING .)
    RETURN          reduce using rule 42 (exp -> STRING .)
    SEMICOLON       reduce using rule 42 (exp -> STRING .)
    RCOLCH          reduce using rule 42 (exp -> STRING .)
    RBRACE          reduce using rule 42 (exp -> STRING .)


state 50

    (43) exp -> VARARGS .

    DO              reduce using rule 43 (exp -> VARARGS .)
    PLUS            reduce using rule 43 (exp -> VARARGS .)
    MINUS           reduce using rule 43 (exp -> VARARGS .)
    TIMES           reduce using rule 43 (exp -> VARARGS .)
    DIVIDE          reduce using rule 43 (exp -> VARARGS .)
    EXPO            reduce using rule 43 (exp -> VARARGS .)
    PERCENTUAL      reduce using rule 43 (exp -> VARARGS .)
    CONCAT          reduce using rule 43 (exp -> VARARGS .)
    LT              reduce using rule 43 (exp -> VARARGS .)
    LTEQUALS        reduce using rule 43 (exp -> VARARGS .)
    GT              reduce using rule 43 (exp -> VARARGS .)
    GTEQUALS        reduce using rule 43 (exp -> VARARGS .)
    EQUALS          reduce using rule 43 (exp -> VARARGS .)
    DIF             reduce using rule 43 (exp -> VARARGS .)
    AND             reduce using rule 43 (exp -> VARARGS .)
    OR              reduce using rule 43 (exp -> VARARGS .)
    THEN            reduce using rule 43 (exp -> VARARGS .)
    RPAREN          reduce using rule 43 (exp -> VARARGS .)
    COMMA           reduce using rule 43 (exp -> VARARGS .)
    $end            reduce using rule 43 (exp -> VARARGS .)
    END             reduce using rule 43 (exp -> VARARGS .)
    UNTIL           reduce using rule 43 (exp -> VARARGS .)
    ELSEIF          reduce using rule 43 (exp -> VARARGS .)
    ELSE            reduce using rule 43 (exp -> VARARGS .)
    RETURN          reduce using rule 43 (exp -> VARARGS .)
    SEMICOLON       reduce using rule 43 (exp -> VARARGS .)
    RCOLCH          reduce using rule 43 (exp -> VARARGS .)
    RBRACE          reduce using rule 43 (exp -> VARARGS .)


state 51

    (44) exp -> def_function .

    DO              reduce using rule 44 (exp -> def_function .)
    PLUS            reduce using rule 44 (exp -> def_function .)
    MINUS           reduce using rule 44 (exp -> def_function .)
    TIMES           reduce using rule 44 (exp -> def_function .)
    DIVIDE          reduce using rule 44 (exp -> def_function .)
    EXPO            reduce using rule 44 (exp -> def_function .)
    PERCENTUAL      reduce using rule 44 (exp -> def_function .)
    CONCAT          reduce using rule 44 (exp -> def_function .)
    LT              reduce using rule 44 (exp -> def_function .)
    LTEQUALS        reduce using rule 44 (exp -> def_function .)
    GT              reduce using rule 44 (exp -> def_function .)
    GTEQUALS        reduce using rule 44 (exp -> def_function .)
    EQUALS          reduce using rule 44 (exp -> def_function .)
    DIF             reduce using rule 44 (exp -> def_function .)
    AND             reduce using rule 44 (exp -> def_function .)
    OR              reduce using rule 44 (exp -> def_function .)
    THEN            reduce using rule 44 (exp -> def_function .)
    RPAREN          reduce using rule 44 (exp -> def_function .)
    COMMA           reduce using rule 44 (exp -> def_function .)
    $end            reduce using rule 44 (exp -> def_function .)
    END             reduce using rule 44 (exp -> def_function .)
    UNTIL           reduce using rule 44 (exp -> def_function .)
    ELSEIF          reduce using rule 44 (exp -> def_function .)
    ELSE            reduce using rule 44 (exp -> def_function .)
    RETURN          reduce using rule 44 (exp -> def_function .)
    SEMICOLON       reduce using rule 44 (exp -> def_function .)
    RCOLCH          reduce using rule 44 (exp -> def_function .)
    RBRACE          reduce using rule 44 (exp -> def_function .)


state 52

    (45) exp -> exp_prefix .
    (52) call_function -> exp_prefix . args
    (53) call_function -> exp_prefix . COLON NAME args
    (54) args -> . LPAREN list_exps RPAREN
    (55) args -> . construct_table
    (61) construct_table -> . LBRACE list_fields RBRACE

    DO              reduce using rule 45 (exp -> exp_prefix .)
    PLUS            reduce using rule 45 (exp -> exp_prefix .)
    MINUS           reduce using rule 45 (exp -> exp_prefix .)
    TIMES           reduce using rule 45 (exp -> exp_prefix .)
    DIVIDE          reduce using rule 45 (exp -> exp_prefix .)
    EXPO            reduce using rule 45 (exp -> exp_prefix .)
    PERCENTUAL      reduce using rule 45 (exp -> exp_prefix .)
    CONCAT          reduce using rule 45 (exp -> exp_prefix .)
    LT              reduce using rule 45 (exp -> exp_prefix .)
    LTEQUALS        reduce using rule 45 (exp -> exp_prefix .)
    GT              reduce using rule 45 (exp -> exp_prefix .)
    GTEQUALS        reduce using rule 45 (exp -> exp_prefix .)
    EQUALS          reduce using rule 45 (exp -> exp_prefix .)
    DIF             reduce using rule 45 (exp -> exp_prefix .)
    AND             reduce using rule 45 (exp -> exp_prefix .)
    OR              reduce using rule 45 (exp -> exp_prefix .)
    THEN            reduce using rule 45 (exp -> exp_prefix .)
    RPAREN          reduce using rule 45 (exp -> exp_prefix .)
    COMMA           reduce using rule 45 (exp -> exp_prefix .)
    $end            reduce using rule 45 (exp -> exp_prefix .)
    END             reduce using rule 45 (exp -> exp_prefix .)
    UNTIL           reduce using rule 45 (exp -> exp_prefix .)
    ELSEIF          reduce using rule 45 (exp -> exp_prefix .)
    ELSE            reduce using rule 45 (exp -> exp_prefix .)
    RETURN          reduce using rule 45 (exp -> exp_prefix .)
    SEMICOLON       reduce using rule 45 (exp -> exp_prefix .)
    RCOLCH          reduce using rule 45 (exp -> exp_prefix .)
    RBRACE          reduce using rule 45 (exp -> exp_prefix .)
    COLON           shift and go to state 39
    LPAREN          shift and go to state 40
    LBRACE          shift and go to state 42

    args                           shift and go to state 38
    construct_table                shift and go to state 41

state 53

    (46) exp -> construct_table .

    DO              reduce using rule 46 (exp -> construct_table .)
    PLUS            reduce using rule 46 (exp -> construct_table .)
    MINUS           reduce using rule 46 (exp -> construct_table .)
    TIMES           reduce using rule 46 (exp -> construct_table .)
    DIVIDE          reduce using rule 46 (exp -> construct_table .)
    EXPO            reduce using rule 46 (exp -> construct_table .)
    PERCENTUAL      reduce using rule 46 (exp -> construct_table .)
    CONCAT          reduce using rule 46 (exp -> construct_table .)
    LT              reduce using rule 46 (exp -> construct_table .)
    LTEQUALS        reduce using rule 46 (exp -> construct_table .)
    GT              reduce using rule 46 (exp -> construct_table .)
    GTEQUALS        reduce using rule 46 (exp -> construct_table .)
    EQUALS          reduce using rule 46 (exp -> construct_table .)
    DIF             reduce using rule 46 (exp -> construct_table .)
    AND             reduce using rule 46 (exp -> construct_table .)
    OR              reduce using rule 46 (exp -> construct_table .)
    THEN            reduce using rule 46 (exp -> construct_table .)
    RPAREN          reduce using rule 46 (exp -> construct_table .)
    COMMA           reduce using rule 46 (exp -> construct_table .)
    $end            reduce using rule 46 (exp -> construct_table .)
    END             reduce using rule 46 (exp -> construct_table .)
    UNTIL           reduce using rule 46 (exp -> construct_table .)
    ELSEIF          reduce using rule 46 (exp -> construct_table .)
    ELSE            reduce using rule 46 (exp -> construct_table .)
    RETURN          reduce using rule 46 (exp -> construct_table .)
    SEMICOLON       reduce using rule 46 (exp -> construct_table .)
    RCOLCH          reduce using rule 46 (exp -> construct_table .)
    RBRACE          reduce using rule 46 (exp -> construct_table .)


state 54

    (48) exp -> op_unary . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    op_unary                       shift and go to state 54
    exp                            shift and go to state 107
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    call_function                  shift and go to state 56

state 55

    (56) def_function -> FUNCTION . body_function
    (57) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 109

    body_function                  shift and go to state 108

state 56

    (50) exp_prefix -> call_function .

    COLON           reduce using rule 50 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 50 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 50 (exp_prefix -> call_function .)
    DO              reduce using rule 50 (exp_prefix -> call_function .)
    PLUS            reduce using rule 50 (exp_prefix -> call_function .)
    MINUS           reduce using rule 50 (exp_prefix -> call_function .)
    TIMES           reduce using rule 50 (exp_prefix -> call_function .)
    DIVIDE          reduce using rule 50 (exp_prefix -> call_function .)
    EXPO            reduce using rule 50 (exp_prefix -> call_function .)
    PERCENTUAL      reduce using rule 50 (exp_prefix -> call_function .)
    CONCAT          reduce using rule 50 (exp_prefix -> call_function .)
    LT              reduce using rule 50 (exp_prefix -> call_function .)
    LTEQUALS        reduce using rule 50 (exp_prefix -> call_function .)
    GT              reduce using rule 50 (exp_prefix -> call_function .)
    GTEQUALS        reduce using rule 50 (exp_prefix -> call_function .)
    EQUALS          reduce using rule 50 (exp_prefix -> call_function .)
    DIF             reduce using rule 50 (exp_prefix -> call_function .)
    AND             reduce using rule 50 (exp_prefix -> call_function .)
    OR              reduce using rule 50 (exp_prefix -> call_function .)
    THEN            reduce using rule 50 (exp_prefix -> call_function .)
    RPAREN          reduce using rule 50 (exp_prefix -> call_function .)
    COMMA           reduce using rule 50 (exp_prefix -> call_function .)
    $end            reduce using rule 50 (exp_prefix -> call_function .)
    END             reduce using rule 50 (exp_prefix -> call_function .)
    UNTIL           reduce using rule 50 (exp_prefix -> call_function .)
    ELSEIF          reduce using rule 50 (exp_prefix -> call_function .)
    ELSE            reduce using rule 50 (exp_prefix -> call_function .)
    RETURN          reduce using rule 50 (exp_prefix -> call_function .)
    SEMICOLON       reduce using rule 50 (exp_prefix -> call_function .)
    RCOLCH          reduce using rule 50 (exp_prefix -> call_function .)
    RBRACE          reduce using rule 50 (exp_prefix -> call_function .)


state 57

    (51) exp_prefix -> LPAREN . exp RPAREN
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 110
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 58

    (85) op_unary -> MINUS .

    NIL             reduce using rule 85 (op_unary -> MINUS .)
    FALSE           reduce using rule 85 (op_unary -> MINUS .)
    TRUE            reduce using rule 85 (op_unary -> MINUS .)
    NUMBER          reduce using rule 85 (op_unary -> MINUS .)
    STRING          reduce using rule 85 (op_unary -> MINUS .)
    VARARGS         reduce using rule 85 (op_unary -> MINUS .)
    FUNCTION        reduce using rule 85 (op_unary -> MINUS .)
    VAR             reduce using rule 85 (op_unary -> MINUS .)
    LPAREN          reduce using rule 85 (op_unary -> MINUS .)
    LBRACE          reduce using rule 85 (op_unary -> MINUS .)
    MINUS           reduce using rule 85 (op_unary -> MINUS .)
    NOT             reduce using rule 85 (op_unary -> MINUS .)
    TAG             reduce using rule 85 (op_unary -> MINUS .)


state 59

    (86) op_unary -> NOT .

    NIL             reduce using rule 86 (op_unary -> NOT .)
    FALSE           reduce using rule 86 (op_unary -> NOT .)
    TRUE            reduce using rule 86 (op_unary -> NOT .)
    NUMBER          reduce using rule 86 (op_unary -> NOT .)
    STRING          reduce using rule 86 (op_unary -> NOT .)
    VARARGS         reduce using rule 86 (op_unary -> NOT .)
    FUNCTION        reduce using rule 86 (op_unary -> NOT .)
    VAR             reduce using rule 86 (op_unary -> NOT .)
    LPAREN          reduce using rule 86 (op_unary -> NOT .)
    LBRACE          reduce using rule 86 (op_unary -> NOT .)
    MINUS           reduce using rule 86 (op_unary -> NOT .)
    NOT             reduce using rule 86 (op_unary -> NOT .)
    TAG             reduce using rule 86 (op_unary -> NOT .)


state 60

    (87) op_unary -> TAG .

    NIL             reduce using rule 87 (op_unary -> TAG .)
    FALSE           reduce using rule 87 (op_unary -> TAG .)
    TRUE            reduce using rule 87 (op_unary -> TAG .)
    NUMBER          reduce using rule 87 (op_unary -> TAG .)
    STRING          reduce using rule 87 (op_unary -> TAG .)
    VARARGS         reduce using rule 87 (op_unary -> TAG .)
    FUNCTION        reduce using rule 87 (op_unary -> TAG .)
    VAR             reduce using rule 87 (op_unary -> TAG .)
    LPAREN          reduce using rule 87 (op_unary -> TAG .)
    LBRACE          reduce using rule 87 (op_unary -> TAG .)
    MINUS           reduce using rule 87 (op_unary -> TAG .)
    NOT             reduce using rule 87 (op_unary -> TAG .)
    TAG             reduce using rule 87 (op_unary -> TAG .)


state 61

    (98) struct_repeat -> REPEAT block . UNTIL exp

    UNTIL           shift and go to state 111


state 62

    (89) if -> IF exp . THEN block else_ifs else END
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    THEN            shift and go to state 112
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 63

    (95) struct_for -> FOR NAME . ATRIB exp COMMA exp DO block END
    (96) struct_for -> FOR NAME . ATRIB exp COMMA exp COMMA exp DO block END
    (34) list_names -> NAME .
    (35) list_names -> NAME . COMMA list_names

    ATRIB           shift and go to state 113
    IN              reduce using rule 34 (list_names -> NAME .)
    COMMA           shift and go to state 114


state 64

    (97) struct_for_in -> FOR list_names . IN list_exps DO block END

    IN              shift and go to state 115


state 65

    (88) function -> FUNCTION name_function . body_function
    (99) local_function -> FUNCTION name_function . body_function
    (57) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 109

    body_function                  shift and go to state 116

state 66

    (23) name_function -> NAME .
    (24) name_function -> NAME . DOT NAME
    (25) name_function -> NAME . COLON NAME

    LPAREN          reduce using rule 23 (name_function -> NAME .)
    DOT             shift and go to state 117
    COLON           shift and go to state 118


state 67

    (69) local_var -> LOCAL list_names . ATRIB list_exps

    ATRIB           shift and go to state 119


state 68

    (34) list_names -> NAME .
    (35) list_names -> NAME . COMMA list_names

  ! shift/reduce conflict for COMMA resolved as shift
    ATRIB           reduce using rule 34 (list_names -> NAME .)
    RPAREN          reduce using rule 34 (list_names -> NAME .)
    IN              reduce using rule 34 (list_names -> NAME .)
    COMMA           shift and go to state 114

  ! COMMA           [ reduce using rule 34 (list_names -> NAME .) ]


state 69

    (29) var -> prefix_exp LCOLCH . exp RCOLCH
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 120
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 70

    (30) var -> prefix_exp DOT . NAME

    NAME            shift and go to state 121


state 71

    (51) exp_prefix -> LPAREN exp . RPAREN
    (33) prefix_exp -> LPAREN exp . RPAREN
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    RPAREN          shift and go to state 122
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 72

    (20) command_ret -> RETURN list_exps .
    (21) command_ret -> RETURN list_exps . COMMA

    $end            reduce using rule 20 (command_ret -> RETURN list_exps .)
    END             reduce using rule 20 (command_ret -> RETURN list_exps .)
    UNTIL           reduce using rule 20 (command_ret -> RETURN list_exps .)
    ELSEIF          reduce using rule 20 (command_ret -> RETURN list_exps .)
    ELSE            reduce using rule 20 (command_ret -> RETURN list_exps .)
    COMMA           shift and go to state 123


state 73

    (36) list_exps -> exp .
    (37) list_exps -> exp . COMMA list_exps
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

  ! shift/reduce conflict for COMMA resolved as shift
    $end            reduce using rule 36 (list_exps -> exp .)
    END             reduce using rule 36 (list_exps -> exp .)
    UNTIL           reduce using rule 36 (list_exps -> exp .)
    ELSEIF          reduce using rule 36 (list_exps -> exp .)
    ELSE            reduce using rule 36 (list_exps -> exp .)
    RETURN          reduce using rule 36 (list_exps -> exp .)
    RPAREN          reduce using rule 36 (list_exps -> exp .)
    DO              reduce using rule 36 (list_exps -> exp .)
    COMMA           shift and go to state 124
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

  ! COMMA           [ reduce using rule 36 (list_exps -> exp .) ]

    op_bin                         shift and go to state 91

state 74

    (5) command -> list_vars ATRIB list_exps .

    RETURN          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    $end            reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    END             reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    UNTIL           reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    ELSEIF          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    ELSE            reduce using rule 5 (command -> list_vars ATRIB list_exps .)


state 75

    (10) command -> DO block END .

    RETURN          reduce using rule 10 (command -> DO block END .)
    $end            reduce using rule 10 (command -> DO block END .)
    END             reduce using rule 10 (command -> DO block END .)
    UNTIL           reduce using rule 10 (command -> DO block END .)
    ELSEIF          reduce using rule 10 (command -> DO block END .)
    ELSE            reduce using rule 10 (command -> DO block END .)


state 76

    (27) list_vars -> var SEMICOLON list_vars .

    ATRIB           reduce using rule 27 (list_vars -> var SEMICOLON list_vars .)


state 77

    (32) prefix_exp -> call_function .
    (50) exp_prefix -> call_function .

    LCOLCH          reduce using rule 32 (prefix_exp -> call_function .)
    DOT             reduce using rule 32 (prefix_exp -> call_function .)
    COLON           reduce using rule 50 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 50 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 50 (exp_prefix -> call_function .)


state 78

    (33) prefix_exp -> LPAREN . exp RPAREN
    (51) exp_prefix -> LPAREN . exp RPAREN
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 125
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 79

    (53) call_function -> exp_prefix COLON NAME . args
    (54) args -> . LPAREN list_exps RPAREN
    (55) args -> . construct_table
    (61) construct_table -> . LBRACE list_fields RBRACE

    LPAREN          shift and go to state 40
    LBRACE          shift and go to state 42

    args                           shift and go to state 126
    construct_table                shift and go to state 41

state 80

    (54) args -> LPAREN list_exps . RPAREN

    RPAREN          shift and go to state 127


state 81

    (61) construct_table -> LBRACE list_fields . RBRACE

    RBRACE          shift and go to state 128


state 82

    (62) list_fields -> field . separator_fields field
    (67) separator_fields -> . COMMA
    (68) separator_fields -> . SEMICOLON

    COMMA           shift and go to state 87
    SEMICOLON       shift and go to state 88

    separator_fields               shift and go to state 129

state 83

    (63) list_fields -> separator_fields .

    RBRACE          reduce using rule 63 (list_fields -> separator_fields .)


state 84

    (64) field -> LCOLCH . exp RCOLCH ATRIB exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 130
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 85

    (66) field -> exp .
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    COMMA           reduce using rule 66 (field -> exp .)
    SEMICOLON       reduce using rule 66 (field -> exp .)
    RBRACE          reduce using rule 66 (field -> exp .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 86

    (65) field -> NAME . ATRIB exp

    ATRIB           shift and go to state 131


state 87

    (67) separator_fields -> COMMA .

    RBRACE          reduce using rule 67 (separator_fields -> COMMA .)
    LCOLCH          reduce using rule 67 (separator_fields -> COMMA .)
    NAME            reduce using rule 67 (separator_fields -> COMMA .)
    NIL             reduce using rule 67 (separator_fields -> COMMA .)
    FALSE           reduce using rule 67 (separator_fields -> COMMA .)
    TRUE            reduce using rule 67 (separator_fields -> COMMA .)
    NUMBER          reduce using rule 67 (separator_fields -> COMMA .)
    STRING          reduce using rule 67 (separator_fields -> COMMA .)
    VARARGS         reduce using rule 67 (separator_fields -> COMMA .)
    FUNCTION        reduce using rule 67 (separator_fields -> COMMA .)
    VAR             reduce using rule 67 (separator_fields -> COMMA .)
    LPAREN          reduce using rule 67 (separator_fields -> COMMA .)
    LBRACE          reduce using rule 67 (separator_fields -> COMMA .)
    MINUS           reduce using rule 67 (separator_fields -> COMMA .)
    NOT             reduce using rule 67 (separator_fields -> COMMA .)
    TAG             reduce using rule 67 (separator_fields -> COMMA .)


state 88

    (68) separator_fields -> SEMICOLON .

    RBRACE          reduce using rule 68 (separator_fields -> SEMICOLON .)
    LCOLCH          reduce using rule 68 (separator_fields -> SEMICOLON .)
    NAME            reduce using rule 68 (separator_fields -> SEMICOLON .)
    NIL             reduce using rule 68 (separator_fields -> SEMICOLON .)
    FALSE           reduce using rule 68 (separator_fields -> SEMICOLON .)
    TRUE            reduce using rule 68 (separator_fields -> SEMICOLON .)
    NUMBER          reduce using rule 68 (separator_fields -> SEMICOLON .)
    STRING          reduce using rule 68 (separator_fields -> SEMICOLON .)
    VARARGS         reduce using rule 68 (separator_fields -> SEMICOLON .)
    FUNCTION        reduce using rule 68 (separator_fields -> SEMICOLON .)
    VAR             reduce using rule 68 (separator_fields -> SEMICOLON .)
    LPAREN          reduce using rule 68 (separator_fields -> SEMICOLON .)
    LBRACE          reduce using rule 68 (separator_fields -> SEMICOLON .)
    MINUS           reduce using rule 68 (separator_fields -> SEMICOLON .)
    NOT             reduce using rule 68 (separator_fields -> SEMICOLON .)
    TAG             reduce using rule 68 (separator_fields -> SEMICOLON .)


state 89

    (22) rotulo -> DUALCOLON NAME DUALCOLON .

    RETURN          reduce using rule 22 (rotulo -> DUALCOLON NAME DUALCOLON .)
    $end            reduce using rule 22 (rotulo -> DUALCOLON NAME DUALCOLON .)
    END             reduce using rule 22 (rotulo -> DUALCOLON NAME DUALCOLON .)
    UNTIL           reduce using rule 22 (rotulo -> DUALCOLON NAME DUALCOLON .)
    ELSEIF          reduce using rule 22 (rotulo -> DUALCOLON NAME DUALCOLON .)
    ELSE            reduce using rule 22 (rotulo -> DUALCOLON NAME DUALCOLON .)


state 90

    (94) struct_while -> WHILE exp DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    block                          shift and go to state 132
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 91

    (47) exp -> exp op_bin . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 133
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 92

    (70) op_bin -> PLUS .

    NIL             reduce using rule 70 (op_bin -> PLUS .)
    FALSE           reduce using rule 70 (op_bin -> PLUS .)
    TRUE            reduce using rule 70 (op_bin -> PLUS .)
    NUMBER          reduce using rule 70 (op_bin -> PLUS .)
    STRING          reduce using rule 70 (op_bin -> PLUS .)
    VARARGS         reduce using rule 70 (op_bin -> PLUS .)
    FUNCTION        reduce using rule 70 (op_bin -> PLUS .)
    VAR             reduce using rule 70 (op_bin -> PLUS .)
    LPAREN          reduce using rule 70 (op_bin -> PLUS .)
    LBRACE          reduce using rule 70 (op_bin -> PLUS .)
    MINUS           reduce using rule 70 (op_bin -> PLUS .)
    NOT             reduce using rule 70 (op_bin -> PLUS .)
    TAG             reduce using rule 70 (op_bin -> PLUS .)


state 93

    (71) op_bin -> MINUS .

    NIL             reduce using rule 71 (op_bin -> MINUS .)
    FALSE           reduce using rule 71 (op_bin -> MINUS .)
    TRUE            reduce using rule 71 (op_bin -> MINUS .)
    NUMBER          reduce using rule 71 (op_bin -> MINUS .)
    STRING          reduce using rule 71 (op_bin -> MINUS .)
    VARARGS         reduce using rule 71 (op_bin -> MINUS .)
    FUNCTION        reduce using rule 71 (op_bin -> MINUS .)
    VAR             reduce using rule 71 (op_bin -> MINUS .)
    LPAREN          reduce using rule 71 (op_bin -> MINUS .)
    LBRACE          reduce using rule 71 (op_bin -> MINUS .)
    MINUS           reduce using rule 71 (op_bin -> MINUS .)
    NOT             reduce using rule 71 (op_bin -> MINUS .)
    TAG             reduce using rule 71 (op_bin -> MINUS .)


state 94

    (72) op_bin -> TIMES .

    NIL             reduce using rule 72 (op_bin -> TIMES .)
    FALSE           reduce using rule 72 (op_bin -> TIMES .)
    TRUE            reduce using rule 72 (op_bin -> TIMES .)
    NUMBER          reduce using rule 72 (op_bin -> TIMES .)
    STRING          reduce using rule 72 (op_bin -> TIMES .)
    VARARGS         reduce using rule 72 (op_bin -> TIMES .)
    FUNCTION        reduce using rule 72 (op_bin -> TIMES .)
    VAR             reduce using rule 72 (op_bin -> TIMES .)
    LPAREN          reduce using rule 72 (op_bin -> TIMES .)
    LBRACE          reduce using rule 72 (op_bin -> TIMES .)
    MINUS           reduce using rule 72 (op_bin -> TIMES .)
    NOT             reduce using rule 72 (op_bin -> TIMES .)
    TAG             reduce using rule 72 (op_bin -> TIMES .)


state 95

    (73) op_bin -> DIVIDE .

    NIL             reduce using rule 73 (op_bin -> DIVIDE .)
    FALSE           reduce using rule 73 (op_bin -> DIVIDE .)
    TRUE            reduce using rule 73 (op_bin -> DIVIDE .)
    NUMBER          reduce using rule 73 (op_bin -> DIVIDE .)
    STRING          reduce using rule 73 (op_bin -> DIVIDE .)
    VARARGS         reduce using rule 73 (op_bin -> DIVIDE .)
    FUNCTION        reduce using rule 73 (op_bin -> DIVIDE .)
    VAR             reduce using rule 73 (op_bin -> DIVIDE .)
    LPAREN          reduce using rule 73 (op_bin -> DIVIDE .)
    LBRACE          reduce using rule 73 (op_bin -> DIVIDE .)
    MINUS           reduce using rule 73 (op_bin -> DIVIDE .)
    NOT             reduce using rule 73 (op_bin -> DIVIDE .)
    TAG             reduce using rule 73 (op_bin -> DIVIDE .)


state 96

    (74) op_bin -> EXPO .

    NIL             reduce using rule 74 (op_bin -> EXPO .)
    FALSE           reduce using rule 74 (op_bin -> EXPO .)
    TRUE            reduce using rule 74 (op_bin -> EXPO .)
    NUMBER          reduce using rule 74 (op_bin -> EXPO .)
    STRING          reduce using rule 74 (op_bin -> EXPO .)
    VARARGS         reduce using rule 74 (op_bin -> EXPO .)
    FUNCTION        reduce using rule 74 (op_bin -> EXPO .)
    VAR             reduce using rule 74 (op_bin -> EXPO .)
    LPAREN          reduce using rule 74 (op_bin -> EXPO .)
    LBRACE          reduce using rule 74 (op_bin -> EXPO .)
    MINUS           reduce using rule 74 (op_bin -> EXPO .)
    NOT             reduce using rule 74 (op_bin -> EXPO .)
    TAG             reduce using rule 74 (op_bin -> EXPO .)


state 97

    (75) op_bin -> PERCENTUAL .

    NIL             reduce using rule 75 (op_bin -> PERCENTUAL .)
    FALSE           reduce using rule 75 (op_bin -> PERCENTUAL .)
    TRUE            reduce using rule 75 (op_bin -> PERCENTUAL .)
    NUMBER          reduce using rule 75 (op_bin -> PERCENTUAL .)
    STRING          reduce using rule 75 (op_bin -> PERCENTUAL .)
    VARARGS         reduce using rule 75 (op_bin -> PERCENTUAL .)
    FUNCTION        reduce using rule 75 (op_bin -> PERCENTUAL .)
    VAR             reduce using rule 75 (op_bin -> PERCENTUAL .)
    LPAREN          reduce using rule 75 (op_bin -> PERCENTUAL .)
    LBRACE          reduce using rule 75 (op_bin -> PERCENTUAL .)
    MINUS           reduce using rule 75 (op_bin -> PERCENTUAL .)
    NOT             reduce using rule 75 (op_bin -> PERCENTUAL .)
    TAG             reduce using rule 75 (op_bin -> PERCENTUAL .)


state 98

    (76) op_bin -> CONCAT .

    NIL             reduce using rule 76 (op_bin -> CONCAT .)
    FALSE           reduce using rule 76 (op_bin -> CONCAT .)
    TRUE            reduce using rule 76 (op_bin -> CONCAT .)
    NUMBER          reduce using rule 76 (op_bin -> CONCAT .)
    STRING          reduce using rule 76 (op_bin -> CONCAT .)
    VARARGS         reduce using rule 76 (op_bin -> CONCAT .)
    FUNCTION        reduce using rule 76 (op_bin -> CONCAT .)
    VAR             reduce using rule 76 (op_bin -> CONCAT .)
    LPAREN          reduce using rule 76 (op_bin -> CONCAT .)
    LBRACE          reduce using rule 76 (op_bin -> CONCAT .)
    MINUS           reduce using rule 76 (op_bin -> CONCAT .)
    NOT             reduce using rule 76 (op_bin -> CONCAT .)
    TAG             reduce using rule 76 (op_bin -> CONCAT .)


state 99

    (77) op_bin -> LT .

    NIL             reduce using rule 77 (op_bin -> LT .)
    FALSE           reduce using rule 77 (op_bin -> LT .)
    TRUE            reduce using rule 77 (op_bin -> LT .)
    NUMBER          reduce using rule 77 (op_bin -> LT .)
    STRING          reduce using rule 77 (op_bin -> LT .)
    VARARGS         reduce using rule 77 (op_bin -> LT .)
    FUNCTION        reduce using rule 77 (op_bin -> LT .)
    VAR             reduce using rule 77 (op_bin -> LT .)
    LPAREN          reduce using rule 77 (op_bin -> LT .)
    LBRACE          reduce using rule 77 (op_bin -> LT .)
    MINUS           reduce using rule 77 (op_bin -> LT .)
    NOT             reduce using rule 77 (op_bin -> LT .)
    TAG             reduce using rule 77 (op_bin -> LT .)


state 100

    (78) op_bin -> LTEQUALS .

    NIL             reduce using rule 78 (op_bin -> LTEQUALS .)
    FALSE           reduce using rule 78 (op_bin -> LTEQUALS .)
    TRUE            reduce using rule 78 (op_bin -> LTEQUALS .)
    NUMBER          reduce using rule 78 (op_bin -> LTEQUALS .)
    STRING          reduce using rule 78 (op_bin -> LTEQUALS .)
    VARARGS         reduce using rule 78 (op_bin -> LTEQUALS .)
    FUNCTION        reduce using rule 78 (op_bin -> LTEQUALS .)
    VAR             reduce using rule 78 (op_bin -> LTEQUALS .)
    LPAREN          reduce using rule 78 (op_bin -> LTEQUALS .)
    LBRACE          reduce using rule 78 (op_bin -> LTEQUALS .)
    MINUS           reduce using rule 78 (op_bin -> LTEQUALS .)
    NOT             reduce using rule 78 (op_bin -> LTEQUALS .)
    TAG             reduce using rule 78 (op_bin -> LTEQUALS .)


state 101

    (79) op_bin -> GT .

    NIL             reduce using rule 79 (op_bin -> GT .)
    FALSE           reduce using rule 79 (op_bin -> GT .)
    TRUE            reduce using rule 79 (op_bin -> GT .)
    NUMBER          reduce using rule 79 (op_bin -> GT .)
    STRING          reduce using rule 79 (op_bin -> GT .)
    VARARGS         reduce using rule 79 (op_bin -> GT .)
    FUNCTION        reduce using rule 79 (op_bin -> GT .)
    VAR             reduce using rule 79 (op_bin -> GT .)
    LPAREN          reduce using rule 79 (op_bin -> GT .)
    LBRACE          reduce using rule 79 (op_bin -> GT .)
    MINUS           reduce using rule 79 (op_bin -> GT .)
    NOT             reduce using rule 79 (op_bin -> GT .)
    TAG             reduce using rule 79 (op_bin -> GT .)


state 102

    (80) op_bin -> GTEQUALS .

    NIL             reduce using rule 80 (op_bin -> GTEQUALS .)
    FALSE           reduce using rule 80 (op_bin -> GTEQUALS .)
    TRUE            reduce using rule 80 (op_bin -> GTEQUALS .)
    NUMBER          reduce using rule 80 (op_bin -> GTEQUALS .)
    STRING          reduce using rule 80 (op_bin -> GTEQUALS .)
    VARARGS         reduce using rule 80 (op_bin -> GTEQUALS .)
    FUNCTION        reduce using rule 80 (op_bin -> GTEQUALS .)
    VAR             reduce using rule 80 (op_bin -> GTEQUALS .)
    LPAREN          reduce using rule 80 (op_bin -> GTEQUALS .)
    LBRACE          reduce using rule 80 (op_bin -> GTEQUALS .)
    MINUS           reduce using rule 80 (op_bin -> GTEQUALS .)
    NOT             reduce using rule 80 (op_bin -> GTEQUALS .)
    TAG             reduce using rule 80 (op_bin -> GTEQUALS .)


state 103

    (81) op_bin -> EQUALS .

    NIL             reduce using rule 81 (op_bin -> EQUALS .)
    FALSE           reduce using rule 81 (op_bin -> EQUALS .)
    TRUE            reduce using rule 81 (op_bin -> EQUALS .)
    NUMBER          reduce using rule 81 (op_bin -> EQUALS .)
    STRING          reduce using rule 81 (op_bin -> EQUALS .)
    VARARGS         reduce using rule 81 (op_bin -> EQUALS .)
    FUNCTION        reduce using rule 81 (op_bin -> EQUALS .)
    VAR             reduce using rule 81 (op_bin -> EQUALS .)
    LPAREN          reduce using rule 81 (op_bin -> EQUALS .)
    LBRACE          reduce using rule 81 (op_bin -> EQUALS .)
    MINUS           reduce using rule 81 (op_bin -> EQUALS .)
    NOT             reduce using rule 81 (op_bin -> EQUALS .)
    TAG             reduce using rule 81 (op_bin -> EQUALS .)


state 104

    (82) op_bin -> DIF .

    NIL             reduce using rule 82 (op_bin -> DIF .)
    FALSE           reduce using rule 82 (op_bin -> DIF .)
    TRUE            reduce using rule 82 (op_bin -> DIF .)
    NUMBER          reduce using rule 82 (op_bin -> DIF .)
    STRING          reduce using rule 82 (op_bin -> DIF .)
    VARARGS         reduce using rule 82 (op_bin -> DIF .)
    FUNCTION        reduce using rule 82 (op_bin -> DIF .)
    VAR             reduce using rule 82 (op_bin -> DIF .)
    LPAREN          reduce using rule 82 (op_bin -> DIF .)
    LBRACE          reduce using rule 82 (op_bin -> DIF .)
    MINUS           reduce using rule 82 (op_bin -> DIF .)
    NOT             reduce using rule 82 (op_bin -> DIF .)
    TAG             reduce using rule 82 (op_bin -> DIF .)


state 105

    (83) op_bin -> AND .

    NIL             reduce using rule 83 (op_bin -> AND .)
    FALSE           reduce using rule 83 (op_bin -> AND .)
    TRUE            reduce using rule 83 (op_bin -> AND .)
    NUMBER          reduce using rule 83 (op_bin -> AND .)
    STRING          reduce using rule 83 (op_bin -> AND .)
    VARARGS         reduce using rule 83 (op_bin -> AND .)
    FUNCTION        reduce using rule 83 (op_bin -> AND .)
    VAR             reduce using rule 83 (op_bin -> AND .)
    LPAREN          reduce using rule 83 (op_bin -> AND .)
    LBRACE          reduce using rule 83 (op_bin -> AND .)
    MINUS           reduce using rule 83 (op_bin -> AND .)
    NOT             reduce using rule 83 (op_bin -> AND .)
    TAG             reduce using rule 83 (op_bin -> AND .)


state 106

    (84) op_bin -> OR .

    NIL             reduce using rule 84 (op_bin -> OR .)
    FALSE           reduce using rule 84 (op_bin -> OR .)
    TRUE            reduce using rule 84 (op_bin -> OR .)
    NUMBER          reduce using rule 84 (op_bin -> OR .)
    STRING          reduce using rule 84 (op_bin -> OR .)
    VARARGS         reduce using rule 84 (op_bin -> OR .)
    FUNCTION        reduce using rule 84 (op_bin -> OR .)
    VAR             reduce using rule 84 (op_bin -> OR .)
    LPAREN          reduce using rule 84 (op_bin -> OR .)
    LBRACE          reduce using rule 84 (op_bin -> OR .)
    MINUS           reduce using rule 84 (op_bin -> OR .)
    NOT             reduce using rule 84 (op_bin -> OR .)
    TAG             reduce using rule 84 (op_bin -> OR .)


state 107

    (48) exp -> op_unary exp .
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPO resolved as shift
  ! shift/reduce conflict for PERCENTUAL resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTEQUALS resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTEQUALS resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    DO              reduce using rule 48 (exp -> op_unary exp .)
    THEN            reduce using rule 48 (exp -> op_unary exp .)
    RPAREN          reduce using rule 48 (exp -> op_unary exp .)
    COMMA           reduce using rule 48 (exp -> op_unary exp .)
    $end            reduce using rule 48 (exp -> op_unary exp .)
    END             reduce using rule 48 (exp -> op_unary exp .)
    UNTIL           reduce using rule 48 (exp -> op_unary exp .)
    ELSEIF          reduce using rule 48 (exp -> op_unary exp .)
    ELSE            reduce using rule 48 (exp -> op_unary exp .)
    RETURN          reduce using rule 48 (exp -> op_unary exp .)
    SEMICOLON       reduce using rule 48 (exp -> op_unary exp .)
    RCOLCH          reduce using rule 48 (exp -> op_unary exp .)
    RBRACE          reduce using rule 48 (exp -> op_unary exp .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

  ! PLUS            [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! MINUS           [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! TIMES           [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! EXPO            [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! PERCENTUAL      [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! CONCAT          [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! LT              [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! LTEQUALS        [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! GT              [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! GTEQUALS        [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! EQUALS          [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! DIF             [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! AND             [ reduce using rule 48 (exp -> op_unary exp .) ]
  ! OR              [ reduce using rule 48 (exp -> op_unary exp .) ]

    op_bin                         shift and go to state 91

state 108

    (56) def_function -> FUNCTION body_function .

    DO              reduce using rule 56 (def_function -> FUNCTION body_function .)
    PLUS            reduce using rule 56 (def_function -> FUNCTION body_function .)
    MINUS           reduce using rule 56 (def_function -> FUNCTION body_function .)
    TIMES           reduce using rule 56 (def_function -> FUNCTION body_function .)
    DIVIDE          reduce using rule 56 (def_function -> FUNCTION body_function .)
    EXPO            reduce using rule 56 (def_function -> FUNCTION body_function .)
    PERCENTUAL      reduce using rule 56 (def_function -> FUNCTION body_function .)
    CONCAT          reduce using rule 56 (def_function -> FUNCTION body_function .)
    LT              reduce using rule 56 (def_function -> FUNCTION body_function .)
    LTEQUALS        reduce using rule 56 (def_function -> FUNCTION body_function .)
    GT              reduce using rule 56 (def_function -> FUNCTION body_function .)
    GTEQUALS        reduce using rule 56 (def_function -> FUNCTION body_function .)
    EQUALS          reduce using rule 56 (def_function -> FUNCTION body_function .)
    DIF             reduce using rule 56 (def_function -> FUNCTION body_function .)
    AND             reduce using rule 56 (def_function -> FUNCTION body_function .)
    OR              reduce using rule 56 (def_function -> FUNCTION body_function .)
    THEN            reduce using rule 56 (def_function -> FUNCTION body_function .)
    RPAREN          reduce using rule 56 (def_function -> FUNCTION body_function .)
    COMMA           reduce using rule 56 (def_function -> FUNCTION body_function .)
    $end            reduce using rule 56 (def_function -> FUNCTION body_function .)
    END             reduce using rule 56 (def_function -> FUNCTION body_function .)
    UNTIL           reduce using rule 56 (def_function -> FUNCTION body_function .)
    ELSEIF          reduce using rule 56 (def_function -> FUNCTION body_function .)
    ELSE            reduce using rule 56 (def_function -> FUNCTION body_function .)
    RETURN          reduce using rule 56 (def_function -> FUNCTION body_function .)
    SEMICOLON       reduce using rule 56 (def_function -> FUNCTION body_function .)
    RCOLCH          reduce using rule 56 (def_function -> FUNCTION body_function .)
    RBRACE          reduce using rule 56 (def_function -> FUNCTION body_function .)


state 109

    (57) body_function -> LPAREN . list_pars RPAREN block END
    (58) list_pars -> . list_names COMMA VARARGS
    (59) list_pars -> . VARARGS
    (60) list_pars -> . list_names
    (34) list_names -> . NAME
    (35) list_names -> . NAME COMMA list_names

    VARARGS         shift and go to state 136
    NAME            shift and go to state 68

    list_pars                      shift and go to state 134
    list_names                     shift and go to state 135

state 110

    (51) exp_prefix -> LPAREN exp . RPAREN
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    RPAREN          shift and go to state 137
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 111

    (98) struct_repeat -> REPEAT block UNTIL . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 138
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 112

    (89) if -> IF exp THEN . block else_ifs else END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    block                          shift and go to state 139
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 113

    (95) struct_for -> FOR NAME ATRIB . exp COMMA exp DO block END
    (96) struct_for -> FOR NAME ATRIB . exp COMMA exp COMMA exp DO block END
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 140
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 114

    (35) list_names -> NAME COMMA . list_names
    (34) list_names -> . NAME
    (35) list_names -> . NAME COMMA list_names

    NAME            shift and go to state 68

    list_names                     shift and go to state 141

state 115

    (97) struct_for_in -> FOR list_names IN . list_exps DO block END
    (36) list_exps -> . exp
    (37) list_exps -> . exp COMMA list_exps
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    list_exps                      shift and go to state 142
    exp                            shift and go to state 73
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 116

    (88) function -> FUNCTION name_function body_function .
    (99) local_function -> FUNCTION name_function body_function .

  ! reduce/reduce conflict for RETURN resolved using rule 88 (function -> FUNCTION name_function body_function .)
  ! reduce/reduce conflict for $end resolved using rule 88 (function -> FUNCTION name_function body_function .)
  ! reduce/reduce conflict for END resolved using rule 88 (function -> FUNCTION name_function body_function .)
  ! reduce/reduce conflict for UNTIL resolved using rule 88 (function -> FUNCTION name_function body_function .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 88 (function -> FUNCTION name_function body_function .)
  ! reduce/reduce conflict for ELSE resolved using rule 88 (function -> FUNCTION name_function body_function .)
    RETURN          reduce using rule 88 (function -> FUNCTION name_function body_function .)
    $end            reduce using rule 88 (function -> FUNCTION name_function body_function .)
    END             reduce using rule 88 (function -> FUNCTION name_function body_function .)
    UNTIL           reduce using rule 88 (function -> FUNCTION name_function body_function .)
    ELSEIF          reduce using rule 88 (function -> FUNCTION name_function body_function .)
    ELSE            reduce using rule 88 (function -> FUNCTION name_function body_function .)

  ! RETURN          [ reduce using rule 99 (local_function -> FUNCTION name_function body_function .) ]
  ! $end            [ reduce using rule 99 (local_function -> FUNCTION name_function body_function .) ]
  ! END             [ reduce using rule 99 (local_function -> FUNCTION name_function body_function .) ]
  ! UNTIL           [ reduce using rule 99 (local_function -> FUNCTION name_function body_function .) ]
  ! ELSEIF          [ reduce using rule 99 (local_function -> FUNCTION name_function body_function .) ]
  ! ELSE            [ reduce using rule 99 (local_function -> FUNCTION name_function body_function .) ]


state 117

    (24) name_function -> NAME DOT . NAME

    NAME            shift and go to state 143


state 118

    (25) name_function -> NAME COLON . NAME

    NAME            shift and go to state 144


state 119

    (69) local_var -> LOCAL list_names ATRIB . list_exps
    (36) list_exps -> . exp
    (37) list_exps -> . exp COMMA list_exps
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    list_exps                      shift and go to state 145
    exp                            shift and go to state 73
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 120

    (29) var -> prefix_exp LCOLCH exp . RCOLCH
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    RCOLCH          shift and go to state 146
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 121

    (30) var -> prefix_exp DOT NAME .

    SEMICOLON       reduce using rule 30 (var -> prefix_exp DOT NAME .)
    ATRIB           reduce using rule 30 (var -> prefix_exp DOT NAME .)
    LCOLCH          reduce using rule 30 (var -> prefix_exp DOT NAME .)
    DOT             reduce using rule 30 (var -> prefix_exp DOT NAME .)


state 122

    (51) exp_prefix -> LPAREN exp RPAREN .
    (33) prefix_exp -> LPAREN exp RPAREN .

    COLON           reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    LCOLCH          reduce using rule 33 (prefix_exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 33 (prefix_exp -> LPAREN exp RPAREN .)


state 123

    (21) command_ret -> RETURN list_exps COMMA .

    $end            reduce using rule 21 (command_ret -> RETURN list_exps COMMA .)
    END             reduce using rule 21 (command_ret -> RETURN list_exps COMMA .)
    UNTIL           reduce using rule 21 (command_ret -> RETURN list_exps COMMA .)
    ELSEIF          reduce using rule 21 (command_ret -> RETURN list_exps COMMA .)
    ELSE            reduce using rule 21 (command_ret -> RETURN list_exps COMMA .)


state 124

    (37) list_exps -> exp COMMA . list_exps
    (36) list_exps -> . exp
    (37) list_exps -> . exp COMMA list_exps
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 73
    list_exps                      shift and go to state 147
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 125

    (33) prefix_exp -> LPAREN exp . RPAREN
    (51) exp_prefix -> LPAREN exp . RPAREN
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    RPAREN          shift and go to state 148
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 126

    (53) call_function -> exp_prefix COLON NAME args .

    RETURN          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    $end            reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    COLON           reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    LPAREN          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    LBRACE          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    LCOLCH          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    DOT             reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    END             reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    DO              reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    PLUS            reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    MINUS           reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    TIMES           reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    DIVIDE          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    EXPO            reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    PERCENTUAL      reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    CONCAT          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    LT              reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    LTEQUALS        reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    GT              reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    GTEQUALS        reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    EQUALS          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    DIF             reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    AND             reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    OR              reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    UNTIL           reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    THEN            reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    RPAREN          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    COMMA           reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    ELSEIF          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    ELSE            reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    SEMICOLON       reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    RCOLCH          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)
    RBRACE          reduce using rule 53 (call_function -> exp_prefix COLON NAME args .)


state 127

    (54) args -> LPAREN list_exps RPAREN .

    RETURN          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    $end            reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    COLON           reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    LPAREN          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    LBRACE          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    LCOLCH          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    DOT             reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    END             reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    UNTIL           reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    ELSEIF          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    ELSE            reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    DO              reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    PLUS            reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    MINUS           reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    TIMES           reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    DIVIDE          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    EXPO            reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    PERCENTUAL      reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    CONCAT          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    LT              reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    LTEQUALS        reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    GT              reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    GTEQUALS        reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    EQUALS          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    DIF             reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    AND             reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    OR              reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    THEN            reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    RPAREN          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    COMMA           reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    SEMICOLON       reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    RCOLCH          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)
    RBRACE          reduce using rule 54 (args -> LPAREN list_exps RPAREN .)


state 128

    (61) construct_table -> LBRACE list_fields RBRACE .

    RETURN          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    $end            reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    COLON           reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    LPAREN          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    LBRACE          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    LCOLCH          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    DOT             reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    END             reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    UNTIL           reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    ELSEIF          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    ELSE            reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    DO              reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    PLUS            reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    MINUS           reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    TIMES           reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    DIVIDE          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    EXPO            reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    PERCENTUAL      reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    CONCAT          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    LT              reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    LTEQUALS        reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    GT              reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    GTEQUALS        reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    EQUALS          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    DIF             reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    AND             reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    OR              reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    THEN            reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    RPAREN          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    COMMA           reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    SEMICOLON       reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    RCOLCH          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)
    RBRACE          reduce using rule 61 (construct_table -> LBRACE list_fields RBRACE .)


state 129

    (62) list_fields -> field separator_fields . field
    (64) field -> . LCOLCH exp RCOLCH ATRIB exp
    (65) field -> . NAME ATRIB exp
    (66) field -> . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    LCOLCH          shift and go to state 84
    NAME            shift and go to state 86
    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    field                          shift and go to state 149
    exp                            shift and go to state 85
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 130

    (64) field -> LCOLCH exp . RCOLCH ATRIB exp
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    RCOLCH          shift and go to state 150
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 131

    (65) field -> NAME ATRIB . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 151
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 132

    (94) struct_while -> WHILE exp DO block . END

    END             shift and go to state 152


state 133

    (47) exp -> exp op_bin exp .
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPO resolved as shift
  ! shift/reduce conflict for PERCENTUAL resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTEQUALS resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTEQUALS resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    DO              reduce using rule 47 (exp -> exp op_bin exp .)
    THEN            reduce using rule 47 (exp -> exp op_bin exp .)
    RPAREN          reduce using rule 47 (exp -> exp op_bin exp .)
    COMMA           reduce using rule 47 (exp -> exp op_bin exp .)
    $end            reduce using rule 47 (exp -> exp op_bin exp .)
    END             reduce using rule 47 (exp -> exp op_bin exp .)
    UNTIL           reduce using rule 47 (exp -> exp op_bin exp .)
    ELSEIF          reduce using rule 47 (exp -> exp op_bin exp .)
    ELSE            reduce using rule 47 (exp -> exp op_bin exp .)
    RETURN          reduce using rule 47 (exp -> exp op_bin exp .)
    SEMICOLON       reduce using rule 47 (exp -> exp op_bin exp .)
    RCOLCH          reduce using rule 47 (exp -> exp op_bin exp .)
    RBRACE          reduce using rule 47 (exp -> exp op_bin exp .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

  ! PLUS            [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! MINUS           [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! TIMES           [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! DIVIDE          [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! EXPO            [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! PERCENTUAL      [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! CONCAT          [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! LT              [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! LTEQUALS        [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! GT              [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! GTEQUALS        [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! EQUALS          [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! DIF             [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! AND             [ reduce using rule 47 (exp -> exp op_bin exp .) ]
  ! OR              [ reduce using rule 47 (exp -> exp op_bin exp .) ]

    op_bin                         shift and go to state 91

state 134

    (57) body_function -> LPAREN list_pars . RPAREN block END

    RPAREN          shift and go to state 153


state 135

    (58) list_pars -> list_names . COMMA VARARGS
    (60) list_pars -> list_names .

    COMMA           shift and go to state 154
    RPAREN          reduce using rule 60 (list_pars -> list_names .)


state 136

    (59) list_pars -> VARARGS .

    RPAREN          reduce using rule 59 (list_pars -> VARARGS .)


state 137

    (51) exp_prefix -> LPAREN exp RPAREN .

    COLON           reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    DO              reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    EXPO            reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    PERCENTUAL      reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    CONCAT          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    LT              reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    LTEQUALS        reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    GT              reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    GTEQUALS        reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    DIF             reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    AND             reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    OR              reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    THEN            reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    $end            reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    END             reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    UNTIL           reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    ELSEIF          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    ELSE            reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    RCOLCH          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    RBRACE          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)


state 138

    (98) struct_repeat -> REPEAT block UNTIL exp .
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    RETURN          reduce using rule 98 (struct_repeat -> REPEAT block UNTIL exp .)
    $end            reduce using rule 98 (struct_repeat -> REPEAT block UNTIL exp .)
    END             reduce using rule 98 (struct_repeat -> REPEAT block UNTIL exp .)
    UNTIL           reduce using rule 98 (struct_repeat -> REPEAT block UNTIL exp .)
    ELSEIF          reduce using rule 98 (struct_repeat -> REPEAT block UNTIL exp .)
    ELSE            reduce using rule 98 (struct_repeat -> REPEAT block UNTIL exp .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 139

    (89) if -> IF exp THEN block . else_ifs else END
    (90) else_ifs -> . else_ifs else_if
    (91) else_ifs -> . else_if
    (92) else_if -> . ELSEIF exp THEN block

    ELSEIF          shift and go to state 157

    else_ifs                       shift and go to state 155
    else_if                        shift and go to state 156

state 140

    (95) struct_for -> FOR NAME ATRIB exp . COMMA exp DO block END
    (96) struct_for -> FOR NAME ATRIB exp . COMMA exp COMMA exp DO block END
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    COMMA           shift and go to state 158
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 141

    (35) list_names -> NAME COMMA list_names .

    IN              reduce using rule 35 (list_names -> NAME COMMA list_names .)
    ATRIB           reduce using rule 35 (list_names -> NAME COMMA list_names .)
    COMMA           reduce using rule 35 (list_names -> NAME COMMA list_names .)
    RPAREN          reduce using rule 35 (list_names -> NAME COMMA list_names .)


state 142

    (97) struct_for_in -> FOR list_names IN list_exps . DO block END

    DO              shift and go to state 159


state 143

    (24) name_function -> NAME DOT NAME .

    LPAREN          reduce using rule 24 (name_function -> NAME DOT NAME .)


state 144

    (25) name_function -> NAME COLON NAME .

    LPAREN          reduce using rule 25 (name_function -> NAME COLON NAME .)


state 145

    (69) local_var -> LOCAL list_names ATRIB list_exps .

    RETURN          reduce using rule 69 (local_var -> LOCAL list_names ATRIB list_exps .)
    $end            reduce using rule 69 (local_var -> LOCAL list_names ATRIB list_exps .)
    END             reduce using rule 69 (local_var -> LOCAL list_names ATRIB list_exps .)
    UNTIL           reduce using rule 69 (local_var -> LOCAL list_names ATRIB list_exps .)
    ELSEIF          reduce using rule 69 (local_var -> LOCAL list_names ATRIB list_exps .)
    ELSE            reduce using rule 69 (local_var -> LOCAL list_names ATRIB list_exps .)


state 146

    (29) var -> prefix_exp LCOLCH exp RCOLCH .

    SEMICOLON       reduce using rule 29 (var -> prefix_exp LCOLCH exp RCOLCH .)
    ATRIB           reduce using rule 29 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LCOLCH          reduce using rule 29 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DOT             reduce using rule 29 (var -> prefix_exp LCOLCH exp RCOLCH .)


state 147

    (37) list_exps -> exp COMMA list_exps .

    COMMA           reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    $end            reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    END             reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    UNTIL           reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    ELSEIF          reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    ELSE            reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    RETURN          reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    RPAREN          reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    DO              reduce using rule 37 (list_exps -> exp COMMA list_exps .)


state 148

    (33) prefix_exp -> LPAREN exp RPAREN .
    (51) exp_prefix -> LPAREN exp RPAREN .

    LCOLCH          reduce using rule 33 (prefix_exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 33 (prefix_exp -> LPAREN exp RPAREN .)
    COLON           reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 51 (exp_prefix -> LPAREN exp RPAREN .)


state 149

    (62) list_fields -> field separator_fields field .

    RBRACE          reduce using rule 62 (list_fields -> field separator_fields field .)


state 150

    (64) field -> LCOLCH exp RCOLCH . ATRIB exp

    ATRIB           shift and go to state 160


state 151

    (65) field -> NAME ATRIB exp .
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    COMMA           reduce using rule 65 (field -> NAME ATRIB exp .)
    SEMICOLON       reduce using rule 65 (field -> NAME ATRIB exp .)
    RBRACE          reduce using rule 65 (field -> NAME ATRIB exp .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 152

    (94) struct_while -> WHILE exp DO block END .

    RETURN          reduce using rule 94 (struct_while -> WHILE exp DO block END .)
    $end            reduce using rule 94 (struct_while -> WHILE exp DO block END .)
    END             reduce using rule 94 (struct_while -> WHILE exp DO block END .)
    UNTIL           reduce using rule 94 (struct_while -> WHILE exp DO block END .)
    ELSEIF          reduce using rule 94 (struct_while -> WHILE exp DO block END .)
    ELSE            reduce using rule 94 (struct_while -> WHILE exp DO block END .)


state 153

    (57) body_function -> LPAREN list_pars RPAREN . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    block                          shift and go to state 161
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 154

    (58) list_pars -> list_names COMMA . VARARGS

    VARARGS         shift and go to state 162


state 155

    (89) if -> IF exp THEN block else_ifs . else END
    (90) else_ifs -> else_ifs . else_if
    (93) else -> . ELSE block
    (92) else_if -> . ELSEIF exp THEN block

    ELSE            shift and go to state 165
    ELSEIF          shift and go to state 157

    else                           shift and go to state 163
    else_if                        shift and go to state 164

state 156

    (91) else_ifs -> else_if .

    ELSE            reduce using rule 91 (else_ifs -> else_if .)
    ELSEIF          reduce using rule 91 (else_ifs -> else_if .)


state 157

    (92) else_if -> ELSEIF . exp THEN block
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 166
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 158

    (95) struct_for -> FOR NAME ATRIB exp COMMA . exp DO block END
    (96) struct_for -> FOR NAME ATRIB exp COMMA . exp COMMA exp DO block END
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 167
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 159

    (97) struct_for_in -> FOR list_names IN list_exps DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    block                          shift and go to state 168
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 160

    (64) field -> LCOLCH exp RCOLCH ATRIB . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 169
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 161

    (57) body_function -> LPAREN list_pars RPAREN block . END

    END             shift and go to state 170


state 162

    (58) list_pars -> list_names COMMA VARARGS .

    RPAREN          reduce using rule 58 (list_pars -> list_names COMMA VARARGS .)


state 163

    (89) if -> IF exp THEN block else_ifs else . END

    END             shift and go to state 171


state 164

    (90) else_ifs -> else_ifs else_if .

    ELSE            reduce using rule 90 (else_ifs -> else_ifs else_if .)
    ELSEIF          reduce using rule 90 (else_ifs -> else_ifs else_if .)


state 165

    (93) else -> ELSE . block
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    block                          shift and go to state 172
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 166

    (92) else_if -> ELSEIF exp . THEN block
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    THEN            shift and go to state 173
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 167

    (95) struct_for -> FOR NAME ATRIB exp COMMA exp . DO block END
    (96) struct_for -> FOR NAME ATRIB exp COMMA exp . COMMA exp DO block END
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    DO              shift and go to state 175
    COMMA           shift and go to state 174
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 168

    (97) struct_for_in -> FOR list_names IN list_exps DO block . END

    END             shift and go to state 176


state 169

    (64) field -> LCOLCH exp RCOLCH ATRIB exp .
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    COMMA           reduce using rule 64 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    SEMICOLON       reduce using rule 64 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    RBRACE          reduce using rule 64 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 170

    (57) body_function -> LPAREN list_pars RPAREN block END .

    DO              reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    PLUS            reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    MINUS           reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    TIMES           reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    DIVIDE          reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    EXPO            reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    PERCENTUAL      reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    CONCAT          reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    LT              reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    LTEQUALS        reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    GT              reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    GTEQUALS        reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    EQUALS          reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    DIF             reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    AND             reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    OR              reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    THEN            reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    RPAREN          reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    COMMA           reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    $end            reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    END             reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    UNTIL           reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    ELSEIF          reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    ELSE            reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    RETURN          reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    SEMICOLON       reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    RCOLCH          reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)
    RBRACE          reduce using rule 57 (body_function -> LPAREN list_pars RPAREN block END .)


state 171

    (89) if -> IF exp THEN block else_ifs else END .

    RETURN          reduce using rule 89 (if -> IF exp THEN block else_ifs else END .)
    $end            reduce using rule 89 (if -> IF exp THEN block else_ifs else END .)
    END             reduce using rule 89 (if -> IF exp THEN block else_ifs else END .)
    UNTIL           reduce using rule 89 (if -> IF exp THEN block else_ifs else END .)
    ELSEIF          reduce using rule 89 (if -> IF exp THEN block else_ifs else END .)
    ELSE            reduce using rule 89 (if -> IF exp THEN block else_ifs else END .)


state 172

    (93) else -> ELSE block .

    END             reduce using rule 93 (else -> ELSE block .)


state 173

    (92) else_if -> ELSEIF exp THEN . block
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    block                          shift and go to state 177
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 174

    (96) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA . exp DO block END
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_bin exp
    (48) exp -> . op_unary exp
    (56) def_function -> . FUNCTION body_function
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (61) construct_table -> . LBRACE list_fields RBRACE
    (85) op_unary -> . MINUS
    (86) op_unary -> . NOT
    (87) op_unary -> . TAG
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    FUNCTION        shift and go to state 55
    VAR             shift and go to state 30
    LPAREN          shift and go to state 57
    LBRACE          shift and go to state 42
    MINUS           shift and go to state 58
    NOT             shift and go to state 59
    TAG             shift and go to state 60

    exp                            shift and go to state 178
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    op_unary                       shift and go to state 54
    call_function                  shift and go to state 56

state 175

    (95) struct_for -> FOR NAME ATRIB exp COMMA exp DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    block                          shift and go to state 179
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 176

    (97) struct_for_in -> FOR list_names IN list_exps DO block END .

    RETURN          reduce using rule 97 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    $end            reduce using rule 97 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    END             reduce using rule 97 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    UNTIL           reduce using rule 97 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    ELSEIF          reduce using rule 97 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    ELSE            reduce using rule 97 (struct_for_in -> FOR list_names IN list_exps DO block END .)


state 177

    (92) else_if -> ELSEIF exp THEN block .

    ELSE            reduce using rule 92 (else_if -> ELSEIF exp THEN block .)
    ELSEIF          reduce using rule 92 (else_if -> ELSEIF exp THEN block .)


state 178

    (96) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp . DO block END
    (47) exp -> exp . op_bin exp
    (70) op_bin -> . PLUS
    (71) op_bin -> . MINUS
    (72) op_bin -> . TIMES
    (73) op_bin -> . DIVIDE
    (74) op_bin -> . EXPO
    (75) op_bin -> . PERCENTUAL
    (76) op_bin -> . CONCAT
    (77) op_bin -> . LT
    (78) op_bin -> . LTEQUALS
    (79) op_bin -> . GT
    (80) op_bin -> . GTEQUALS
    (81) op_bin -> . EQUALS
    (82) op_bin -> . DIF
    (83) op_bin -> . AND
    (84) op_bin -> . OR

    DO              shift and go to state 180
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    TIMES           shift and go to state 94
    DIVIDE          shift and go to state 95
    EXPO            shift and go to state 96
    PERCENTUAL      shift and go to state 97
    CONCAT          shift and go to state 98
    LT              shift and go to state 99
    LTEQUALS        shift and go to state 100
    GT              shift and go to state 101
    GTEQUALS        shift and go to state 102
    EQUALS          shift and go to state 103
    DIF             shift and go to state 104
    AND             shift and go to state 105
    OR              shift and go to state 106

    op_bin                         shift and go to state 91

state 179

    (95) struct_for -> FOR NAME ATRIB exp COMMA exp DO block . END

    END             shift and go to state 181


state 180

    (96) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . COMMA
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . GOTO NAME
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . function
    (17) command -> . local_function
    (18) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var SEMICOLON list_vars
    (52) call_function -> . exp_prefix args
    (53) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (94) struct_while -> . WHILE exp DO block END
    (98) struct_repeat -> . REPEAT block UNTIL exp
    (89) if -> . IF exp THEN block else_ifs else END
    (95) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (96) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (97) struct_for_in -> . FOR list_names IN list_exps DO block END
    (88) function -> . FUNCTION name_function body_function
    (99) local_function -> . FUNCTION name_function body_function
    (69) local_var -> . LOCAL list_names ATRIB list_exps
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (49) exp_prefix -> . VAR
    (50) exp_prefix -> . call_function
    (51) exp_prefix -> . LPAREN exp RPAREN
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    COMMA           shift and go to state 4
    BREAK           shift and go to state 8
    GOTO            shift and go to state 9
    DO              shift and go to state 11
    DUALCOLON       shift and go to state 22
    WHILE           shift and go to state 23
    REPEAT          shift and go to state 24
    IF              shift and go to state 25
    FOR             shift and go to state 26
    FUNCTION        shift and go to state 27
    LOCAL           shift and go to state 28
    NAME            shift and go to state 10
    VAR             shift and go to state 30
    LPAREN          shift and go to state 31

    block                          shift and go to state 182
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 12
    struct_repeat                  shift and go to state 13
    if                             shift and go to state 14
    struct_for                     shift and go to state 15
    struct_for_in                  shift and go to state 16
    function                       shift and go to state 17
    local_function                 shift and go to state 18
    local_var                      shift and go to state 19
    var                            shift and go to state 20
    exp_prefix                     shift and go to state 21
    prefix_exp                     shift and go to state 29

state 181

    (95) struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .

    RETURN          reduce using rule 95 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    $end            reduce using rule 95 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    END             reduce using rule 95 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    UNTIL           reduce using rule 95 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    ELSEIF          reduce using rule 95 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    ELSE            reduce using rule 95 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)


state 182

    (96) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block . END

    END             shift and go to state 183


state 183

    (96) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .

    RETURN          reduce using rule 96 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    $end            reduce using rule 96 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    END             reduce using rule 96 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    UNTIL           reduce using rule 96 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    ELSEIF          reduce using rule 96 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    ELSE            reduce using rule 96 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 68 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for EXPO in state 107 resolved as shift
WARNING: shift/reduce conflict for PERCENTUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 107 resolved as shift
WARNING: shift/reduce conflict for LT in state 107 resolved as shift
WARNING: shift/reduce conflict for LTEQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for GT in state 107 resolved as shift
WARNING: shift/reduce conflict for GTEQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 107 resolved as shift
WARNING: shift/reduce conflict for DIF in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for EXPO in state 133 resolved as shift
WARNING: shift/reduce conflict for PERCENTUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 133 resolved as shift
WARNING: shift/reduce conflict for LT in state 133 resolved as shift
WARNING: shift/reduce conflict for LTEQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for GT in state 133 resolved as shift
WARNING: shift/reduce conflict for GTEQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for DIF in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: reduce/reduce conflict in state 116 resolved using rule (function -> FUNCTION name_function body_function)
WARNING: rejected rule (local_function -> FUNCTION name_function body_function) in state 116
WARNING: Rule (local_function -> FUNCTION name_function body_function) is never reduced
