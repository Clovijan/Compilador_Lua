Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSEIF

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> command
Rule 3     block -> command block
Rule 4     command -> SEMICOLON
Rule 5     command -> list_vars ATRIB list_exps
Rule 6     command -> call_function
Rule 7     command -> rotulo
Rule 8     command -> BREAK
Rule 9     command -> DO block END
Rule 10    command -> struct_while
Rule 11    command -> struct_repeat
Rule 12    command -> if
Rule 13    command -> struct_for
Rule 14    command -> struct_for_in
Rule 15    command -> def_function
Rule 16    command -> local_var
Rule 17    command -> command_ret
Rule 18    list_command -> command list_command
Rule 19    list_command -> command
Rule 20    command_ret -> RETURN
Rule 21    command_ret -> RETURN list_exps
Rule 22    command_ret -> RETURN list_exps SEMICOLON
Rule 23    rotulo -> DUALCOLON NAME DUALCOLON
Rule 24    name_function -> NAME
Rule 25    name_function -> NAME DOT NAME
Rule 26    name_function -> NAME COLON NAME
Rule 27    list_vars -> var
Rule 28    list_vars -> var COMMA list_vars
Rule 29    var -> NAME
Rule 30    var -> prefix_exp LCOLCH exp RCOLCH
Rule 31    var -> prefix_exp DOT NAME
Rule 32    prefix_exp -> var
Rule 33    prefix_exp -> call_function
Rule 34    prefix_exp -> LPAREN exp RPAREN
Rule 35    list_names -> NAME COMMA list_names
Rule 36    list_names -> NAME
Rule 37    list_exps -> exp COMMA list_exps
Rule 38    list_exps -> exp
Rule 39    exp -> NIL
Rule 40    exp -> FALSE
Rule 41    exp -> TRUE
Rule 42    exp -> NUMBER
Rule 43    exp -> STRING
Rule 44    exp -> VARARGS
Rule 45    exp -> def_function
Rule 46    exp -> exp_prefix
Rule 47    exp -> construct_table
Rule 48    exp -> TAG exp
Rule 49    exp -> MINUS exp
Rule 50    exp -> NOT exp
Rule 51    exp -> exp PLUS exp
Rule 52    exp -> exp MINUS exp
Rule 53    exp -> exp TIMES exp
Rule 54    exp -> exp DIVIDE exp
Rule 55    exp -> exp EXPO exp
Rule 56    exp -> exp PERCENTUAL exp
Rule 57    exp -> exp CONCAT exp
Rule 58    exp -> exp LT exp
Rule 59    exp -> exp LTEQUALS exp
Rule 60    exp -> exp GT exp
Rule 61    exp -> exp GTEQUALS exp
Rule 62    exp -> exp EQUALS exp
Rule 63    exp -> exp DIF exp
Rule 64    exp -> exp AND exp
Rule 65    exp -> exp OR exp
Rule 66    exp_prefix -> VAR
Rule 67    exp_prefix -> call_function
Rule 68    exp_prefix -> LPAREN exp RPAREN
Rule 69    call_function -> exp_prefix args
Rule 70    call_function -> exp_prefix COLON NAME args
Rule 71    args -> LPAREN list_exps RPAREN
Rule 72    args -> construct_table
Rule 73    def_function -> function
Rule 74    def_function -> local_function
Rule 75    body_function -> LPAREN list_pars RPAREN block END
Rule 76    list_pars -> list_names COMMA VARARGS
Rule 77    list_pars -> VARARGS
Rule 78    construct_table -> LBRACE list_fields RBRACE
Rule 79    construct_table -> LBRACE RBRACE
Rule 80    list_fields -> field
Rule 81    list_fields -> field separator_fields list_fields
Rule 82    list_fields -> field_empty
Rule 83    list_fields -> field_empty separator_fields list_fields
Rule 84    field_empty -> LCOLCH exp RCOLCH
Rule 85    field_empty -> NAME
Rule 86    field -> LCOLCH exp RCOLCH ATRIB exp
Rule 87    field -> NAME ATRIB exp
Rule 88    separator_fields -> COMMA
Rule 89    separator_fields -> SEMICOLON
Rule 90    local_var -> LOCAL list_names ATRIB list_exps
Rule 91    local_var -> LOCAL NAME ATRIB exp
Rule 92    function -> FUNCTION body_function
Rule 93    if -> IF exp THEN block END
Rule 94    if -> IF exp THEN else
Rule 95    else -> ELSE block END
Rule 96    struct_while -> WHILE exp DO block END
Rule 97    struct_for -> FOR NAME ATRIB exp COMMA exp DO block END
Rule 98    struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
Rule 99    struct_for_in -> FOR list_names IN list_exps DO block END
Rule 100   struct_repeat -> REPEAT block UNTIL exp
Rule 101   local_function -> LOCAL FUNCTION name_function body_function

Terminals, with rules where they appear

AND                  : 64
ATRIB                : 5 86 87 90 91 97 98
BREAK                : 8
COLON                : 26 70
COMMA                : 28 35 37 76 88 97 98 98
CONCAT               : 57
DIF                  : 63
DIVIDE               : 54
DO                   : 9 96 97 98 99
DOT                  : 25 31
DUALCOLON            : 23 23
ELSE                 : 95
ELSEIF               : 
END                  : 9 75 93 95 96 97 98 99
EQUALS               : 62
EXPO                 : 55
FALSE                : 40
FOR                  : 97 98 99
FUNCTION             : 92 101
GT                   : 60
GTEQUALS             : 61
IF                   : 93 94
IN                   : 99
LBRACE               : 78 79
LCOLCH               : 30 84 86
LOCAL                : 90 91 101
LPAREN               : 34 68 71 75
LT                   : 58
LTEQUALS             : 59
MINUS                : 49 52
NAME                 : 23 24 25 25 26 26 29 31 35 36 70 85 87 91 97 98
NIL                  : 39
NOT                  : 50
NUMBER               : 42
OR                   : 65
PERCENTUAL           : 56
PLUS                 : 51
RBRACE               : 78 79
RCOLCH               : 30 84 86
REPEAT               : 100
RETURN               : 20 21 22
RPAREN               : 34 68 71 75
SEMICOLON            : 4 22 89
STRING               : 43
TAG                  : 48
THEN                 : 93 94
TIMES                : 53
TRUE                 : 41
UNTIL                : 100
VAR                  : 66
VARARGS              : 44 76 77
WHILE                : 96
error                : 

Nonterminals, with rules where they appear

args                 : 69 70
block                : 1 3 9 75 93 95 96 97 98 99 100
body_function        : 92 101
call_function        : 6 33 67
command              : 2 3 18 19
command_ret          : 17
construct_table      : 47 72
def_function         : 15 45
else                 : 94
exp                  : 30 34 37 38 48 49 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 68 84 86 86 87 91 93 94 96 97 97 98 98 98 100
exp_prefix           : 46 69 70
field                : 80 81
field_empty          : 82 83
function             : 73
if                   : 12
list_command         : 18
list_exps            : 5 21 22 37 71 90 99
list_fields          : 78 81 83
list_names           : 35 76 90 99
list_pars            : 75
list_vars            : 5 28
local_function       : 74
local_var            : 16
name_function        : 101
prefix_exp           : 30 31
program              : 0
rotulo               : 7
separator_fields     : 81 83
struct_for           : 13
struct_for_in        : 14
struct_repeat        : 11
struct_while         : 10
var                  : 27 28 32

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    program                        shift and go to state 1
    block                          shift and go to state 2
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> command .
    (3) block -> command . block
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    $end            reduce using rule 2 (block -> command .)
    END             reduce using rule 2 (block -> command .)
    UNTIL           reduce using rule 2 (block -> command .)
    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    command                        shift and go to state 3
    block                          shift and go to state 34
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 4

    (4) command -> SEMICOLON .

    SEMICOLON       reduce using rule 4 (command -> SEMICOLON .)
    BREAK           reduce using rule 4 (command -> SEMICOLON .)
    DO              reduce using rule 4 (command -> SEMICOLON .)
    DUALCOLON       reduce using rule 4 (command -> SEMICOLON .)
    WHILE           reduce using rule 4 (command -> SEMICOLON .)
    REPEAT          reduce using rule 4 (command -> SEMICOLON .)
    IF              reduce using rule 4 (command -> SEMICOLON .)
    FOR             reduce using rule 4 (command -> SEMICOLON .)
    LOCAL           reduce using rule 4 (command -> SEMICOLON .)
    RETURN          reduce using rule 4 (command -> SEMICOLON .)
    NAME            reduce using rule 4 (command -> SEMICOLON .)
    VAR             reduce using rule 4 (command -> SEMICOLON .)
    LPAREN          reduce using rule 4 (command -> SEMICOLON .)
    FUNCTION        reduce using rule 4 (command -> SEMICOLON .)
    $end            reduce using rule 4 (command -> SEMICOLON .)
    END             reduce using rule 4 (command -> SEMICOLON .)
    UNTIL           reduce using rule 4 (command -> SEMICOLON .)


state 5

    (5) command -> list_vars . ATRIB list_exps

    ATRIB           shift and go to state 35


state 6

    (6) command -> call_function .
    (67) exp_prefix -> call_function .
    (33) prefix_exp -> call_function .

  ! reduce/reduce conflict for LPAREN resolved using rule 6 (command -> call_function .)
    SEMICOLON       reduce using rule 6 (command -> call_function .)
    BREAK           reduce using rule 6 (command -> call_function .)
    DO              reduce using rule 6 (command -> call_function .)
    DUALCOLON       reduce using rule 6 (command -> call_function .)
    WHILE           reduce using rule 6 (command -> call_function .)
    REPEAT          reduce using rule 6 (command -> call_function .)
    IF              reduce using rule 6 (command -> call_function .)
    FOR             reduce using rule 6 (command -> call_function .)
    LOCAL           reduce using rule 6 (command -> call_function .)
    RETURN          reduce using rule 6 (command -> call_function .)
    NAME            reduce using rule 6 (command -> call_function .)
    VAR             reduce using rule 6 (command -> call_function .)
    LPAREN          reduce using rule 6 (command -> call_function .)
    FUNCTION        reduce using rule 6 (command -> call_function .)
    $end            reduce using rule 6 (command -> call_function .)
    END             reduce using rule 6 (command -> call_function .)
    UNTIL           reduce using rule 6 (command -> call_function .)
    COLON           reduce using rule 67 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 67 (exp_prefix -> call_function .)
    LCOLCH          reduce using rule 33 (prefix_exp -> call_function .)
    DOT             reduce using rule 33 (prefix_exp -> call_function .)

  ! LPAREN          [ reduce using rule 67 (exp_prefix -> call_function .) ]


state 7

    (7) command -> rotulo .

    SEMICOLON       reduce using rule 7 (command -> rotulo .)
    BREAK           reduce using rule 7 (command -> rotulo .)
    DO              reduce using rule 7 (command -> rotulo .)
    DUALCOLON       reduce using rule 7 (command -> rotulo .)
    WHILE           reduce using rule 7 (command -> rotulo .)
    REPEAT          reduce using rule 7 (command -> rotulo .)
    IF              reduce using rule 7 (command -> rotulo .)
    FOR             reduce using rule 7 (command -> rotulo .)
    LOCAL           reduce using rule 7 (command -> rotulo .)
    RETURN          reduce using rule 7 (command -> rotulo .)
    NAME            reduce using rule 7 (command -> rotulo .)
    VAR             reduce using rule 7 (command -> rotulo .)
    LPAREN          reduce using rule 7 (command -> rotulo .)
    FUNCTION        reduce using rule 7 (command -> rotulo .)
    $end            reduce using rule 7 (command -> rotulo .)
    END             reduce using rule 7 (command -> rotulo .)
    UNTIL           reduce using rule 7 (command -> rotulo .)


state 8

    (8) command -> BREAK .

    SEMICOLON       reduce using rule 8 (command -> BREAK .)
    BREAK           reduce using rule 8 (command -> BREAK .)
    DO              reduce using rule 8 (command -> BREAK .)
    DUALCOLON       reduce using rule 8 (command -> BREAK .)
    WHILE           reduce using rule 8 (command -> BREAK .)
    REPEAT          reduce using rule 8 (command -> BREAK .)
    IF              reduce using rule 8 (command -> BREAK .)
    FOR             reduce using rule 8 (command -> BREAK .)
    LOCAL           reduce using rule 8 (command -> BREAK .)
    RETURN          reduce using rule 8 (command -> BREAK .)
    NAME            reduce using rule 8 (command -> BREAK .)
    VAR             reduce using rule 8 (command -> BREAK .)
    LPAREN          reduce using rule 8 (command -> BREAK .)
    FUNCTION        reduce using rule 8 (command -> BREAK .)
    $end            reduce using rule 8 (command -> BREAK .)
    END             reduce using rule 8 (command -> BREAK .)
    UNTIL           reduce using rule 8 (command -> BREAK .)


state 9

    (9) command -> DO . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    block                          shift and go to state 36
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 10

    (10) command -> struct_while .

    SEMICOLON       reduce using rule 10 (command -> struct_while .)
    BREAK           reduce using rule 10 (command -> struct_while .)
    DO              reduce using rule 10 (command -> struct_while .)
    DUALCOLON       reduce using rule 10 (command -> struct_while .)
    WHILE           reduce using rule 10 (command -> struct_while .)
    REPEAT          reduce using rule 10 (command -> struct_while .)
    IF              reduce using rule 10 (command -> struct_while .)
    FOR             reduce using rule 10 (command -> struct_while .)
    LOCAL           reduce using rule 10 (command -> struct_while .)
    RETURN          reduce using rule 10 (command -> struct_while .)
    NAME            reduce using rule 10 (command -> struct_while .)
    VAR             reduce using rule 10 (command -> struct_while .)
    LPAREN          reduce using rule 10 (command -> struct_while .)
    FUNCTION        reduce using rule 10 (command -> struct_while .)
    $end            reduce using rule 10 (command -> struct_while .)
    END             reduce using rule 10 (command -> struct_while .)
    UNTIL           reduce using rule 10 (command -> struct_while .)


state 11

    (11) command -> struct_repeat .

    SEMICOLON       reduce using rule 11 (command -> struct_repeat .)
    BREAK           reduce using rule 11 (command -> struct_repeat .)
    DO              reduce using rule 11 (command -> struct_repeat .)
    DUALCOLON       reduce using rule 11 (command -> struct_repeat .)
    WHILE           reduce using rule 11 (command -> struct_repeat .)
    REPEAT          reduce using rule 11 (command -> struct_repeat .)
    IF              reduce using rule 11 (command -> struct_repeat .)
    FOR             reduce using rule 11 (command -> struct_repeat .)
    LOCAL           reduce using rule 11 (command -> struct_repeat .)
    RETURN          reduce using rule 11 (command -> struct_repeat .)
    NAME            reduce using rule 11 (command -> struct_repeat .)
    VAR             reduce using rule 11 (command -> struct_repeat .)
    LPAREN          reduce using rule 11 (command -> struct_repeat .)
    FUNCTION        reduce using rule 11 (command -> struct_repeat .)
    $end            reduce using rule 11 (command -> struct_repeat .)
    END             reduce using rule 11 (command -> struct_repeat .)
    UNTIL           reduce using rule 11 (command -> struct_repeat .)


state 12

    (12) command -> if .

    SEMICOLON       reduce using rule 12 (command -> if .)
    BREAK           reduce using rule 12 (command -> if .)
    DO              reduce using rule 12 (command -> if .)
    DUALCOLON       reduce using rule 12 (command -> if .)
    WHILE           reduce using rule 12 (command -> if .)
    REPEAT          reduce using rule 12 (command -> if .)
    IF              reduce using rule 12 (command -> if .)
    FOR             reduce using rule 12 (command -> if .)
    LOCAL           reduce using rule 12 (command -> if .)
    RETURN          reduce using rule 12 (command -> if .)
    NAME            reduce using rule 12 (command -> if .)
    VAR             reduce using rule 12 (command -> if .)
    LPAREN          reduce using rule 12 (command -> if .)
    FUNCTION        reduce using rule 12 (command -> if .)
    $end            reduce using rule 12 (command -> if .)
    END             reduce using rule 12 (command -> if .)
    UNTIL           reduce using rule 12 (command -> if .)


state 13

    (13) command -> struct_for .

    SEMICOLON       reduce using rule 13 (command -> struct_for .)
    BREAK           reduce using rule 13 (command -> struct_for .)
    DO              reduce using rule 13 (command -> struct_for .)
    DUALCOLON       reduce using rule 13 (command -> struct_for .)
    WHILE           reduce using rule 13 (command -> struct_for .)
    REPEAT          reduce using rule 13 (command -> struct_for .)
    IF              reduce using rule 13 (command -> struct_for .)
    FOR             reduce using rule 13 (command -> struct_for .)
    LOCAL           reduce using rule 13 (command -> struct_for .)
    RETURN          reduce using rule 13 (command -> struct_for .)
    NAME            reduce using rule 13 (command -> struct_for .)
    VAR             reduce using rule 13 (command -> struct_for .)
    LPAREN          reduce using rule 13 (command -> struct_for .)
    FUNCTION        reduce using rule 13 (command -> struct_for .)
    $end            reduce using rule 13 (command -> struct_for .)
    END             reduce using rule 13 (command -> struct_for .)
    UNTIL           reduce using rule 13 (command -> struct_for .)


state 14

    (14) command -> struct_for_in .

    SEMICOLON       reduce using rule 14 (command -> struct_for_in .)
    BREAK           reduce using rule 14 (command -> struct_for_in .)
    DO              reduce using rule 14 (command -> struct_for_in .)
    DUALCOLON       reduce using rule 14 (command -> struct_for_in .)
    WHILE           reduce using rule 14 (command -> struct_for_in .)
    REPEAT          reduce using rule 14 (command -> struct_for_in .)
    IF              reduce using rule 14 (command -> struct_for_in .)
    FOR             reduce using rule 14 (command -> struct_for_in .)
    LOCAL           reduce using rule 14 (command -> struct_for_in .)
    RETURN          reduce using rule 14 (command -> struct_for_in .)
    NAME            reduce using rule 14 (command -> struct_for_in .)
    VAR             reduce using rule 14 (command -> struct_for_in .)
    LPAREN          reduce using rule 14 (command -> struct_for_in .)
    FUNCTION        reduce using rule 14 (command -> struct_for_in .)
    $end            reduce using rule 14 (command -> struct_for_in .)
    END             reduce using rule 14 (command -> struct_for_in .)
    UNTIL           reduce using rule 14 (command -> struct_for_in .)


state 15

    (15) command -> def_function .

    SEMICOLON       reduce using rule 15 (command -> def_function .)
    BREAK           reduce using rule 15 (command -> def_function .)
    DO              reduce using rule 15 (command -> def_function .)
    DUALCOLON       reduce using rule 15 (command -> def_function .)
    WHILE           reduce using rule 15 (command -> def_function .)
    REPEAT          reduce using rule 15 (command -> def_function .)
    IF              reduce using rule 15 (command -> def_function .)
    FOR             reduce using rule 15 (command -> def_function .)
    LOCAL           reduce using rule 15 (command -> def_function .)
    RETURN          reduce using rule 15 (command -> def_function .)
    NAME            reduce using rule 15 (command -> def_function .)
    VAR             reduce using rule 15 (command -> def_function .)
    LPAREN          reduce using rule 15 (command -> def_function .)
    FUNCTION        reduce using rule 15 (command -> def_function .)
    $end            reduce using rule 15 (command -> def_function .)
    END             reduce using rule 15 (command -> def_function .)
    UNTIL           reduce using rule 15 (command -> def_function .)


state 16

    (16) command -> local_var .

    SEMICOLON       reduce using rule 16 (command -> local_var .)
    BREAK           reduce using rule 16 (command -> local_var .)
    DO              reduce using rule 16 (command -> local_var .)
    DUALCOLON       reduce using rule 16 (command -> local_var .)
    WHILE           reduce using rule 16 (command -> local_var .)
    REPEAT          reduce using rule 16 (command -> local_var .)
    IF              reduce using rule 16 (command -> local_var .)
    FOR             reduce using rule 16 (command -> local_var .)
    LOCAL           reduce using rule 16 (command -> local_var .)
    RETURN          reduce using rule 16 (command -> local_var .)
    NAME            reduce using rule 16 (command -> local_var .)
    VAR             reduce using rule 16 (command -> local_var .)
    LPAREN          reduce using rule 16 (command -> local_var .)
    FUNCTION        reduce using rule 16 (command -> local_var .)
    $end            reduce using rule 16 (command -> local_var .)
    END             reduce using rule 16 (command -> local_var .)
    UNTIL           reduce using rule 16 (command -> local_var .)


state 17

    (17) command -> command_ret .

    SEMICOLON       reduce using rule 17 (command -> command_ret .)
    BREAK           reduce using rule 17 (command -> command_ret .)
    DO              reduce using rule 17 (command -> command_ret .)
    DUALCOLON       reduce using rule 17 (command -> command_ret .)
    WHILE           reduce using rule 17 (command -> command_ret .)
    REPEAT          reduce using rule 17 (command -> command_ret .)
    IF              reduce using rule 17 (command -> command_ret .)
    FOR             reduce using rule 17 (command -> command_ret .)
    LOCAL           reduce using rule 17 (command -> command_ret .)
    RETURN          reduce using rule 17 (command -> command_ret .)
    NAME            reduce using rule 17 (command -> command_ret .)
    VAR             reduce using rule 17 (command -> command_ret .)
    LPAREN          reduce using rule 17 (command -> command_ret .)
    FUNCTION        reduce using rule 17 (command -> command_ret .)
    $end            reduce using rule 17 (command -> command_ret .)
    END             reduce using rule 17 (command -> command_ret .)
    UNTIL           reduce using rule 17 (command -> command_ret .)


state 18

    (27) list_vars -> var .
    (28) list_vars -> var . COMMA list_vars
    (32) prefix_exp -> var .

    ATRIB           reduce using rule 27 (list_vars -> var .)
    COMMA           shift and go to state 37
    LCOLCH          reduce using rule 32 (prefix_exp -> var .)
    DOT             reduce using rule 32 (prefix_exp -> var .)


state 19

    (69) call_function -> exp_prefix . args
    (70) call_function -> exp_prefix . COLON NAME args
    (71) args -> . LPAREN list_exps RPAREN
    (72) args -> . construct_table
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE

    COLON           shift and go to state 39
    LPAREN          shift and go to state 40
    LBRACE          shift and go to state 42

    args                           shift and go to state 38
    construct_table                shift and go to state 41

state 20

    (29) var -> NAME .

    COMMA           reduce using rule 29 (var -> NAME .)
    ATRIB           reduce using rule 29 (var -> NAME .)
    LCOLCH          reduce using rule 29 (var -> NAME .)
    DOT             reduce using rule 29 (var -> NAME .)


state 21

    (23) rotulo -> DUALCOLON . NAME DUALCOLON

    NAME            shift and go to state 43


state 22

    (96) struct_while -> WHILE . exp DO block END
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 44
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 23

    (100) struct_repeat -> REPEAT . block UNTIL exp
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    block                          shift and go to state 60
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 24

    (93) if -> IF . exp THEN block END
    (94) if -> IF . exp THEN else
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 61
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 25

    (97) struct_for -> FOR . NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> FOR . NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> FOR . list_names IN list_exps DO block END
    (35) list_names -> . NAME COMMA list_names
    (36) list_names -> . NAME

    NAME            shift and go to state 62

    list_names                     shift and go to state 63

state 26

    (73) def_function -> function .

    SEMICOLON       reduce using rule 73 (def_function -> function .)
    BREAK           reduce using rule 73 (def_function -> function .)
    DO              reduce using rule 73 (def_function -> function .)
    DUALCOLON       reduce using rule 73 (def_function -> function .)
    WHILE           reduce using rule 73 (def_function -> function .)
    REPEAT          reduce using rule 73 (def_function -> function .)
    IF              reduce using rule 73 (def_function -> function .)
    FOR             reduce using rule 73 (def_function -> function .)
    LOCAL           reduce using rule 73 (def_function -> function .)
    RETURN          reduce using rule 73 (def_function -> function .)
    NAME            reduce using rule 73 (def_function -> function .)
    VAR             reduce using rule 73 (def_function -> function .)
    LPAREN          reduce using rule 73 (def_function -> function .)
    FUNCTION        reduce using rule 73 (def_function -> function .)
    $end            reduce using rule 73 (def_function -> function .)
    END             reduce using rule 73 (def_function -> function .)
    UNTIL           reduce using rule 73 (def_function -> function .)
    PLUS            reduce using rule 73 (def_function -> function .)
    MINUS           reduce using rule 73 (def_function -> function .)
    TIMES           reduce using rule 73 (def_function -> function .)
    DIVIDE          reduce using rule 73 (def_function -> function .)
    EXPO            reduce using rule 73 (def_function -> function .)
    PERCENTUAL      reduce using rule 73 (def_function -> function .)
    CONCAT          reduce using rule 73 (def_function -> function .)
    LT              reduce using rule 73 (def_function -> function .)
    LTEQUALS        reduce using rule 73 (def_function -> function .)
    GT              reduce using rule 73 (def_function -> function .)
    GTEQUALS        reduce using rule 73 (def_function -> function .)
    EQUALS          reduce using rule 73 (def_function -> function .)
    DIF             reduce using rule 73 (def_function -> function .)
    AND             reduce using rule 73 (def_function -> function .)
    OR              reduce using rule 73 (def_function -> function .)
    THEN            reduce using rule 73 (def_function -> function .)
    COMMA           reduce using rule 73 (def_function -> function .)
    RPAREN          reduce using rule 73 (def_function -> function .)
    RCOLCH          reduce using rule 73 (def_function -> function .)
    RBRACE          reduce using rule 73 (def_function -> function .)


state 27

    (74) def_function -> local_function .

    SEMICOLON       reduce using rule 74 (def_function -> local_function .)
    BREAK           reduce using rule 74 (def_function -> local_function .)
    DO              reduce using rule 74 (def_function -> local_function .)
    DUALCOLON       reduce using rule 74 (def_function -> local_function .)
    WHILE           reduce using rule 74 (def_function -> local_function .)
    REPEAT          reduce using rule 74 (def_function -> local_function .)
    IF              reduce using rule 74 (def_function -> local_function .)
    FOR             reduce using rule 74 (def_function -> local_function .)
    LOCAL           reduce using rule 74 (def_function -> local_function .)
    RETURN          reduce using rule 74 (def_function -> local_function .)
    NAME            reduce using rule 74 (def_function -> local_function .)
    VAR             reduce using rule 74 (def_function -> local_function .)
    LPAREN          reduce using rule 74 (def_function -> local_function .)
    FUNCTION        reduce using rule 74 (def_function -> local_function .)
    $end            reduce using rule 74 (def_function -> local_function .)
    END             reduce using rule 74 (def_function -> local_function .)
    UNTIL           reduce using rule 74 (def_function -> local_function .)
    PLUS            reduce using rule 74 (def_function -> local_function .)
    MINUS           reduce using rule 74 (def_function -> local_function .)
    TIMES           reduce using rule 74 (def_function -> local_function .)
    DIVIDE          reduce using rule 74 (def_function -> local_function .)
    EXPO            reduce using rule 74 (def_function -> local_function .)
    PERCENTUAL      reduce using rule 74 (def_function -> local_function .)
    CONCAT          reduce using rule 74 (def_function -> local_function .)
    LT              reduce using rule 74 (def_function -> local_function .)
    LTEQUALS        reduce using rule 74 (def_function -> local_function .)
    GT              reduce using rule 74 (def_function -> local_function .)
    GTEQUALS        reduce using rule 74 (def_function -> local_function .)
    EQUALS          reduce using rule 74 (def_function -> local_function .)
    DIF             reduce using rule 74 (def_function -> local_function .)
    AND             reduce using rule 74 (def_function -> local_function .)
    OR              reduce using rule 74 (def_function -> local_function .)
    THEN            reduce using rule 74 (def_function -> local_function .)
    COMMA           reduce using rule 74 (def_function -> local_function .)
    RPAREN          reduce using rule 74 (def_function -> local_function .)
    RCOLCH          reduce using rule 74 (def_function -> local_function .)
    RBRACE          reduce using rule 74 (def_function -> local_function .)


state 28

    (90) local_var -> LOCAL . list_names ATRIB list_exps
    (91) local_var -> LOCAL . NAME ATRIB exp
    (101) local_function -> LOCAL . FUNCTION name_function body_function
    (35) list_names -> . NAME COMMA list_names
    (36) list_names -> . NAME

    NAME            shift and go to state 65
    FUNCTION        shift and go to state 66

    list_names                     shift and go to state 64

state 29

    (20) command_ret -> RETURN .
    (21) command_ret -> RETURN . list_exps
    (22) command_ret -> RETURN . list_exps SEMICOLON
    (37) list_exps -> . exp COMMA list_exps
    (38) list_exps -> . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for LOCAL resolved as shift
    SEMICOLON       reduce using rule 20 (command_ret -> RETURN .)
    BREAK           reduce using rule 20 (command_ret -> RETURN .)
    DO              reduce using rule 20 (command_ret -> RETURN .)
    DUALCOLON       reduce using rule 20 (command_ret -> RETURN .)
    WHILE           reduce using rule 20 (command_ret -> RETURN .)
    REPEAT          reduce using rule 20 (command_ret -> RETURN .)
    IF              reduce using rule 20 (command_ret -> RETURN .)
    FOR             reduce using rule 20 (command_ret -> RETURN .)
    RETURN          reduce using rule 20 (command_ret -> RETURN .)
    NAME            reduce using rule 20 (command_ret -> RETURN .)
    $end            reduce using rule 20 (command_ret -> RETURN .)
    END             reduce using rule 20 (command_ret -> RETURN .)
    UNTIL           reduce using rule 20 (command_ret -> RETURN .)
    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

  ! LOCAL           [ reduce using rule 20 (command_ret -> RETURN .) ]
  ! VAR             [ reduce using rule 20 (command_ret -> RETURN .) ]
  ! LPAREN          [ reduce using rule 20 (command_ret -> RETURN .) ]
  ! FUNCTION        [ reduce using rule 20 (command_ret -> RETURN .) ]

    list_exps                      shift and go to state 67
    exp                            shift and go to state 68
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 30

    (30) var -> prefix_exp . LCOLCH exp RCOLCH
    (31) var -> prefix_exp . DOT NAME

    LCOLCH          shift and go to state 69
    DOT             shift and go to state 70


state 31

    (66) exp_prefix -> VAR .

    COLON           reduce using rule 66 (exp_prefix -> VAR .)
    LPAREN          reduce using rule 66 (exp_prefix -> VAR .)
    LBRACE          reduce using rule 66 (exp_prefix -> VAR .)
    DO              reduce using rule 66 (exp_prefix -> VAR .)
    PLUS            reduce using rule 66 (exp_prefix -> VAR .)
    MINUS           reduce using rule 66 (exp_prefix -> VAR .)
    TIMES           reduce using rule 66 (exp_prefix -> VAR .)
    DIVIDE          reduce using rule 66 (exp_prefix -> VAR .)
    EXPO            reduce using rule 66 (exp_prefix -> VAR .)
    PERCENTUAL      reduce using rule 66 (exp_prefix -> VAR .)
    CONCAT          reduce using rule 66 (exp_prefix -> VAR .)
    LT              reduce using rule 66 (exp_prefix -> VAR .)
    LTEQUALS        reduce using rule 66 (exp_prefix -> VAR .)
    GT              reduce using rule 66 (exp_prefix -> VAR .)
    GTEQUALS        reduce using rule 66 (exp_prefix -> VAR .)
    EQUALS          reduce using rule 66 (exp_prefix -> VAR .)
    DIF             reduce using rule 66 (exp_prefix -> VAR .)
    AND             reduce using rule 66 (exp_prefix -> VAR .)
    OR              reduce using rule 66 (exp_prefix -> VAR .)
    THEN            reduce using rule 66 (exp_prefix -> VAR .)
    COMMA           reduce using rule 66 (exp_prefix -> VAR .)
    SEMICOLON       reduce using rule 66 (exp_prefix -> VAR .)
    BREAK           reduce using rule 66 (exp_prefix -> VAR .)
    DUALCOLON       reduce using rule 66 (exp_prefix -> VAR .)
    WHILE           reduce using rule 66 (exp_prefix -> VAR .)
    REPEAT          reduce using rule 66 (exp_prefix -> VAR .)
    IF              reduce using rule 66 (exp_prefix -> VAR .)
    FOR             reduce using rule 66 (exp_prefix -> VAR .)
    LOCAL           reduce using rule 66 (exp_prefix -> VAR .)
    RETURN          reduce using rule 66 (exp_prefix -> VAR .)
    NAME            reduce using rule 66 (exp_prefix -> VAR .)
    VAR             reduce using rule 66 (exp_prefix -> VAR .)
    FUNCTION        reduce using rule 66 (exp_prefix -> VAR .)
    $end            reduce using rule 66 (exp_prefix -> VAR .)
    END             reduce using rule 66 (exp_prefix -> VAR .)
    UNTIL           reduce using rule 66 (exp_prefix -> VAR .)
    RPAREN          reduce using rule 66 (exp_prefix -> VAR .)
    RCOLCH          reduce using rule 66 (exp_prefix -> VAR .)
    RBRACE          reduce using rule 66 (exp_prefix -> VAR .)


state 32

    (68) exp_prefix -> LPAREN . exp RPAREN
    (34) prefix_exp -> LPAREN . exp RPAREN
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 71
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 33

    (92) function -> FUNCTION . body_function
    (75) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 73

    body_function                  shift and go to state 72

state 34

    (3) block -> command block .

    $end            reduce using rule 3 (block -> command block .)
    END             reduce using rule 3 (block -> command block .)
    UNTIL           reduce using rule 3 (block -> command block .)


state 35

    (5) command -> list_vars ATRIB . list_exps
    (37) list_exps -> . exp COMMA list_exps
    (38) list_exps -> . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    list_exps                      shift and go to state 74
    exp                            shift and go to state 68
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 36

    (9) command -> DO block . END

    END             shift and go to state 75


state 37

    (28) list_vars -> var COMMA . list_vars
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN

    NAME            shift and go to state 20
    LPAREN          shift and go to state 78
    VAR             shift and go to state 31

    var                            shift and go to state 18
    list_vars                      shift and go to state 76
    prefix_exp                     shift and go to state 30
    call_function                  shift and go to state 77
    exp_prefix                     shift and go to state 19

state 38

    (69) call_function -> exp_prefix args .

    SEMICOLON       reduce using rule 69 (call_function -> exp_prefix args .)
    BREAK           reduce using rule 69 (call_function -> exp_prefix args .)
    DO              reduce using rule 69 (call_function -> exp_prefix args .)
    DUALCOLON       reduce using rule 69 (call_function -> exp_prefix args .)
    WHILE           reduce using rule 69 (call_function -> exp_prefix args .)
    REPEAT          reduce using rule 69 (call_function -> exp_prefix args .)
    IF              reduce using rule 69 (call_function -> exp_prefix args .)
    FOR             reduce using rule 69 (call_function -> exp_prefix args .)
    LOCAL           reduce using rule 69 (call_function -> exp_prefix args .)
    RETURN          reduce using rule 69 (call_function -> exp_prefix args .)
    NAME            reduce using rule 69 (call_function -> exp_prefix args .)
    VAR             reduce using rule 69 (call_function -> exp_prefix args .)
    LPAREN          reduce using rule 69 (call_function -> exp_prefix args .)
    FUNCTION        reduce using rule 69 (call_function -> exp_prefix args .)
    $end            reduce using rule 69 (call_function -> exp_prefix args .)
    COLON           reduce using rule 69 (call_function -> exp_prefix args .)
    LBRACE          reduce using rule 69 (call_function -> exp_prefix args .)
    LCOLCH          reduce using rule 69 (call_function -> exp_prefix args .)
    DOT             reduce using rule 69 (call_function -> exp_prefix args .)
    END             reduce using rule 69 (call_function -> exp_prefix args .)
    UNTIL           reduce using rule 69 (call_function -> exp_prefix args .)
    PLUS            reduce using rule 69 (call_function -> exp_prefix args .)
    MINUS           reduce using rule 69 (call_function -> exp_prefix args .)
    TIMES           reduce using rule 69 (call_function -> exp_prefix args .)
    DIVIDE          reduce using rule 69 (call_function -> exp_prefix args .)
    EXPO            reduce using rule 69 (call_function -> exp_prefix args .)
    PERCENTUAL      reduce using rule 69 (call_function -> exp_prefix args .)
    CONCAT          reduce using rule 69 (call_function -> exp_prefix args .)
    LT              reduce using rule 69 (call_function -> exp_prefix args .)
    LTEQUALS        reduce using rule 69 (call_function -> exp_prefix args .)
    GT              reduce using rule 69 (call_function -> exp_prefix args .)
    GTEQUALS        reduce using rule 69 (call_function -> exp_prefix args .)
    EQUALS          reduce using rule 69 (call_function -> exp_prefix args .)
    DIF             reduce using rule 69 (call_function -> exp_prefix args .)
    AND             reduce using rule 69 (call_function -> exp_prefix args .)
    OR              reduce using rule 69 (call_function -> exp_prefix args .)
    THEN            reduce using rule 69 (call_function -> exp_prefix args .)
    COMMA           reduce using rule 69 (call_function -> exp_prefix args .)
    RPAREN          reduce using rule 69 (call_function -> exp_prefix args .)
    RCOLCH          reduce using rule 69 (call_function -> exp_prefix args .)
    RBRACE          reduce using rule 69 (call_function -> exp_prefix args .)


state 39

    (70) call_function -> exp_prefix COLON . NAME args

    NAME            shift and go to state 79


state 40

    (71) args -> LPAREN . list_exps RPAREN
    (37) list_exps -> . exp COMMA list_exps
    (38) list_exps -> . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    list_exps                      shift and go to state 80
    exp                            shift and go to state 68
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 41

    (72) args -> construct_table .

    SEMICOLON       reduce using rule 72 (args -> construct_table .)
    BREAK           reduce using rule 72 (args -> construct_table .)
    DO              reduce using rule 72 (args -> construct_table .)
    DUALCOLON       reduce using rule 72 (args -> construct_table .)
    WHILE           reduce using rule 72 (args -> construct_table .)
    REPEAT          reduce using rule 72 (args -> construct_table .)
    IF              reduce using rule 72 (args -> construct_table .)
    FOR             reduce using rule 72 (args -> construct_table .)
    LOCAL           reduce using rule 72 (args -> construct_table .)
    RETURN          reduce using rule 72 (args -> construct_table .)
    NAME            reduce using rule 72 (args -> construct_table .)
    VAR             reduce using rule 72 (args -> construct_table .)
    LPAREN          reduce using rule 72 (args -> construct_table .)
    FUNCTION        reduce using rule 72 (args -> construct_table .)
    $end            reduce using rule 72 (args -> construct_table .)
    COLON           reduce using rule 72 (args -> construct_table .)
    LBRACE          reduce using rule 72 (args -> construct_table .)
    LCOLCH          reduce using rule 72 (args -> construct_table .)
    DOT             reduce using rule 72 (args -> construct_table .)
    END             reduce using rule 72 (args -> construct_table .)
    UNTIL           reduce using rule 72 (args -> construct_table .)
    PLUS            reduce using rule 72 (args -> construct_table .)
    MINUS           reduce using rule 72 (args -> construct_table .)
    TIMES           reduce using rule 72 (args -> construct_table .)
    DIVIDE          reduce using rule 72 (args -> construct_table .)
    EXPO            reduce using rule 72 (args -> construct_table .)
    PERCENTUAL      reduce using rule 72 (args -> construct_table .)
    CONCAT          reduce using rule 72 (args -> construct_table .)
    LT              reduce using rule 72 (args -> construct_table .)
    LTEQUALS        reduce using rule 72 (args -> construct_table .)
    GT              reduce using rule 72 (args -> construct_table .)
    GTEQUALS        reduce using rule 72 (args -> construct_table .)
    EQUALS          reduce using rule 72 (args -> construct_table .)
    DIF             reduce using rule 72 (args -> construct_table .)
    AND             reduce using rule 72 (args -> construct_table .)
    OR              reduce using rule 72 (args -> construct_table .)
    THEN            reduce using rule 72 (args -> construct_table .)
    COMMA           reduce using rule 72 (args -> construct_table .)
    RPAREN          reduce using rule 72 (args -> construct_table .)
    RCOLCH          reduce using rule 72 (args -> construct_table .)
    RBRACE          reduce using rule 72 (args -> construct_table .)


state 42

    (78) construct_table -> LBRACE . list_fields RBRACE
    (79) construct_table -> LBRACE . RBRACE
    (80) list_fields -> . field
    (81) list_fields -> . field separator_fields list_fields
    (82) list_fields -> . field_empty
    (83) list_fields -> . field_empty separator_fields list_fields
    (86) field -> . LCOLCH exp RCOLCH ATRIB exp
    (87) field -> . NAME ATRIB exp
    (84) field_empty -> . LCOLCH exp RCOLCH
    (85) field_empty -> . NAME

    RBRACE          shift and go to state 82
    LCOLCH          shift and go to state 85
    NAME            shift and go to state 86

    list_fields                    shift and go to state 81
    field                          shift and go to state 83
    field_empty                    shift and go to state 84

state 43

    (23) rotulo -> DUALCOLON NAME . DUALCOLON

    DUALCOLON       shift and go to state 87


state 44

    (96) struct_while -> WHILE exp . DO block END
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              shift and go to state 88
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 45

    (39) exp -> NIL .

    DO              reduce using rule 39 (exp -> NIL .)
    PLUS            reduce using rule 39 (exp -> NIL .)
    MINUS           reduce using rule 39 (exp -> NIL .)
    TIMES           reduce using rule 39 (exp -> NIL .)
    DIVIDE          reduce using rule 39 (exp -> NIL .)
    EXPO            reduce using rule 39 (exp -> NIL .)
    PERCENTUAL      reduce using rule 39 (exp -> NIL .)
    CONCAT          reduce using rule 39 (exp -> NIL .)
    LT              reduce using rule 39 (exp -> NIL .)
    LTEQUALS        reduce using rule 39 (exp -> NIL .)
    GT              reduce using rule 39 (exp -> NIL .)
    GTEQUALS        reduce using rule 39 (exp -> NIL .)
    EQUALS          reduce using rule 39 (exp -> NIL .)
    DIF             reduce using rule 39 (exp -> NIL .)
    AND             reduce using rule 39 (exp -> NIL .)
    OR              reduce using rule 39 (exp -> NIL .)
    THEN            reduce using rule 39 (exp -> NIL .)
    COMMA           reduce using rule 39 (exp -> NIL .)
    SEMICOLON       reduce using rule 39 (exp -> NIL .)
    BREAK           reduce using rule 39 (exp -> NIL .)
    DUALCOLON       reduce using rule 39 (exp -> NIL .)
    WHILE           reduce using rule 39 (exp -> NIL .)
    REPEAT          reduce using rule 39 (exp -> NIL .)
    IF              reduce using rule 39 (exp -> NIL .)
    FOR             reduce using rule 39 (exp -> NIL .)
    LOCAL           reduce using rule 39 (exp -> NIL .)
    RETURN          reduce using rule 39 (exp -> NIL .)
    NAME            reduce using rule 39 (exp -> NIL .)
    VAR             reduce using rule 39 (exp -> NIL .)
    LPAREN          reduce using rule 39 (exp -> NIL .)
    FUNCTION        reduce using rule 39 (exp -> NIL .)
    $end            reduce using rule 39 (exp -> NIL .)
    END             reduce using rule 39 (exp -> NIL .)
    UNTIL           reduce using rule 39 (exp -> NIL .)
    RPAREN          reduce using rule 39 (exp -> NIL .)
    RCOLCH          reduce using rule 39 (exp -> NIL .)
    RBRACE          reduce using rule 39 (exp -> NIL .)


state 46

    (40) exp -> FALSE .

    DO              reduce using rule 40 (exp -> FALSE .)
    PLUS            reduce using rule 40 (exp -> FALSE .)
    MINUS           reduce using rule 40 (exp -> FALSE .)
    TIMES           reduce using rule 40 (exp -> FALSE .)
    DIVIDE          reduce using rule 40 (exp -> FALSE .)
    EXPO            reduce using rule 40 (exp -> FALSE .)
    PERCENTUAL      reduce using rule 40 (exp -> FALSE .)
    CONCAT          reduce using rule 40 (exp -> FALSE .)
    LT              reduce using rule 40 (exp -> FALSE .)
    LTEQUALS        reduce using rule 40 (exp -> FALSE .)
    GT              reduce using rule 40 (exp -> FALSE .)
    GTEQUALS        reduce using rule 40 (exp -> FALSE .)
    EQUALS          reduce using rule 40 (exp -> FALSE .)
    DIF             reduce using rule 40 (exp -> FALSE .)
    AND             reduce using rule 40 (exp -> FALSE .)
    OR              reduce using rule 40 (exp -> FALSE .)
    THEN            reduce using rule 40 (exp -> FALSE .)
    COMMA           reduce using rule 40 (exp -> FALSE .)
    SEMICOLON       reduce using rule 40 (exp -> FALSE .)
    BREAK           reduce using rule 40 (exp -> FALSE .)
    DUALCOLON       reduce using rule 40 (exp -> FALSE .)
    WHILE           reduce using rule 40 (exp -> FALSE .)
    REPEAT          reduce using rule 40 (exp -> FALSE .)
    IF              reduce using rule 40 (exp -> FALSE .)
    FOR             reduce using rule 40 (exp -> FALSE .)
    LOCAL           reduce using rule 40 (exp -> FALSE .)
    RETURN          reduce using rule 40 (exp -> FALSE .)
    NAME            reduce using rule 40 (exp -> FALSE .)
    VAR             reduce using rule 40 (exp -> FALSE .)
    LPAREN          reduce using rule 40 (exp -> FALSE .)
    FUNCTION        reduce using rule 40 (exp -> FALSE .)
    $end            reduce using rule 40 (exp -> FALSE .)
    END             reduce using rule 40 (exp -> FALSE .)
    UNTIL           reduce using rule 40 (exp -> FALSE .)
    RPAREN          reduce using rule 40 (exp -> FALSE .)
    RCOLCH          reduce using rule 40 (exp -> FALSE .)
    RBRACE          reduce using rule 40 (exp -> FALSE .)


state 47

    (41) exp -> TRUE .

    DO              reduce using rule 41 (exp -> TRUE .)
    PLUS            reduce using rule 41 (exp -> TRUE .)
    MINUS           reduce using rule 41 (exp -> TRUE .)
    TIMES           reduce using rule 41 (exp -> TRUE .)
    DIVIDE          reduce using rule 41 (exp -> TRUE .)
    EXPO            reduce using rule 41 (exp -> TRUE .)
    PERCENTUAL      reduce using rule 41 (exp -> TRUE .)
    CONCAT          reduce using rule 41 (exp -> TRUE .)
    LT              reduce using rule 41 (exp -> TRUE .)
    LTEQUALS        reduce using rule 41 (exp -> TRUE .)
    GT              reduce using rule 41 (exp -> TRUE .)
    GTEQUALS        reduce using rule 41 (exp -> TRUE .)
    EQUALS          reduce using rule 41 (exp -> TRUE .)
    DIF             reduce using rule 41 (exp -> TRUE .)
    AND             reduce using rule 41 (exp -> TRUE .)
    OR              reduce using rule 41 (exp -> TRUE .)
    THEN            reduce using rule 41 (exp -> TRUE .)
    COMMA           reduce using rule 41 (exp -> TRUE .)
    SEMICOLON       reduce using rule 41 (exp -> TRUE .)
    BREAK           reduce using rule 41 (exp -> TRUE .)
    DUALCOLON       reduce using rule 41 (exp -> TRUE .)
    WHILE           reduce using rule 41 (exp -> TRUE .)
    REPEAT          reduce using rule 41 (exp -> TRUE .)
    IF              reduce using rule 41 (exp -> TRUE .)
    FOR             reduce using rule 41 (exp -> TRUE .)
    LOCAL           reduce using rule 41 (exp -> TRUE .)
    RETURN          reduce using rule 41 (exp -> TRUE .)
    NAME            reduce using rule 41 (exp -> TRUE .)
    VAR             reduce using rule 41 (exp -> TRUE .)
    LPAREN          reduce using rule 41 (exp -> TRUE .)
    FUNCTION        reduce using rule 41 (exp -> TRUE .)
    $end            reduce using rule 41 (exp -> TRUE .)
    END             reduce using rule 41 (exp -> TRUE .)
    UNTIL           reduce using rule 41 (exp -> TRUE .)
    RPAREN          reduce using rule 41 (exp -> TRUE .)
    RCOLCH          reduce using rule 41 (exp -> TRUE .)
    RBRACE          reduce using rule 41 (exp -> TRUE .)


state 48

    (42) exp -> NUMBER .

    DO              reduce using rule 42 (exp -> NUMBER .)
    PLUS            reduce using rule 42 (exp -> NUMBER .)
    MINUS           reduce using rule 42 (exp -> NUMBER .)
    TIMES           reduce using rule 42 (exp -> NUMBER .)
    DIVIDE          reduce using rule 42 (exp -> NUMBER .)
    EXPO            reduce using rule 42 (exp -> NUMBER .)
    PERCENTUAL      reduce using rule 42 (exp -> NUMBER .)
    CONCAT          reduce using rule 42 (exp -> NUMBER .)
    LT              reduce using rule 42 (exp -> NUMBER .)
    LTEQUALS        reduce using rule 42 (exp -> NUMBER .)
    GT              reduce using rule 42 (exp -> NUMBER .)
    GTEQUALS        reduce using rule 42 (exp -> NUMBER .)
    EQUALS          reduce using rule 42 (exp -> NUMBER .)
    DIF             reduce using rule 42 (exp -> NUMBER .)
    AND             reduce using rule 42 (exp -> NUMBER .)
    OR              reduce using rule 42 (exp -> NUMBER .)
    THEN            reduce using rule 42 (exp -> NUMBER .)
    COMMA           reduce using rule 42 (exp -> NUMBER .)
    SEMICOLON       reduce using rule 42 (exp -> NUMBER .)
    BREAK           reduce using rule 42 (exp -> NUMBER .)
    DUALCOLON       reduce using rule 42 (exp -> NUMBER .)
    WHILE           reduce using rule 42 (exp -> NUMBER .)
    REPEAT          reduce using rule 42 (exp -> NUMBER .)
    IF              reduce using rule 42 (exp -> NUMBER .)
    FOR             reduce using rule 42 (exp -> NUMBER .)
    LOCAL           reduce using rule 42 (exp -> NUMBER .)
    RETURN          reduce using rule 42 (exp -> NUMBER .)
    NAME            reduce using rule 42 (exp -> NUMBER .)
    VAR             reduce using rule 42 (exp -> NUMBER .)
    LPAREN          reduce using rule 42 (exp -> NUMBER .)
    FUNCTION        reduce using rule 42 (exp -> NUMBER .)
    $end            reduce using rule 42 (exp -> NUMBER .)
    END             reduce using rule 42 (exp -> NUMBER .)
    UNTIL           reduce using rule 42 (exp -> NUMBER .)
    RPAREN          reduce using rule 42 (exp -> NUMBER .)
    RCOLCH          reduce using rule 42 (exp -> NUMBER .)
    RBRACE          reduce using rule 42 (exp -> NUMBER .)


state 49

    (43) exp -> STRING .

    DO              reduce using rule 43 (exp -> STRING .)
    PLUS            reduce using rule 43 (exp -> STRING .)
    MINUS           reduce using rule 43 (exp -> STRING .)
    TIMES           reduce using rule 43 (exp -> STRING .)
    DIVIDE          reduce using rule 43 (exp -> STRING .)
    EXPO            reduce using rule 43 (exp -> STRING .)
    PERCENTUAL      reduce using rule 43 (exp -> STRING .)
    CONCAT          reduce using rule 43 (exp -> STRING .)
    LT              reduce using rule 43 (exp -> STRING .)
    LTEQUALS        reduce using rule 43 (exp -> STRING .)
    GT              reduce using rule 43 (exp -> STRING .)
    GTEQUALS        reduce using rule 43 (exp -> STRING .)
    EQUALS          reduce using rule 43 (exp -> STRING .)
    DIF             reduce using rule 43 (exp -> STRING .)
    AND             reduce using rule 43 (exp -> STRING .)
    OR              reduce using rule 43 (exp -> STRING .)
    THEN            reduce using rule 43 (exp -> STRING .)
    COMMA           reduce using rule 43 (exp -> STRING .)
    SEMICOLON       reduce using rule 43 (exp -> STRING .)
    BREAK           reduce using rule 43 (exp -> STRING .)
    DUALCOLON       reduce using rule 43 (exp -> STRING .)
    WHILE           reduce using rule 43 (exp -> STRING .)
    REPEAT          reduce using rule 43 (exp -> STRING .)
    IF              reduce using rule 43 (exp -> STRING .)
    FOR             reduce using rule 43 (exp -> STRING .)
    LOCAL           reduce using rule 43 (exp -> STRING .)
    RETURN          reduce using rule 43 (exp -> STRING .)
    NAME            reduce using rule 43 (exp -> STRING .)
    VAR             reduce using rule 43 (exp -> STRING .)
    LPAREN          reduce using rule 43 (exp -> STRING .)
    FUNCTION        reduce using rule 43 (exp -> STRING .)
    $end            reduce using rule 43 (exp -> STRING .)
    END             reduce using rule 43 (exp -> STRING .)
    UNTIL           reduce using rule 43 (exp -> STRING .)
    RPAREN          reduce using rule 43 (exp -> STRING .)
    RCOLCH          reduce using rule 43 (exp -> STRING .)
    RBRACE          reduce using rule 43 (exp -> STRING .)


state 50

    (44) exp -> VARARGS .

    DO              reduce using rule 44 (exp -> VARARGS .)
    PLUS            reduce using rule 44 (exp -> VARARGS .)
    MINUS           reduce using rule 44 (exp -> VARARGS .)
    TIMES           reduce using rule 44 (exp -> VARARGS .)
    DIVIDE          reduce using rule 44 (exp -> VARARGS .)
    EXPO            reduce using rule 44 (exp -> VARARGS .)
    PERCENTUAL      reduce using rule 44 (exp -> VARARGS .)
    CONCAT          reduce using rule 44 (exp -> VARARGS .)
    LT              reduce using rule 44 (exp -> VARARGS .)
    LTEQUALS        reduce using rule 44 (exp -> VARARGS .)
    GT              reduce using rule 44 (exp -> VARARGS .)
    GTEQUALS        reduce using rule 44 (exp -> VARARGS .)
    EQUALS          reduce using rule 44 (exp -> VARARGS .)
    DIF             reduce using rule 44 (exp -> VARARGS .)
    AND             reduce using rule 44 (exp -> VARARGS .)
    OR              reduce using rule 44 (exp -> VARARGS .)
    THEN            reduce using rule 44 (exp -> VARARGS .)
    COMMA           reduce using rule 44 (exp -> VARARGS .)
    SEMICOLON       reduce using rule 44 (exp -> VARARGS .)
    BREAK           reduce using rule 44 (exp -> VARARGS .)
    DUALCOLON       reduce using rule 44 (exp -> VARARGS .)
    WHILE           reduce using rule 44 (exp -> VARARGS .)
    REPEAT          reduce using rule 44 (exp -> VARARGS .)
    IF              reduce using rule 44 (exp -> VARARGS .)
    FOR             reduce using rule 44 (exp -> VARARGS .)
    LOCAL           reduce using rule 44 (exp -> VARARGS .)
    RETURN          reduce using rule 44 (exp -> VARARGS .)
    NAME            reduce using rule 44 (exp -> VARARGS .)
    VAR             reduce using rule 44 (exp -> VARARGS .)
    LPAREN          reduce using rule 44 (exp -> VARARGS .)
    FUNCTION        reduce using rule 44 (exp -> VARARGS .)
    $end            reduce using rule 44 (exp -> VARARGS .)
    END             reduce using rule 44 (exp -> VARARGS .)
    UNTIL           reduce using rule 44 (exp -> VARARGS .)
    RPAREN          reduce using rule 44 (exp -> VARARGS .)
    RCOLCH          reduce using rule 44 (exp -> VARARGS .)
    RBRACE          reduce using rule 44 (exp -> VARARGS .)


state 51

    (45) exp -> def_function .

    DO              reduce using rule 45 (exp -> def_function .)
    PLUS            reduce using rule 45 (exp -> def_function .)
    MINUS           reduce using rule 45 (exp -> def_function .)
    TIMES           reduce using rule 45 (exp -> def_function .)
    DIVIDE          reduce using rule 45 (exp -> def_function .)
    EXPO            reduce using rule 45 (exp -> def_function .)
    PERCENTUAL      reduce using rule 45 (exp -> def_function .)
    CONCAT          reduce using rule 45 (exp -> def_function .)
    LT              reduce using rule 45 (exp -> def_function .)
    LTEQUALS        reduce using rule 45 (exp -> def_function .)
    GT              reduce using rule 45 (exp -> def_function .)
    GTEQUALS        reduce using rule 45 (exp -> def_function .)
    EQUALS          reduce using rule 45 (exp -> def_function .)
    DIF             reduce using rule 45 (exp -> def_function .)
    AND             reduce using rule 45 (exp -> def_function .)
    OR              reduce using rule 45 (exp -> def_function .)
    THEN            reduce using rule 45 (exp -> def_function .)
    COMMA           reduce using rule 45 (exp -> def_function .)
    SEMICOLON       reduce using rule 45 (exp -> def_function .)
    BREAK           reduce using rule 45 (exp -> def_function .)
    DUALCOLON       reduce using rule 45 (exp -> def_function .)
    WHILE           reduce using rule 45 (exp -> def_function .)
    REPEAT          reduce using rule 45 (exp -> def_function .)
    IF              reduce using rule 45 (exp -> def_function .)
    FOR             reduce using rule 45 (exp -> def_function .)
    LOCAL           reduce using rule 45 (exp -> def_function .)
    RETURN          reduce using rule 45 (exp -> def_function .)
    NAME            reduce using rule 45 (exp -> def_function .)
    VAR             reduce using rule 45 (exp -> def_function .)
    LPAREN          reduce using rule 45 (exp -> def_function .)
    FUNCTION        reduce using rule 45 (exp -> def_function .)
    $end            reduce using rule 45 (exp -> def_function .)
    END             reduce using rule 45 (exp -> def_function .)
    UNTIL           reduce using rule 45 (exp -> def_function .)
    RPAREN          reduce using rule 45 (exp -> def_function .)
    RCOLCH          reduce using rule 45 (exp -> def_function .)
    RBRACE          reduce using rule 45 (exp -> def_function .)


state 52

    (46) exp -> exp_prefix .
    (69) call_function -> exp_prefix . args
    (70) call_function -> exp_prefix . COLON NAME args
    (71) args -> . LPAREN list_exps RPAREN
    (72) args -> . construct_table
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE

  ! shift/reduce conflict for LPAREN resolved as shift
    DO              reduce using rule 46 (exp -> exp_prefix .)
    PLUS            reduce using rule 46 (exp -> exp_prefix .)
    MINUS           reduce using rule 46 (exp -> exp_prefix .)
    TIMES           reduce using rule 46 (exp -> exp_prefix .)
    DIVIDE          reduce using rule 46 (exp -> exp_prefix .)
    EXPO            reduce using rule 46 (exp -> exp_prefix .)
    PERCENTUAL      reduce using rule 46 (exp -> exp_prefix .)
    CONCAT          reduce using rule 46 (exp -> exp_prefix .)
    LT              reduce using rule 46 (exp -> exp_prefix .)
    LTEQUALS        reduce using rule 46 (exp -> exp_prefix .)
    GT              reduce using rule 46 (exp -> exp_prefix .)
    GTEQUALS        reduce using rule 46 (exp -> exp_prefix .)
    EQUALS          reduce using rule 46 (exp -> exp_prefix .)
    DIF             reduce using rule 46 (exp -> exp_prefix .)
    AND             reduce using rule 46 (exp -> exp_prefix .)
    OR              reduce using rule 46 (exp -> exp_prefix .)
    THEN            reduce using rule 46 (exp -> exp_prefix .)
    COMMA           reduce using rule 46 (exp -> exp_prefix .)
    SEMICOLON       reduce using rule 46 (exp -> exp_prefix .)
    BREAK           reduce using rule 46 (exp -> exp_prefix .)
    DUALCOLON       reduce using rule 46 (exp -> exp_prefix .)
    WHILE           reduce using rule 46 (exp -> exp_prefix .)
    REPEAT          reduce using rule 46 (exp -> exp_prefix .)
    IF              reduce using rule 46 (exp -> exp_prefix .)
    FOR             reduce using rule 46 (exp -> exp_prefix .)
    LOCAL           reduce using rule 46 (exp -> exp_prefix .)
    RETURN          reduce using rule 46 (exp -> exp_prefix .)
    NAME            reduce using rule 46 (exp -> exp_prefix .)
    VAR             reduce using rule 46 (exp -> exp_prefix .)
    FUNCTION        reduce using rule 46 (exp -> exp_prefix .)
    $end            reduce using rule 46 (exp -> exp_prefix .)
    END             reduce using rule 46 (exp -> exp_prefix .)
    UNTIL           reduce using rule 46 (exp -> exp_prefix .)
    RPAREN          reduce using rule 46 (exp -> exp_prefix .)
    RCOLCH          reduce using rule 46 (exp -> exp_prefix .)
    RBRACE          reduce using rule 46 (exp -> exp_prefix .)
    COLON           shift and go to state 39
    LPAREN          shift and go to state 40
    LBRACE          shift and go to state 42

  ! LPAREN          [ reduce using rule 46 (exp -> exp_prefix .) ]

    args                           shift and go to state 38
    construct_table                shift and go to state 41

state 53

    (47) exp -> construct_table .

    DO              reduce using rule 47 (exp -> construct_table .)
    PLUS            reduce using rule 47 (exp -> construct_table .)
    MINUS           reduce using rule 47 (exp -> construct_table .)
    TIMES           reduce using rule 47 (exp -> construct_table .)
    DIVIDE          reduce using rule 47 (exp -> construct_table .)
    EXPO            reduce using rule 47 (exp -> construct_table .)
    PERCENTUAL      reduce using rule 47 (exp -> construct_table .)
    CONCAT          reduce using rule 47 (exp -> construct_table .)
    LT              reduce using rule 47 (exp -> construct_table .)
    LTEQUALS        reduce using rule 47 (exp -> construct_table .)
    GT              reduce using rule 47 (exp -> construct_table .)
    GTEQUALS        reduce using rule 47 (exp -> construct_table .)
    EQUALS          reduce using rule 47 (exp -> construct_table .)
    DIF             reduce using rule 47 (exp -> construct_table .)
    AND             reduce using rule 47 (exp -> construct_table .)
    OR              reduce using rule 47 (exp -> construct_table .)
    THEN            reduce using rule 47 (exp -> construct_table .)
    COMMA           reduce using rule 47 (exp -> construct_table .)
    SEMICOLON       reduce using rule 47 (exp -> construct_table .)
    BREAK           reduce using rule 47 (exp -> construct_table .)
    DUALCOLON       reduce using rule 47 (exp -> construct_table .)
    WHILE           reduce using rule 47 (exp -> construct_table .)
    REPEAT          reduce using rule 47 (exp -> construct_table .)
    IF              reduce using rule 47 (exp -> construct_table .)
    FOR             reduce using rule 47 (exp -> construct_table .)
    LOCAL           reduce using rule 47 (exp -> construct_table .)
    RETURN          reduce using rule 47 (exp -> construct_table .)
    NAME            reduce using rule 47 (exp -> construct_table .)
    VAR             reduce using rule 47 (exp -> construct_table .)
    LPAREN          reduce using rule 47 (exp -> construct_table .)
    FUNCTION        reduce using rule 47 (exp -> construct_table .)
    $end            reduce using rule 47 (exp -> construct_table .)
    END             reduce using rule 47 (exp -> construct_table .)
    UNTIL           reduce using rule 47 (exp -> construct_table .)
    RPAREN          reduce using rule 47 (exp -> construct_table .)
    RCOLCH          reduce using rule 47 (exp -> construct_table .)
    RBRACE          reduce using rule 47 (exp -> construct_table .)


state 54

    (48) exp -> TAG . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 104
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 55

    (49) exp -> MINUS . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 105
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 56

    (50) exp -> NOT . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 106
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 57

    (67) exp_prefix -> call_function .

    COLON           reduce using rule 67 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 67 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 67 (exp_prefix -> call_function .)
    DO              reduce using rule 67 (exp_prefix -> call_function .)
    PLUS            reduce using rule 67 (exp_prefix -> call_function .)
    MINUS           reduce using rule 67 (exp_prefix -> call_function .)
    TIMES           reduce using rule 67 (exp_prefix -> call_function .)
    DIVIDE          reduce using rule 67 (exp_prefix -> call_function .)
    EXPO            reduce using rule 67 (exp_prefix -> call_function .)
    PERCENTUAL      reduce using rule 67 (exp_prefix -> call_function .)
    CONCAT          reduce using rule 67 (exp_prefix -> call_function .)
    LT              reduce using rule 67 (exp_prefix -> call_function .)
    LTEQUALS        reduce using rule 67 (exp_prefix -> call_function .)
    GT              reduce using rule 67 (exp_prefix -> call_function .)
    GTEQUALS        reduce using rule 67 (exp_prefix -> call_function .)
    EQUALS          reduce using rule 67 (exp_prefix -> call_function .)
    DIF             reduce using rule 67 (exp_prefix -> call_function .)
    AND             reduce using rule 67 (exp_prefix -> call_function .)
    OR              reduce using rule 67 (exp_prefix -> call_function .)
    THEN            reduce using rule 67 (exp_prefix -> call_function .)
    COMMA           reduce using rule 67 (exp_prefix -> call_function .)
    SEMICOLON       reduce using rule 67 (exp_prefix -> call_function .)
    BREAK           reduce using rule 67 (exp_prefix -> call_function .)
    DUALCOLON       reduce using rule 67 (exp_prefix -> call_function .)
    WHILE           reduce using rule 67 (exp_prefix -> call_function .)
    REPEAT          reduce using rule 67 (exp_prefix -> call_function .)
    IF              reduce using rule 67 (exp_prefix -> call_function .)
    FOR             reduce using rule 67 (exp_prefix -> call_function .)
    LOCAL           reduce using rule 67 (exp_prefix -> call_function .)
    RETURN          reduce using rule 67 (exp_prefix -> call_function .)
    NAME            reduce using rule 67 (exp_prefix -> call_function .)
    VAR             reduce using rule 67 (exp_prefix -> call_function .)
    FUNCTION        reduce using rule 67 (exp_prefix -> call_function .)
    $end            reduce using rule 67 (exp_prefix -> call_function .)
    END             reduce using rule 67 (exp_prefix -> call_function .)
    UNTIL           reduce using rule 67 (exp_prefix -> call_function .)
    RPAREN          reduce using rule 67 (exp_prefix -> call_function .)
    RCOLCH          reduce using rule 67 (exp_prefix -> call_function .)
    RBRACE          reduce using rule 67 (exp_prefix -> call_function .)


state 58

    (68) exp_prefix -> LPAREN . exp RPAREN
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 107
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 59

    (101) local_function -> LOCAL . FUNCTION name_function body_function

    FUNCTION        shift and go to state 66


state 60

    (100) struct_repeat -> REPEAT block . UNTIL exp

    UNTIL           shift and go to state 108


state 61

    (93) if -> IF exp . THEN block END
    (94) if -> IF exp . THEN else
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    THEN            shift and go to state 109
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 62

    (97) struct_for -> FOR NAME . ATRIB exp COMMA exp DO block END
    (98) struct_for -> FOR NAME . ATRIB exp COMMA exp COMMA exp DO block END
    (35) list_names -> NAME . COMMA list_names
    (36) list_names -> NAME .

    ATRIB           shift and go to state 110
    COMMA           shift and go to state 111
    IN              reduce using rule 36 (list_names -> NAME .)


state 63

    (99) struct_for_in -> FOR list_names . IN list_exps DO block END

    IN              shift and go to state 112


state 64

    (90) local_var -> LOCAL list_names . ATRIB list_exps

    ATRIB           shift and go to state 113


state 65

    (91) local_var -> LOCAL NAME . ATRIB exp
    (35) list_names -> NAME . COMMA list_names
    (36) list_names -> NAME .

  ! shift/reduce conflict for ATRIB resolved as shift
    ATRIB           shift and go to state 114
    COMMA           shift and go to state 111

  ! ATRIB           [ reduce using rule 36 (list_names -> NAME .) ]


state 66

    (101) local_function -> LOCAL FUNCTION . name_function body_function
    (24) name_function -> . NAME
    (25) name_function -> . NAME DOT NAME
    (26) name_function -> . NAME COLON NAME

    NAME            shift and go to state 116

    name_function                  shift and go to state 115

state 67

    (21) command_ret -> RETURN list_exps .
    (22) command_ret -> RETURN list_exps . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    BREAK           reduce using rule 21 (command_ret -> RETURN list_exps .)
    DO              reduce using rule 21 (command_ret -> RETURN list_exps .)
    DUALCOLON       reduce using rule 21 (command_ret -> RETURN list_exps .)
    WHILE           reduce using rule 21 (command_ret -> RETURN list_exps .)
    REPEAT          reduce using rule 21 (command_ret -> RETURN list_exps .)
    IF              reduce using rule 21 (command_ret -> RETURN list_exps .)
    FOR             reduce using rule 21 (command_ret -> RETURN list_exps .)
    LOCAL           reduce using rule 21 (command_ret -> RETURN list_exps .)
    RETURN          reduce using rule 21 (command_ret -> RETURN list_exps .)
    NAME            reduce using rule 21 (command_ret -> RETURN list_exps .)
    VAR             reduce using rule 21 (command_ret -> RETURN list_exps .)
    LPAREN          reduce using rule 21 (command_ret -> RETURN list_exps .)
    FUNCTION        reduce using rule 21 (command_ret -> RETURN list_exps .)
    $end            reduce using rule 21 (command_ret -> RETURN list_exps .)
    END             reduce using rule 21 (command_ret -> RETURN list_exps .)
    UNTIL           reduce using rule 21 (command_ret -> RETURN list_exps .)
    SEMICOLON       shift and go to state 117

  ! SEMICOLON       [ reduce using rule 21 (command_ret -> RETURN list_exps .) ]


state 68

    (37) list_exps -> exp . COMMA list_exps
    (38) list_exps -> exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    COMMA           shift and go to state 118
    SEMICOLON       reduce using rule 38 (list_exps -> exp .)
    BREAK           reduce using rule 38 (list_exps -> exp .)
    DO              reduce using rule 38 (list_exps -> exp .)
    DUALCOLON       reduce using rule 38 (list_exps -> exp .)
    WHILE           reduce using rule 38 (list_exps -> exp .)
    REPEAT          reduce using rule 38 (list_exps -> exp .)
    IF              reduce using rule 38 (list_exps -> exp .)
    FOR             reduce using rule 38 (list_exps -> exp .)
    LOCAL           reduce using rule 38 (list_exps -> exp .)
    RETURN          reduce using rule 38 (list_exps -> exp .)
    NAME            reduce using rule 38 (list_exps -> exp .)
    VAR             reduce using rule 38 (list_exps -> exp .)
    LPAREN          reduce using rule 38 (list_exps -> exp .)
    FUNCTION        reduce using rule 38 (list_exps -> exp .)
    $end            reduce using rule 38 (list_exps -> exp .)
    END             reduce using rule 38 (list_exps -> exp .)
    UNTIL           reduce using rule 38 (list_exps -> exp .)
    RPAREN          reduce using rule 38 (list_exps -> exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 69

    (30) var -> prefix_exp LCOLCH . exp RCOLCH
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 119
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 70

    (31) var -> prefix_exp DOT . NAME

    NAME            shift and go to state 120


state 71

    (68) exp_prefix -> LPAREN exp . RPAREN
    (34) prefix_exp -> LPAREN exp . RPAREN
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    RPAREN          shift and go to state 121
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 72

    (92) function -> FUNCTION body_function .

    SEMICOLON       reduce using rule 92 (function -> FUNCTION body_function .)
    BREAK           reduce using rule 92 (function -> FUNCTION body_function .)
    DO              reduce using rule 92 (function -> FUNCTION body_function .)
    DUALCOLON       reduce using rule 92 (function -> FUNCTION body_function .)
    WHILE           reduce using rule 92 (function -> FUNCTION body_function .)
    REPEAT          reduce using rule 92 (function -> FUNCTION body_function .)
    IF              reduce using rule 92 (function -> FUNCTION body_function .)
    FOR             reduce using rule 92 (function -> FUNCTION body_function .)
    LOCAL           reduce using rule 92 (function -> FUNCTION body_function .)
    RETURN          reduce using rule 92 (function -> FUNCTION body_function .)
    NAME            reduce using rule 92 (function -> FUNCTION body_function .)
    VAR             reduce using rule 92 (function -> FUNCTION body_function .)
    LPAREN          reduce using rule 92 (function -> FUNCTION body_function .)
    FUNCTION        reduce using rule 92 (function -> FUNCTION body_function .)
    $end            reduce using rule 92 (function -> FUNCTION body_function .)
    END             reduce using rule 92 (function -> FUNCTION body_function .)
    UNTIL           reduce using rule 92 (function -> FUNCTION body_function .)
    PLUS            reduce using rule 92 (function -> FUNCTION body_function .)
    MINUS           reduce using rule 92 (function -> FUNCTION body_function .)
    TIMES           reduce using rule 92 (function -> FUNCTION body_function .)
    DIVIDE          reduce using rule 92 (function -> FUNCTION body_function .)
    EXPO            reduce using rule 92 (function -> FUNCTION body_function .)
    PERCENTUAL      reduce using rule 92 (function -> FUNCTION body_function .)
    CONCAT          reduce using rule 92 (function -> FUNCTION body_function .)
    LT              reduce using rule 92 (function -> FUNCTION body_function .)
    LTEQUALS        reduce using rule 92 (function -> FUNCTION body_function .)
    GT              reduce using rule 92 (function -> FUNCTION body_function .)
    GTEQUALS        reduce using rule 92 (function -> FUNCTION body_function .)
    EQUALS          reduce using rule 92 (function -> FUNCTION body_function .)
    DIF             reduce using rule 92 (function -> FUNCTION body_function .)
    AND             reduce using rule 92 (function -> FUNCTION body_function .)
    OR              reduce using rule 92 (function -> FUNCTION body_function .)
    THEN            reduce using rule 92 (function -> FUNCTION body_function .)
    COMMA           reduce using rule 92 (function -> FUNCTION body_function .)
    RPAREN          reduce using rule 92 (function -> FUNCTION body_function .)
    RCOLCH          reduce using rule 92 (function -> FUNCTION body_function .)
    RBRACE          reduce using rule 92 (function -> FUNCTION body_function .)


state 73

    (75) body_function -> LPAREN . list_pars RPAREN block END
    (76) list_pars -> . list_names COMMA VARARGS
    (77) list_pars -> . VARARGS
    (35) list_names -> . NAME COMMA list_names
    (36) list_names -> . NAME

    VARARGS         shift and go to state 124
    NAME            shift and go to state 125

    list_pars                      shift and go to state 122
    list_names                     shift and go to state 123

state 74

    (5) command -> list_vars ATRIB list_exps .

    SEMICOLON       reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    BREAK           reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    DO              reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    DUALCOLON       reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    WHILE           reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    REPEAT          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    IF              reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    FOR             reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    LOCAL           reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    RETURN          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    NAME            reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    VAR             reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    LPAREN          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    FUNCTION        reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    $end            reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    END             reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    UNTIL           reduce using rule 5 (command -> list_vars ATRIB list_exps .)


state 75

    (9) command -> DO block END .

    SEMICOLON       reduce using rule 9 (command -> DO block END .)
    BREAK           reduce using rule 9 (command -> DO block END .)
    DO              reduce using rule 9 (command -> DO block END .)
    DUALCOLON       reduce using rule 9 (command -> DO block END .)
    WHILE           reduce using rule 9 (command -> DO block END .)
    REPEAT          reduce using rule 9 (command -> DO block END .)
    IF              reduce using rule 9 (command -> DO block END .)
    FOR             reduce using rule 9 (command -> DO block END .)
    LOCAL           reduce using rule 9 (command -> DO block END .)
    RETURN          reduce using rule 9 (command -> DO block END .)
    NAME            reduce using rule 9 (command -> DO block END .)
    VAR             reduce using rule 9 (command -> DO block END .)
    LPAREN          reduce using rule 9 (command -> DO block END .)
    FUNCTION        reduce using rule 9 (command -> DO block END .)
    $end            reduce using rule 9 (command -> DO block END .)
    END             reduce using rule 9 (command -> DO block END .)
    UNTIL           reduce using rule 9 (command -> DO block END .)


state 76

    (28) list_vars -> var COMMA list_vars .

    ATRIB           reduce using rule 28 (list_vars -> var COMMA list_vars .)


state 77

    (33) prefix_exp -> call_function .
    (67) exp_prefix -> call_function .

    LCOLCH          reduce using rule 33 (prefix_exp -> call_function .)
    DOT             reduce using rule 33 (prefix_exp -> call_function .)
    COLON           reduce using rule 67 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 67 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 67 (exp_prefix -> call_function .)


state 78

    (34) prefix_exp -> LPAREN . exp RPAREN
    (68) exp_prefix -> LPAREN . exp RPAREN
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 126
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 79

    (70) call_function -> exp_prefix COLON NAME . args
    (71) args -> . LPAREN list_exps RPAREN
    (72) args -> . construct_table
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE

    LPAREN          shift and go to state 40
    LBRACE          shift and go to state 42

    args                           shift and go to state 127
    construct_table                shift and go to state 41

state 80

    (71) args -> LPAREN list_exps . RPAREN

    RPAREN          shift and go to state 128


state 81

    (78) construct_table -> LBRACE list_fields . RBRACE

    RBRACE          shift and go to state 129


state 82

    (79) construct_table -> LBRACE RBRACE .

    SEMICOLON       reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    BREAK           reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    DO              reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    DUALCOLON       reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    WHILE           reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    REPEAT          reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    IF              reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    FOR             reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    LOCAL           reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    RETURN          reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    NAME            reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    VAR             reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    LPAREN          reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    $end            reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    COLON           reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    LBRACE          reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    LCOLCH          reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    DOT             reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    END             reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    UNTIL           reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    PLUS            reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    MINUS           reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    TIMES           reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    EXPO            reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    PERCENTUAL      reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    CONCAT          reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    LT              reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    LTEQUALS        reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    GT              reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    GTEQUALS        reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    EQUALS          reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    DIF             reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    AND             reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    OR              reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    THEN            reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    COMMA           reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    RPAREN          reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    RCOLCH          reduce using rule 79 (construct_table -> LBRACE RBRACE .)
    RBRACE          reduce using rule 79 (construct_table -> LBRACE RBRACE .)


state 83

    (80) list_fields -> field .
    (81) list_fields -> field . separator_fields list_fields
    (88) separator_fields -> . COMMA
    (89) separator_fields -> . SEMICOLON

    RBRACE          reduce using rule 80 (list_fields -> field .)
    COMMA           shift and go to state 131
    SEMICOLON       shift and go to state 132

    separator_fields               shift and go to state 130

state 84

    (82) list_fields -> field_empty .
    (83) list_fields -> field_empty . separator_fields list_fields
    (88) separator_fields -> . COMMA
    (89) separator_fields -> . SEMICOLON

    RBRACE          reduce using rule 82 (list_fields -> field_empty .)
    COMMA           shift and go to state 131
    SEMICOLON       shift and go to state 132

    separator_fields               shift and go to state 133

state 85

    (86) field -> LCOLCH . exp RCOLCH ATRIB exp
    (84) field_empty -> LCOLCH . exp RCOLCH
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 134
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 86

    (87) field -> NAME . ATRIB exp
    (85) field_empty -> NAME .

    ATRIB           shift and go to state 135
    COMMA           reduce using rule 85 (field_empty -> NAME .)
    SEMICOLON       reduce using rule 85 (field_empty -> NAME .)
    RBRACE          reduce using rule 85 (field_empty -> NAME .)


state 87

    (23) rotulo -> DUALCOLON NAME DUALCOLON .

    SEMICOLON       reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    BREAK           reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    DO              reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    DUALCOLON       reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    WHILE           reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    REPEAT          reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    IF              reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    FOR             reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    LOCAL           reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    RETURN          reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    NAME            reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    VAR             reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    LPAREN          reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    FUNCTION        reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    $end            reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    END             reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)
    UNTIL           reduce using rule 23 (rotulo -> DUALCOLON NAME DUALCOLON .)


state 88

    (96) struct_while -> WHILE exp DO . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    block                          shift and go to state 136
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 89

    (51) exp -> exp PLUS . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 137
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 90

    (52) exp -> exp MINUS . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 138
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 91

    (53) exp -> exp TIMES . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 139
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 92

    (54) exp -> exp DIVIDE . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 140
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 93

    (55) exp -> exp EXPO . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 141
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 94

    (56) exp -> exp PERCENTUAL . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 142
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 95

    (57) exp -> exp CONCAT . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 143
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 96

    (58) exp -> exp LT . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 144
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 97

    (59) exp -> exp LTEQUALS . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 145
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 98

    (60) exp -> exp GT . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 146
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 99

    (61) exp -> exp GTEQUALS . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 147
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 100

    (62) exp -> exp EQUALS . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 148
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 101

    (63) exp -> exp DIF . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 149
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 102

    (64) exp -> exp AND . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 150
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 103

    (65) exp -> exp OR . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 151
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 104

    (48) exp -> TAG exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 48 (exp -> TAG exp .)
    PLUS            reduce using rule 48 (exp -> TAG exp .)
    MINUS           reduce using rule 48 (exp -> TAG exp .)
    TIMES           reduce using rule 48 (exp -> TAG exp .)
    DIVIDE          reduce using rule 48 (exp -> TAG exp .)
    PERCENTUAL      reduce using rule 48 (exp -> TAG exp .)
    CONCAT          reduce using rule 48 (exp -> TAG exp .)
    LT              reduce using rule 48 (exp -> TAG exp .)
    LTEQUALS        reduce using rule 48 (exp -> TAG exp .)
    GT              reduce using rule 48 (exp -> TAG exp .)
    GTEQUALS        reduce using rule 48 (exp -> TAG exp .)
    EQUALS          reduce using rule 48 (exp -> TAG exp .)
    DIF             reduce using rule 48 (exp -> TAG exp .)
    AND             reduce using rule 48 (exp -> TAG exp .)
    OR              reduce using rule 48 (exp -> TAG exp .)
    THEN            reduce using rule 48 (exp -> TAG exp .)
    COMMA           reduce using rule 48 (exp -> TAG exp .)
    SEMICOLON       reduce using rule 48 (exp -> TAG exp .)
    BREAK           reduce using rule 48 (exp -> TAG exp .)
    DUALCOLON       reduce using rule 48 (exp -> TAG exp .)
    WHILE           reduce using rule 48 (exp -> TAG exp .)
    REPEAT          reduce using rule 48 (exp -> TAG exp .)
    IF              reduce using rule 48 (exp -> TAG exp .)
    FOR             reduce using rule 48 (exp -> TAG exp .)
    LOCAL           reduce using rule 48 (exp -> TAG exp .)
    RETURN          reduce using rule 48 (exp -> TAG exp .)
    NAME            reduce using rule 48 (exp -> TAG exp .)
    VAR             reduce using rule 48 (exp -> TAG exp .)
    LPAREN          reduce using rule 48 (exp -> TAG exp .)
    FUNCTION        reduce using rule 48 (exp -> TAG exp .)
    $end            reduce using rule 48 (exp -> TAG exp .)
    END             reduce using rule 48 (exp -> TAG exp .)
    UNTIL           reduce using rule 48 (exp -> TAG exp .)
    RPAREN          reduce using rule 48 (exp -> TAG exp .)
    RCOLCH          reduce using rule 48 (exp -> TAG exp .)
    RBRACE          reduce using rule 48 (exp -> TAG exp .)
    EXPO            shift and go to state 93

  ! EXPO            [ reduce using rule 48 (exp -> TAG exp .) ]
  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 90 ]
  ! TIMES           [ shift and go to state 91 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! PERCENTUAL      [ shift and go to state 94 ]
  ! CONCAT          [ shift and go to state 95 ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 105

    (49) exp -> MINUS exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 49 (exp -> MINUS exp .)
    PLUS            reduce using rule 49 (exp -> MINUS exp .)
    MINUS           reduce using rule 49 (exp -> MINUS exp .)
    CONCAT          reduce using rule 49 (exp -> MINUS exp .)
    LT              reduce using rule 49 (exp -> MINUS exp .)
    LTEQUALS        reduce using rule 49 (exp -> MINUS exp .)
    GT              reduce using rule 49 (exp -> MINUS exp .)
    GTEQUALS        reduce using rule 49 (exp -> MINUS exp .)
    EQUALS          reduce using rule 49 (exp -> MINUS exp .)
    DIF             reduce using rule 49 (exp -> MINUS exp .)
    AND             reduce using rule 49 (exp -> MINUS exp .)
    OR              reduce using rule 49 (exp -> MINUS exp .)
    THEN            reduce using rule 49 (exp -> MINUS exp .)
    COMMA           reduce using rule 49 (exp -> MINUS exp .)
    SEMICOLON       reduce using rule 49 (exp -> MINUS exp .)
    BREAK           reduce using rule 49 (exp -> MINUS exp .)
    DUALCOLON       reduce using rule 49 (exp -> MINUS exp .)
    WHILE           reduce using rule 49 (exp -> MINUS exp .)
    REPEAT          reduce using rule 49 (exp -> MINUS exp .)
    IF              reduce using rule 49 (exp -> MINUS exp .)
    FOR             reduce using rule 49 (exp -> MINUS exp .)
    LOCAL           reduce using rule 49 (exp -> MINUS exp .)
    RETURN          reduce using rule 49 (exp -> MINUS exp .)
    NAME            reduce using rule 49 (exp -> MINUS exp .)
    VAR             reduce using rule 49 (exp -> MINUS exp .)
    LPAREN          reduce using rule 49 (exp -> MINUS exp .)
    FUNCTION        reduce using rule 49 (exp -> MINUS exp .)
    $end            reduce using rule 49 (exp -> MINUS exp .)
    END             reduce using rule 49 (exp -> MINUS exp .)
    UNTIL           reduce using rule 49 (exp -> MINUS exp .)
    RPAREN          reduce using rule 49 (exp -> MINUS exp .)
    RCOLCH          reduce using rule 49 (exp -> MINUS exp .)
    RBRACE          reduce using rule 49 (exp -> MINUS exp .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94

  ! TIMES           [ reduce using rule 49 (exp -> MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 49 (exp -> MINUS exp .) ]
  ! EXPO            [ reduce using rule 49 (exp -> MINUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 49 (exp -> MINUS exp .) ]
  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 90 ]
  ! CONCAT          [ shift and go to state 95 ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 106

    (50) exp -> NOT exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 50 (exp -> NOT exp .)
    PLUS            reduce using rule 50 (exp -> NOT exp .)
    MINUS           reduce using rule 50 (exp -> NOT exp .)
    TIMES           reduce using rule 50 (exp -> NOT exp .)
    DIVIDE          reduce using rule 50 (exp -> NOT exp .)
    PERCENTUAL      reduce using rule 50 (exp -> NOT exp .)
    CONCAT          reduce using rule 50 (exp -> NOT exp .)
    LT              reduce using rule 50 (exp -> NOT exp .)
    LTEQUALS        reduce using rule 50 (exp -> NOT exp .)
    GT              reduce using rule 50 (exp -> NOT exp .)
    GTEQUALS        reduce using rule 50 (exp -> NOT exp .)
    EQUALS          reduce using rule 50 (exp -> NOT exp .)
    DIF             reduce using rule 50 (exp -> NOT exp .)
    AND             reduce using rule 50 (exp -> NOT exp .)
    OR              reduce using rule 50 (exp -> NOT exp .)
    THEN            reduce using rule 50 (exp -> NOT exp .)
    COMMA           reduce using rule 50 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 50 (exp -> NOT exp .)
    BREAK           reduce using rule 50 (exp -> NOT exp .)
    DUALCOLON       reduce using rule 50 (exp -> NOT exp .)
    WHILE           reduce using rule 50 (exp -> NOT exp .)
    REPEAT          reduce using rule 50 (exp -> NOT exp .)
    IF              reduce using rule 50 (exp -> NOT exp .)
    FOR             reduce using rule 50 (exp -> NOT exp .)
    LOCAL           reduce using rule 50 (exp -> NOT exp .)
    RETURN          reduce using rule 50 (exp -> NOT exp .)
    NAME            reduce using rule 50 (exp -> NOT exp .)
    VAR             reduce using rule 50 (exp -> NOT exp .)
    LPAREN          reduce using rule 50 (exp -> NOT exp .)
    FUNCTION        reduce using rule 50 (exp -> NOT exp .)
    $end            reduce using rule 50 (exp -> NOT exp .)
    END             reduce using rule 50 (exp -> NOT exp .)
    UNTIL           reduce using rule 50 (exp -> NOT exp .)
    RPAREN          reduce using rule 50 (exp -> NOT exp .)
    RCOLCH          reduce using rule 50 (exp -> NOT exp .)
    RBRACE          reduce using rule 50 (exp -> NOT exp .)
    EXPO            shift and go to state 93

  ! EXPO            [ reduce using rule 50 (exp -> NOT exp .) ]
  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 90 ]
  ! TIMES           [ shift and go to state 91 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! PERCENTUAL      [ shift and go to state 94 ]
  ! CONCAT          [ shift and go to state 95 ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 107

    (68) exp_prefix -> LPAREN exp . RPAREN
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    RPAREN          shift and go to state 152
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 108

    (100) struct_repeat -> REPEAT block UNTIL . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 153
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 109

    (93) if -> IF exp THEN . block END
    (94) if -> IF exp THEN . else
    (2) block -> . command
    (3) block -> . command block
    (95) else -> . ELSE block END
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    ELSE            shift and go to state 156
    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    block                          shift and go to state 154
    else                           shift and go to state 155
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 110

    (97) struct_for -> FOR NAME ATRIB . exp COMMA exp DO block END
    (98) struct_for -> FOR NAME ATRIB . exp COMMA exp COMMA exp DO block END
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 157
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 111

    (35) list_names -> NAME COMMA . list_names
    (35) list_names -> . NAME COMMA list_names
    (36) list_names -> . NAME

    NAME            shift and go to state 125

    list_names                     shift and go to state 158

state 112

    (99) struct_for_in -> FOR list_names IN . list_exps DO block END
    (37) list_exps -> . exp COMMA list_exps
    (38) list_exps -> . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    list_exps                      shift and go to state 159
    exp                            shift and go to state 68
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 113

    (90) local_var -> LOCAL list_names ATRIB . list_exps
    (37) list_exps -> . exp COMMA list_exps
    (38) list_exps -> . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    list_exps                      shift and go to state 160
    exp                            shift and go to state 68
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 114

    (91) local_var -> LOCAL NAME ATRIB . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 161
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 115

    (101) local_function -> LOCAL FUNCTION name_function . body_function
    (75) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 73

    body_function                  shift and go to state 162

state 116

    (24) name_function -> NAME .
    (25) name_function -> NAME . DOT NAME
    (26) name_function -> NAME . COLON NAME

    LPAREN          reduce using rule 24 (name_function -> NAME .)
    DOT             shift and go to state 163
    COLON           shift and go to state 164


state 117

    (22) command_ret -> RETURN list_exps SEMICOLON .

    SEMICOLON       reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    BREAK           reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    DO              reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    DUALCOLON       reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    WHILE           reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    REPEAT          reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    IF              reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    FOR             reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    LOCAL           reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    RETURN          reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    NAME            reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    VAR             reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    LPAREN          reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    FUNCTION        reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    $end            reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    END             reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)
    UNTIL           reduce using rule 22 (command_ret -> RETURN list_exps SEMICOLON .)


state 118

    (37) list_exps -> exp COMMA . list_exps
    (37) list_exps -> . exp COMMA list_exps
    (38) list_exps -> . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 68
    list_exps                      shift and go to state 165
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 119

    (30) var -> prefix_exp LCOLCH exp . RCOLCH
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    RCOLCH          shift and go to state 166
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 120

    (31) var -> prefix_exp DOT NAME .

    COMMA           reduce using rule 31 (var -> prefix_exp DOT NAME .)
    ATRIB           reduce using rule 31 (var -> prefix_exp DOT NAME .)
    LCOLCH          reduce using rule 31 (var -> prefix_exp DOT NAME .)
    DOT             reduce using rule 31 (var -> prefix_exp DOT NAME .)


state 121

    (68) exp_prefix -> LPAREN exp RPAREN .
    (34) prefix_exp -> LPAREN exp RPAREN .

    COLON           reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    LCOLCH          reduce using rule 34 (prefix_exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 34 (prefix_exp -> LPAREN exp RPAREN .)


state 122

    (75) body_function -> LPAREN list_pars . RPAREN block END

    RPAREN          shift and go to state 167


state 123

    (76) list_pars -> list_names . COMMA VARARGS

    COMMA           shift and go to state 168


state 124

    (77) list_pars -> VARARGS .

    RPAREN          reduce using rule 77 (list_pars -> VARARGS .)


state 125

    (35) list_names -> NAME . COMMA list_names
    (36) list_names -> NAME .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 111
    IN              reduce using rule 36 (list_names -> NAME .)
    ATRIB           reduce using rule 36 (list_names -> NAME .)

  ! COMMA           [ reduce using rule 36 (list_names -> NAME .) ]


state 126

    (34) prefix_exp -> LPAREN exp . RPAREN
    (68) exp_prefix -> LPAREN exp . RPAREN
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    RPAREN          shift and go to state 169
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 127

    (70) call_function -> exp_prefix COLON NAME args .

    SEMICOLON       reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    BREAK           reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    DO              reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    DUALCOLON       reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    WHILE           reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    REPEAT          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    IF              reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    FOR             reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    LOCAL           reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    RETURN          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    NAME            reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    VAR             reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    LPAREN          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    FUNCTION        reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    $end            reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    COLON           reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    LBRACE          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    LCOLCH          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    DOT             reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    END             reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    UNTIL           reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    PLUS            reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    MINUS           reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    TIMES           reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    DIVIDE          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    EXPO            reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    PERCENTUAL      reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    CONCAT          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    LT              reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    LTEQUALS        reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    GT              reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    GTEQUALS        reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    EQUALS          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    DIF             reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    AND             reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    OR              reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    THEN            reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    COMMA           reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    RPAREN          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    RCOLCH          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)
    RBRACE          reduce using rule 70 (call_function -> exp_prefix COLON NAME args .)


state 128

    (71) args -> LPAREN list_exps RPAREN .

    SEMICOLON       reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    BREAK           reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    DO              reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    DUALCOLON       reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    WHILE           reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    REPEAT          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    IF              reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    FOR             reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    LOCAL           reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    RETURN          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    NAME            reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    VAR             reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    LPAREN          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    FUNCTION        reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    $end            reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    COLON           reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    LBRACE          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    LCOLCH          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    DOT             reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    END             reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    UNTIL           reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    PLUS            reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    MINUS           reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    TIMES           reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    DIVIDE          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    EXPO            reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    PERCENTUAL      reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    CONCAT          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    LT              reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    LTEQUALS        reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    GT              reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    GTEQUALS        reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    EQUALS          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    DIF             reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    AND             reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    OR              reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    THEN            reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    COMMA           reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    RPAREN          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    RCOLCH          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)
    RBRACE          reduce using rule 71 (args -> LPAREN list_exps RPAREN .)


state 129

    (78) construct_table -> LBRACE list_fields RBRACE .

    SEMICOLON       reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    BREAK           reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    DO              reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    DUALCOLON       reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    WHILE           reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    REPEAT          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    IF              reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    FOR             reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    LOCAL           reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    RETURN          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    NAME            reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    VAR             reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    LPAREN          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    FUNCTION        reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    $end            reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    COLON           reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    LBRACE          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    LCOLCH          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    DOT             reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    END             reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    UNTIL           reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    PLUS            reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    MINUS           reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    TIMES           reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    DIVIDE          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    EXPO            reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    PERCENTUAL      reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    CONCAT          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    LT              reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    LTEQUALS        reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    GT              reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    GTEQUALS        reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    EQUALS          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    DIF             reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    AND             reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    OR              reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    THEN            reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    COMMA           reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    RPAREN          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    RCOLCH          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)
    RBRACE          reduce using rule 78 (construct_table -> LBRACE list_fields RBRACE .)


state 130

    (81) list_fields -> field separator_fields . list_fields
    (80) list_fields -> . field
    (81) list_fields -> . field separator_fields list_fields
    (82) list_fields -> . field_empty
    (83) list_fields -> . field_empty separator_fields list_fields
    (86) field -> . LCOLCH exp RCOLCH ATRIB exp
    (87) field -> . NAME ATRIB exp
    (84) field_empty -> . LCOLCH exp RCOLCH
    (85) field_empty -> . NAME

    LCOLCH          shift and go to state 85
    NAME            shift and go to state 86

    field                          shift and go to state 83
    list_fields                    shift and go to state 170
    field_empty                    shift and go to state 84

state 131

    (88) separator_fields -> COMMA .

    LCOLCH          reduce using rule 88 (separator_fields -> COMMA .)
    NAME            reduce using rule 88 (separator_fields -> COMMA .)


state 132

    (89) separator_fields -> SEMICOLON .

    LCOLCH          reduce using rule 89 (separator_fields -> SEMICOLON .)
    NAME            reduce using rule 89 (separator_fields -> SEMICOLON .)


state 133

    (83) list_fields -> field_empty separator_fields . list_fields
    (80) list_fields -> . field
    (81) list_fields -> . field separator_fields list_fields
    (82) list_fields -> . field_empty
    (83) list_fields -> . field_empty separator_fields list_fields
    (86) field -> . LCOLCH exp RCOLCH ATRIB exp
    (87) field -> . NAME ATRIB exp
    (84) field_empty -> . LCOLCH exp RCOLCH
    (85) field_empty -> . NAME

    LCOLCH          shift and go to state 85
    NAME            shift and go to state 86

    field_empty                    shift and go to state 84
    list_fields                    shift and go to state 171
    field                          shift and go to state 83

state 134

    (86) field -> LCOLCH exp . RCOLCH ATRIB exp
    (84) field_empty -> LCOLCH exp . RCOLCH
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    RCOLCH          shift and go to state 172
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 135

    (87) field -> NAME ATRIB . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 173
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 136

    (96) struct_while -> WHILE exp DO block . END

    END             shift and go to state 174


state 137

    (51) exp -> exp PLUS exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 51 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 51 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 51 (exp -> exp PLUS exp .)
    CONCAT          reduce using rule 51 (exp -> exp PLUS exp .)
    LT              reduce using rule 51 (exp -> exp PLUS exp .)
    LTEQUALS        reduce using rule 51 (exp -> exp PLUS exp .)
    GT              reduce using rule 51 (exp -> exp PLUS exp .)
    GTEQUALS        reduce using rule 51 (exp -> exp PLUS exp .)
    EQUALS          reduce using rule 51 (exp -> exp PLUS exp .)
    DIF             reduce using rule 51 (exp -> exp PLUS exp .)
    AND             reduce using rule 51 (exp -> exp PLUS exp .)
    OR              reduce using rule 51 (exp -> exp PLUS exp .)
    THEN            reduce using rule 51 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 51 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp PLUS exp .)
    BREAK           reduce using rule 51 (exp -> exp PLUS exp .)
    DUALCOLON       reduce using rule 51 (exp -> exp PLUS exp .)
    WHILE           reduce using rule 51 (exp -> exp PLUS exp .)
    REPEAT          reduce using rule 51 (exp -> exp PLUS exp .)
    IF              reduce using rule 51 (exp -> exp PLUS exp .)
    FOR             reduce using rule 51 (exp -> exp PLUS exp .)
    LOCAL           reduce using rule 51 (exp -> exp PLUS exp .)
    RETURN          reduce using rule 51 (exp -> exp PLUS exp .)
    NAME            reduce using rule 51 (exp -> exp PLUS exp .)
    VAR             reduce using rule 51 (exp -> exp PLUS exp .)
    LPAREN          reduce using rule 51 (exp -> exp PLUS exp .)
    FUNCTION        reduce using rule 51 (exp -> exp PLUS exp .)
    $end            reduce using rule 51 (exp -> exp PLUS exp .)
    END             reduce using rule 51 (exp -> exp PLUS exp .)
    UNTIL           reduce using rule 51 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 51 (exp -> exp PLUS exp .)
    RCOLCH          reduce using rule 51 (exp -> exp PLUS exp .)
    RBRACE          reduce using rule 51 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94

  ! TIMES           [ reduce using rule 51 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 51 (exp -> exp PLUS exp .) ]
  ! EXPO            [ reduce using rule 51 (exp -> exp PLUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 51 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 90 ]
  ! CONCAT          [ shift and go to state 95 ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 138

    (52) exp -> exp MINUS exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 52 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 52 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 52 (exp -> exp MINUS exp .)
    CONCAT          reduce using rule 52 (exp -> exp MINUS exp .)
    LT              reduce using rule 52 (exp -> exp MINUS exp .)
    LTEQUALS        reduce using rule 52 (exp -> exp MINUS exp .)
    GT              reduce using rule 52 (exp -> exp MINUS exp .)
    GTEQUALS        reduce using rule 52 (exp -> exp MINUS exp .)
    EQUALS          reduce using rule 52 (exp -> exp MINUS exp .)
    DIF             reduce using rule 52 (exp -> exp MINUS exp .)
    AND             reduce using rule 52 (exp -> exp MINUS exp .)
    OR              reduce using rule 52 (exp -> exp MINUS exp .)
    THEN            reduce using rule 52 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 52 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp MINUS exp .)
    BREAK           reduce using rule 52 (exp -> exp MINUS exp .)
    DUALCOLON       reduce using rule 52 (exp -> exp MINUS exp .)
    WHILE           reduce using rule 52 (exp -> exp MINUS exp .)
    REPEAT          reduce using rule 52 (exp -> exp MINUS exp .)
    IF              reduce using rule 52 (exp -> exp MINUS exp .)
    FOR             reduce using rule 52 (exp -> exp MINUS exp .)
    LOCAL           reduce using rule 52 (exp -> exp MINUS exp .)
    RETURN          reduce using rule 52 (exp -> exp MINUS exp .)
    NAME            reduce using rule 52 (exp -> exp MINUS exp .)
    VAR             reduce using rule 52 (exp -> exp MINUS exp .)
    LPAREN          reduce using rule 52 (exp -> exp MINUS exp .)
    FUNCTION        reduce using rule 52 (exp -> exp MINUS exp .)
    $end            reduce using rule 52 (exp -> exp MINUS exp .)
    END             reduce using rule 52 (exp -> exp MINUS exp .)
    UNTIL           reduce using rule 52 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 52 (exp -> exp MINUS exp .)
    RCOLCH          reduce using rule 52 (exp -> exp MINUS exp .)
    RBRACE          reduce using rule 52 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94

  ! TIMES           [ reduce using rule 52 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 52 (exp -> exp MINUS exp .) ]
  ! EXPO            [ reduce using rule 52 (exp -> exp MINUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 52 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 90 ]
  ! CONCAT          [ shift and go to state 95 ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 139

    (53) exp -> exp TIMES exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 53 (exp -> exp TIMES exp .)
    PLUS            reduce using rule 53 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 53 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 53 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 53 (exp -> exp TIMES exp .)
    PERCENTUAL      reduce using rule 53 (exp -> exp TIMES exp .)
    CONCAT          reduce using rule 53 (exp -> exp TIMES exp .)
    LT              reduce using rule 53 (exp -> exp TIMES exp .)
    LTEQUALS        reduce using rule 53 (exp -> exp TIMES exp .)
    GT              reduce using rule 53 (exp -> exp TIMES exp .)
    GTEQUALS        reduce using rule 53 (exp -> exp TIMES exp .)
    EQUALS          reduce using rule 53 (exp -> exp TIMES exp .)
    DIF             reduce using rule 53 (exp -> exp TIMES exp .)
    AND             reduce using rule 53 (exp -> exp TIMES exp .)
    OR              reduce using rule 53 (exp -> exp TIMES exp .)
    THEN            reduce using rule 53 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 53 (exp -> exp TIMES exp .)
    SEMICOLON       reduce using rule 53 (exp -> exp TIMES exp .)
    BREAK           reduce using rule 53 (exp -> exp TIMES exp .)
    DUALCOLON       reduce using rule 53 (exp -> exp TIMES exp .)
    WHILE           reduce using rule 53 (exp -> exp TIMES exp .)
    REPEAT          reduce using rule 53 (exp -> exp TIMES exp .)
    IF              reduce using rule 53 (exp -> exp TIMES exp .)
    FOR             reduce using rule 53 (exp -> exp TIMES exp .)
    LOCAL           reduce using rule 53 (exp -> exp TIMES exp .)
    RETURN          reduce using rule 53 (exp -> exp TIMES exp .)
    NAME            reduce using rule 53 (exp -> exp TIMES exp .)
    VAR             reduce using rule 53 (exp -> exp TIMES exp .)
    LPAREN          reduce using rule 53 (exp -> exp TIMES exp .)
    FUNCTION        reduce using rule 53 (exp -> exp TIMES exp .)
    $end            reduce using rule 53 (exp -> exp TIMES exp .)
    END             reduce using rule 53 (exp -> exp TIMES exp .)
    UNTIL           reduce using rule 53 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 53 (exp -> exp TIMES exp .)
    RCOLCH          reduce using rule 53 (exp -> exp TIMES exp .)
    RBRACE          reduce using rule 53 (exp -> exp TIMES exp .)
    EXPO            shift and go to state 93

  ! EXPO            [ reduce using rule 53 (exp -> exp TIMES exp .) ]
  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 90 ]
  ! TIMES           [ shift and go to state 91 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! PERCENTUAL      [ shift and go to state 94 ]
  ! CONCAT          [ shift and go to state 95 ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 140

    (54) exp -> exp DIVIDE exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 54 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 54 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 54 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 54 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 54 (exp -> exp DIVIDE exp .)
    PERCENTUAL      reduce using rule 54 (exp -> exp DIVIDE exp .)
    CONCAT          reduce using rule 54 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 54 (exp -> exp DIVIDE exp .)
    LTEQUALS        reduce using rule 54 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 54 (exp -> exp DIVIDE exp .)
    GTEQUALS        reduce using rule 54 (exp -> exp DIVIDE exp .)
    EQUALS          reduce using rule 54 (exp -> exp DIVIDE exp .)
    DIF             reduce using rule 54 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 54 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 54 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 54 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 54 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 54 (exp -> exp DIVIDE exp .)
    BREAK           reduce using rule 54 (exp -> exp DIVIDE exp .)
    DUALCOLON       reduce using rule 54 (exp -> exp DIVIDE exp .)
    WHILE           reduce using rule 54 (exp -> exp DIVIDE exp .)
    REPEAT          reduce using rule 54 (exp -> exp DIVIDE exp .)
    IF              reduce using rule 54 (exp -> exp DIVIDE exp .)
    FOR             reduce using rule 54 (exp -> exp DIVIDE exp .)
    LOCAL           reduce using rule 54 (exp -> exp DIVIDE exp .)
    RETURN          reduce using rule 54 (exp -> exp DIVIDE exp .)
    NAME            reduce using rule 54 (exp -> exp DIVIDE exp .)
    VAR             reduce using rule 54 (exp -> exp DIVIDE exp .)
    LPAREN          reduce using rule 54 (exp -> exp DIVIDE exp .)
    FUNCTION        reduce using rule 54 (exp -> exp DIVIDE exp .)
    $end            reduce using rule 54 (exp -> exp DIVIDE exp .)
    END             reduce using rule 54 (exp -> exp DIVIDE exp .)
    UNTIL           reduce using rule 54 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 54 (exp -> exp DIVIDE exp .)
    RCOLCH          reduce using rule 54 (exp -> exp DIVIDE exp .)
    RBRACE          reduce using rule 54 (exp -> exp DIVIDE exp .)
    EXPO            shift and go to state 93

  ! EXPO            [ reduce using rule 54 (exp -> exp DIVIDE exp .) ]
  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 90 ]
  ! TIMES           [ shift and go to state 91 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! PERCENTUAL      [ shift and go to state 94 ]
  ! CONCAT          [ shift and go to state 95 ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 141

    (55) exp -> exp EXPO exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 55 (exp -> exp EXPO exp .)
    PLUS            reduce using rule 55 (exp -> exp EXPO exp .)
    MINUS           reduce using rule 55 (exp -> exp EXPO exp .)
    TIMES           reduce using rule 55 (exp -> exp EXPO exp .)
    DIVIDE          reduce using rule 55 (exp -> exp EXPO exp .)
    EXPO            reduce using rule 55 (exp -> exp EXPO exp .)
    PERCENTUAL      reduce using rule 55 (exp -> exp EXPO exp .)
    CONCAT          reduce using rule 55 (exp -> exp EXPO exp .)
    LT              reduce using rule 55 (exp -> exp EXPO exp .)
    LTEQUALS        reduce using rule 55 (exp -> exp EXPO exp .)
    GT              reduce using rule 55 (exp -> exp EXPO exp .)
    GTEQUALS        reduce using rule 55 (exp -> exp EXPO exp .)
    EQUALS          reduce using rule 55 (exp -> exp EXPO exp .)
    DIF             reduce using rule 55 (exp -> exp EXPO exp .)
    AND             reduce using rule 55 (exp -> exp EXPO exp .)
    OR              reduce using rule 55 (exp -> exp EXPO exp .)
    THEN            reduce using rule 55 (exp -> exp EXPO exp .)
    COMMA           reduce using rule 55 (exp -> exp EXPO exp .)
    SEMICOLON       reduce using rule 55 (exp -> exp EXPO exp .)
    BREAK           reduce using rule 55 (exp -> exp EXPO exp .)
    DUALCOLON       reduce using rule 55 (exp -> exp EXPO exp .)
    WHILE           reduce using rule 55 (exp -> exp EXPO exp .)
    REPEAT          reduce using rule 55 (exp -> exp EXPO exp .)
    IF              reduce using rule 55 (exp -> exp EXPO exp .)
    FOR             reduce using rule 55 (exp -> exp EXPO exp .)
    LOCAL           reduce using rule 55 (exp -> exp EXPO exp .)
    RETURN          reduce using rule 55 (exp -> exp EXPO exp .)
    NAME            reduce using rule 55 (exp -> exp EXPO exp .)
    VAR             reduce using rule 55 (exp -> exp EXPO exp .)
    LPAREN          reduce using rule 55 (exp -> exp EXPO exp .)
    FUNCTION        reduce using rule 55 (exp -> exp EXPO exp .)
    $end            reduce using rule 55 (exp -> exp EXPO exp .)
    END             reduce using rule 55 (exp -> exp EXPO exp .)
    UNTIL           reduce using rule 55 (exp -> exp EXPO exp .)
    RPAREN          reduce using rule 55 (exp -> exp EXPO exp .)
    RCOLCH          reduce using rule 55 (exp -> exp EXPO exp .)
    RBRACE          reduce using rule 55 (exp -> exp EXPO exp .)

  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 90 ]
  ! TIMES           [ shift and go to state 91 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! EXPO            [ shift and go to state 93 ]
  ! PERCENTUAL      [ shift and go to state 94 ]
  ! CONCAT          [ shift and go to state 95 ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 142

    (56) exp -> exp PERCENTUAL exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    PLUS            reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    MINUS           reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    TIMES           reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    DIVIDE          reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    PERCENTUAL      reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    CONCAT          reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    LT              reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    LTEQUALS        reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    GT              reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    GTEQUALS        reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    EQUALS          reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    DIF             reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    AND             reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    OR              reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    THEN            reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    COMMA           reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    SEMICOLON       reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    BREAK           reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    DUALCOLON       reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    WHILE           reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    REPEAT          reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    IF              reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    FOR             reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    LOCAL           reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    RETURN          reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    NAME            reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    VAR             reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    LPAREN          reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    FUNCTION        reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    $end            reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    END             reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    UNTIL           reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    RPAREN          reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    RCOLCH          reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    RBRACE          reduce using rule 56 (exp -> exp PERCENTUAL exp .)
    EXPO            shift and go to state 93

  ! EXPO            [ reduce using rule 56 (exp -> exp PERCENTUAL exp .) ]
  ! PLUS            [ shift and go to state 89 ]
  ! MINUS           [ shift and go to state 90 ]
  ! TIMES           [ shift and go to state 91 ]
  ! DIVIDE          [ shift and go to state 92 ]
  ! PERCENTUAL      [ shift and go to state 94 ]
  ! CONCAT          [ shift and go to state 95 ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 143

    (57) exp -> exp CONCAT exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 57 (exp -> exp CONCAT exp .)
    CONCAT          reduce using rule 57 (exp -> exp CONCAT exp .)
    LT              reduce using rule 57 (exp -> exp CONCAT exp .)
    LTEQUALS        reduce using rule 57 (exp -> exp CONCAT exp .)
    GT              reduce using rule 57 (exp -> exp CONCAT exp .)
    GTEQUALS        reduce using rule 57 (exp -> exp CONCAT exp .)
    EQUALS          reduce using rule 57 (exp -> exp CONCAT exp .)
    DIF             reduce using rule 57 (exp -> exp CONCAT exp .)
    AND             reduce using rule 57 (exp -> exp CONCAT exp .)
    OR              reduce using rule 57 (exp -> exp CONCAT exp .)
    THEN            reduce using rule 57 (exp -> exp CONCAT exp .)
    COMMA           reduce using rule 57 (exp -> exp CONCAT exp .)
    SEMICOLON       reduce using rule 57 (exp -> exp CONCAT exp .)
    BREAK           reduce using rule 57 (exp -> exp CONCAT exp .)
    DUALCOLON       reduce using rule 57 (exp -> exp CONCAT exp .)
    WHILE           reduce using rule 57 (exp -> exp CONCAT exp .)
    REPEAT          reduce using rule 57 (exp -> exp CONCAT exp .)
    IF              reduce using rule 57 (exp -> exp CONCAT exp .)
    FOR             reduce using rule 57 (exp -> exp CONCAT exp .)
    LOCAL           reduce using rule 57 (exp -> exp CONCAT exp .)
    RETURN          reduce using rule 57 (exp -> exp CONCAT exp .)
    NAME            reduce using rule 57 (exp -> exp CONCAT exp .)
    VAR             reduce using rule 57 (exp -> exp CONCAT exp .)
    LPAREN          reduce using rule 57 (exp -> exp CONCAT exp .)
    FUNCTION        reduce using rule 57 (exp -> exp CONCAT exp .)
    $end            reduce using rule 57 (exp -> exp CONCAT exp .)
    END             reduce using rule 57 (exp -> exp CONCAT exp .)
    UNTIL           reduce using rule 57 (exp -> exp CONCAT exp .)
    RPAREN          reduce using rule 57 (exp -> exp CONCAT exp .)
    RCOLCH          reduce using rule 57 (exp -> exp CONCAT exp .)
    RBRACE          reduce using rule 57 (exp -> exp CONCAT exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94

  ! PLUS            [ reduce using rule 57 (exp -> exp CONCAT exp .) ]
  ! MINUS           [ reduce using rule 57 (exp -> exp CONCAT exp .) ]
  ! TIMES           [ reduce using rule 57 (exp -> exp CONCAT exp .) ]
  ! DIVIDE          [ reduce using rule 57 (exp -> exp CONCAT exp .) ]
  ! EXPO            [ reduce using rule 57 (exp -> exp CONCAT exp .) ]
  ! PERCENTUAL      [ reduce using rule 57 (exp -> exp CONCAT exp .) ]
  ! CONCAT          [ shift and go to state 95 ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 144

    (58) exp -> exp LT exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 58 (exp -> exp LT exp .)
    LT              reduce using rule 58 (exp -> exp LT exp .)
    LTEQUALS        reduce using rule 58 (exp -> exp LT exp .)
    GT              reduce using rule 58 (exp -> exp LT exp .)
    GTEQUALS        reduce using rule 58 (exp -> exp LT exp .)
    EQUALS          reduce using rule 58 (exp -> exp LT exp .)
    DIF             reduce using rule 58 (exp -> exp LT exp .)
    AND             reduce using rule 58 (exp -> exp LT exp .)
    OR              reduce using rule 58 (exp -> exp LT exp .)
    THEN            reduce using rule 58 (exp -> exp LT exp .)
    COMMA           reduce using rule 58 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 58 (exp -> exp LT exp .)
    BREAK           reduce using rule 58 (exp -> exp LT exp .)
    DUALCOLON       reduce using rule 58 (exp -> exp LT exp .)
    WHILE           reduce using rule 58 (exp -> exp LT exp .)
    REPEAT          reduce using rule 58 (exp -> exp LT exp .)
    IF              reduce using rule 58 (exp -> exp LT exp .)
    FOR             reduce using rule 58 (exp -> exp LT exp .)
    LOCAL           reduce using rule 58 (exp -> exp LT exp .)
    RETURN          reduce using rule 58 (exp -> exp LT exp .)
    NAME            reduce using rule 58 (exp -> exp LT exp .)
    VAR             reduce using rule 58 (exp -> exp LT exp .)
    LPAREN          reduce using rule 58 (exp -> exp LT exp .)
    FUNCTION        reduce using rule 58 (exp -> exp LT exp .)
    $end            reduce using rule 58 (exp -> exp LT exp .)
    END             reduce using rule 58 (exp -> exp LT exp .)
    UNTIL           reduce using rule 58 (exp -> exp LT exp .)
    RPAREN          reduce using rule 58 (exp -> exp LT exp .)
    RCOLCH          reduce using rule 58 (exp -> exp LT exp .)
    RBRACE          reduce using rule 58 (exp -> exp LT exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95

  ! PLUS            [ reduce using rule 58 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 58 (exp -> exp LT exp .) ]
  ! TIMES           [ reduce using rule 58 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 58 (exp -> exp LT exp .) ]
  ! EXPO            [ reduce using rule 58 (exp -> exp LT exp .) ]
  ! PERCENTUAL      [ reduce using rule 58 (exp -> exp LT exp .) ]
  ! CONCAT          [ reduce using rule 58 (exp -> exp LT exp .) ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 145

    (59) exp -> exp LTEQUALS exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 59 (exp -> exp LTEQUALS exp .)
    LT              reduce using rule 59 (exp -> exp LTEQUALS exp .)
    LTEQUALS        reduce using rule 59 (exp -> exp LTEQUALS exp .)
    GT              reduce using rule 59 (exp -> exp LTEQUALS exp .)
    GTEQUALS        reduce using rule 59 (exp -> exp LTEQUALS exp .)
    EQUALS          reduce using rule 59 (exp -> exp LTEQUALS exp .)
    DIF             reduce using rule 59 (exp -> exp LTEQUALS exp .)
    AND             reduce using rule 59 (exp -> exp LTEQUALS exp .)
    OR              reduce using rule 59 (exp -> exp LTEQUALS exp .)
    THEN            reduce using rule 59 (exp -> exp LTEQUALS exp .)
    COMMA           reduce using rule 59 (exp -> exp LTEQUALS exp .)
    SEMICOLON       reduce using rule 59 (exp -> exp LTEQUALS exp .)
    BREAK           reduce using rule 59 (exp -> exp LTEQUALS exp .)
    DUALCOLON       reduce using rule 59 (exp -> exp LTEQUALS exp .)
    WHILE           reduce using rule 59 (exp -> exp LTEQUALS exp .)
    REPEAT          reduce using rule 59 (exp -> exp LTEQUALS exp .)
    IF              reduce using rule 59 (exp -> exp LTEQUALS exp .)
    FOR             reduce using rule 59 (exp -> exp LTEQUALS exp .)
    LOCAL           reduce using rule 59 (exp -> exp LTEQUALS exp .)
    RETURN          reduce using rule 59 (exp -> exp LTEQUALS exp .)
    NAME            reduce using rule 59 (exp -> exp LTEQUALS exp .)
    VAR             reduce using rule 59 (exp -> exp LTEQUALS exp .)
    LPAREN          reduce using rule 59 (exp -> exp LTEQUALS exp .)
    FUNCTION        reduce using rule 59 (exp -> exp LTEQUALS exp .)
    $end            reduce using rule 59 (exp -> exp LTEQUALS exp .)
    END             reduce using rule 59 (exp -> exp LTEQUALS exp .)
    UNTIL           reduce using rule 59 (exp -> exp LTEQUALS exp .)
    RPAREN          reduce using rule 59 (exp -> exp LTEQUALS exp .)
    RCOLCH          reduce using rule 59 (exp -> exp LTEQUALS exp .)
    RBRACE          reduce using rule 59 (exp -> exp LTEQUALS exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95

  ! PLUS            [ reduce using rule 59 (exp -> exp LTEQUALS exp .) ]
  ! MINUS           [ reduce using rule 59 (exp -> exp LTEQUALS exp .) ]
  ! TIMES           [ reduce using rule 59 (exp -> exp LTEQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 59 (exp -> exp LTEQUALS exp .) ]
  ! EXPO            [ reduce using rule 59 (exp -> exp LTEQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 59 (exp -> exp LTEQUALS exp .) ]
  ! CONCAT          [ reduce using rule 59 (exp -> exp LTEQUALS exp .) ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 146

    (60) exp -> exp GT exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 60 (exp -> exp GT exp .)
    LT              reduce using rule 60 (exp -> exp GT exp .)
    LTEQUALS        reduce using rule 60 (exp -> exp GT exp .)
    GT              reduce using rule 60 (exp -> exp GT exp .)
    GTEQUALS        reduce using rule 60 (exp -> exp GT exp .)
    EQUALS          reduce using rule 60 (exp -> exp GT exp .)
    DIF             reduce using rule 60 (exp -> exp GT exp .)
    AND             reduce using rule 60 (exp -> exp GT exp .)
    OR              reduce using rule 60 (exp -> exp GT exp .)
    THEN            reduce using rule 60 (exp -> exp GT exp .)
    COMMA           reduce using rule 60 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 60 (exp -> exp GT exp .)
    BREAK           reduce using rule 60 (exp -> exp GT exp .)
    DUALCOLON       reduce using rule 60 (exp -> exp GT exp .)
    WHILE           reduce using rule 60 (exp -> exp GT exp .)
    REPEAT          reduce using rule 60 (exp -> exp GT exp .)
    IF              reduce using rule 60 (exp -> exp GT exp .)
    FOR             reduce using rule 60 (exp -> exp GT exp .)
    LOCAL           reduce using rule 60 (exp -> exp GT exp .)
    RETURN          reduce using rule 60 (exp -> exp GT exp .)
    NAME            reduce using rule 60 (exp -> exp GT exp .)
    VAR             reduce using rule 60 (exp -> exp GT exp .)
    LPAREN          reduce using rule 60 (exp -> exp GT exp .)
    FUNCTION        reduce using rule 60 (exp -> exp GT exp .)
    $end            reduce using rule 60 (exp -> exp GT exp .)
    END             reduce using rule 60 (exp -> exp GT exp .)
    UNTIL           reduce using rule 60 (exp -> exp GT exp .)
    RPAREN          reduce using rule 60 (exp -> exp GT exp .)
    RCOLCH          reduce using rule 60 (exp -> exp GT exp .)
    RBRACE          reduce using rule 60 (exp -> exp GT exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95

  ! PLUS            [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! TIMES           [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! EXPO            [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! PERCENTUAL      [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! CONCAT          [ reduce using rule 60 (exp -> exp GT exp .) ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 147

    (61) exp -> exp GTEQUALS exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 61 (exp -> exp GTEQUALS exp .)
    LT              reduce using rule 61 (exp -> exp GTEQUALS exp .)
    LTEQUALS        reduce using rule 61 (exp -> exp GTEQUALS exp .)
    GT              reduce using rule 61 (exp -> exp GTEQUALS exp .)
    GTEQUALS        reduce using rule 61 (exp -> exp GTEQUALS exp .)
    EQUALS          reduce using rule 61 (exp -> exp GTEQUALS exp .)
    DIF             reduce using rule 61 (exp -> exp GTEQUALS exp .)
    AND             reduce using rule 61 (exp -> exp GTEQUALS exp .)
    OR              reduce using rule 61 (exp -> exp GTEQUALS exp .)
    THEN            reduce using rule 61 (exp -> exp GTEQUALS exp .)
    COMMA           reduce using rule 61 (exp -> exp GTEQUALS exp .)
    SEMICOLON       reduce using rule 61 (exp -> exp GTEQUALS exp .)
    BREAK           reduce using rule 61 (exp -> exp GTEQUALS exp .)
    DUALCOLON       reduce using rule 61 (exp -> exp GTEQUALS exp .)
    WHILE           reduce using rule 61 (exp -> exp GTEQUALS exp .)
    REPEAT          reduce using rule 61 (exp -> exp GTEQUALS exp .)
    IF              reduce using rule 61 (exp -> exp GTEQUALS exp .)
    FOR             reduce using rule 61 (exp -> exp GTEQUALS exp .)
    LOCAL           reduce using rule 61 (exp -> exp GTEQUALS exp .)
    RETURN          reduce using rule 61 (exp -> exp GTEQUALS exp .)
    NAME            reduce using rule 61 (exp -> exp GTEQUALS exp .)
    VAR             reduce using rule 61 (exp -> exp GTEQUALS exp .)
    LPAREN          reduce using rule 61 (exp -> exp GTEQUALS exp .)
    FUNCTION        reduce using rule 61 (exp -> exp GTEQUALS exp .)
    $end            reduce using rule 61 (exp -> exp GTEQUALS exp .)
    END             reduce using rule 61 (exp -> exp GTEQUALS exp .)
    UNTIL           reduce using rule 61 (exp -> exp GTEQUALS exp .)
    RPAREN          reduce using rule 61 (exp -> exp GTEQUALS exp .)
    RCOLCH          reduce using rule 61 (exp -> exp GTEQUALS exp .)
    RBRACE          reduce using rule 61 (exp -> exp GTEQUALS exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95

  ! PLUS            [ reduce using rule 61 (exp -> exp GTEQUALS exp .) ]
  ! MINUS           [ reduce using rule 61 (exp -> exp GTEQUALS exp .) ]
  ! TIMES           [ reduce using rule 61 (exp -> exp GTEQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 61 (exp -> exp GTEQUALS exp .) ]
  ! EXPO            [ reduce using rule 61 (exp -> exp GTEQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 61 (exp -> exp GTEQUALS exp .) ]
  ! CONCAT          [ reduce using rule 61 (exp -> exp GTEQUALS exp .) ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 148

    (62) exp -> exp EQUALS exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 62 (exp -> exp EQUALS exp .)
    LT              reduce using rule 62 (exp -> exp EQUALS exp .)
    LTEQUALS        reduce using rule 62 (exp -> exp EQUALS exp .)
    GT              reduce using rule 62 (exp -> exp EQUALS exp .)
    GTEQUALS        reduce using rule 62 (exp -> exp EQUALS exp .)
    EQUALS          reduce using rule 62 (exp -> exp EQUALS exp .)
    DIF             reduce using rule 62 (exp -> exp EQUALS exp .)
    AND             reduce using rule 62 (exp -> exp EQUALS exp .)
    OR              reduce using rule 62 (exp -> exp EQUALS exp .)
    THEN            reduce using rule 62 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 62 (exp -> exp EQUALS exp .)
    SEMICOLON       reduce using rule 62 (exp -> exp EQUALS exp .)
    BREAK           reduce using rule 62 (exp -> exp EQUALS exp .)
    DUALCOLON       reduce using rule 62 (exp -> exp EQUALS exp .)
    WHILE           reduce using rule 62 (exp -> exp EQUALS exp .)
    REPEAT          reduce using rule 62 (exp -> exp EQUALS exp .)
    IF              reduce using rule 62 (exp -> exp EQUALS exp .)
    FOR             reduce using rule 62 (exp -> exp EQUALS exp .)
    LOCAL           reduce using rule 62 (exp -> exp EQUALS exp .)
    RETURN          reduce using rule 62 (exp -> exp EQUALS exp .)
    NAME            reduce using rule 62 (exp -> exp EQUALS exp .)
    VAR             reduce using rule 62 (exp -> exp EQUALS exp .)
    LPAREN          reduce using rule 62 (exp -> exp EQUALS exp .)
    FUNCTION        reduce using rule 62 (exp -> exp EQUALS exp .)
    $end            reduce using rule 62 (exp -> exp EQUALS exp .)
    END             reduce using rule 62 (exp -> exp EQUALS exp .)
    UNTIL           reduce using rule 62 (exp -> exp EQUALS exp .)
    RPAREN          reduce using rule 62 (exp -> exp EQUALS exp .)
    RCOLCH          reduce using rule 62 (exp -> exp EQUALS exp .)
    RBRACE          reduce using rule 62 (exp -> exp EQUALS exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95

  ! PLUS            [ reduce using rule 62 (exp -> exp EQUALS exp .) ]
  ! MINUS           [ reduce using rule 62 (exp -> exp EQUALS exp .) ]
  ! TIMES           [ reduce using rule 62 (exp -> exp EQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 62 (exp -> exp EQUALS exp .) ]
  ! EXPO            [ reduce using rule 62 (exp -> exp EQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 62 (exp -> exp EQUALS exp .) ]
  ! CONCAT          [ reduce using rule 62 (exp -> exp EQUALS exp .) ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 149

    (63) exp -> exp DIF exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 63 (exp -> exp DIF exp .)
    LT              reduce using rule 63 (exp -> exp DIF exp .)
    LTEQUALS        reduce using rule 63 (exp -> exp DIF exp .)
    GT              reduce using rule 63 (exp -> exp DIF exp .)
    GTEQUALS        reduce using rule 63 (exp -> exp DIF exp .)
    EQUALS          reduce using rule 63 (exp -> exp DIF exp .)
    DIF             reduce using rule 63 (exp -> exp DIF exp .)
    AND             reduce using rule 63 (exp -> exp DIF exp .)
    OR              reduce using rule 63 (exp -> exp DIF exp .)
    THEN            reduce using rule 63 (exp -> exp DIF exp .)
    COMMA           reduce using rule 63 (exp -> exp DIF exp .)
    SEMICOLON       reduce using rule 63 (exp -> exp DIF exp .)
    BREAK           reduce using rule 63 (exp -> exp DIF exp .)
    DUALCOLON       reduce using rule 63 (exp -> exp DIF exp .)
    WHILE           reduce using rule 63 (exp -> exp DIF exp .)
    REPEAT          reduce using rule 63 (exp -> exp DIF exp .)
    IF              reduce using rule 63 (exp -> exp DIF exp .)
    FOR             reduce using rule 63 (exp -> exp DIF exp .)
    LOCAL           reduce using rule 63 (exp -> exp DIF exp .)
    RETURN          reduce using rule 63 (exp -> exp DIF exp .)
    NAME            reduce using rule 63 (exp -> exp DIF exp .)
    VAR             reduce using rule 63 (exp -> exp DIF exp .)
    LPAREN          reduce using rule 63 (exp -> exp DIF exp .)
    FUNCTION        reduce using rule 63 (exp -> exp DIF exp .)
    $end            reduce using rule 63 (exp -> exp DIF exp .)
    END             reduce using rule 63 (exp -> exp DIF exp .)
    UNTIL           reduce using rule 63 (exp -> exp DIF exp .)
    RPAREN          reduce using rule 63 (exp -> exp DIF exp .)
    RCOLCH          reduce using rule 63 (exp -> exp DIF exp .)
    RBRACE          reduce using rule 63 (exp -> exp DIF exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95

  ! PLUS            [ reduce using rule 63 (exp -> exp DIF exp .) ]
  ! MINUS           [ reduce using rule 63 (exp -> exp DIF exp .) ]
  ! TIMES           [ reduce using rule 63 (exp -> exp DIF exp .) ]
  ! DIVIDE          [ reduce using rule 63 (exp -> exp DIF exp .) ]
  ! EXPO            [ reduce using rule 63 (exp -> exp DIF exp .) ]
  ! PERCENTUAL      [ reduce using rule 63 (exp -> exp DIF exp .) ]
  ! CONCAT          [ reduce using rule 63 (exp -> exp DIF exp .) ]
  ! LT              [ shift and go to state 96 ]
  ! LTEQUALS        [ shift and go to state 97 ]
  ! GT              [ shift and go to state 98 ]
  ! GTEQUALS        [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! DIF             [ shift and go to state 101 ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 150

    (64) exp -> exp AND exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 64 (exp -> exp AND exp .)
    AND             reduce using rule 64 (exp -> exp AND exp .)
    OR              reduce using rule 64 (exp -> exp AND exp .)
    THEN            reduce using rule 64 (exp -> exp AND exp .)
    COMMA           reduce using rule 64 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 64 (exp -> exp AND exp .)
    BREAK           reduce using rule 64 (exp -> exp AND exp .)
    DUALCOLON       reduce using rule 64 (exp -> exp AND exp .)
    WHILE           reduce using rule 64 (exp -> exp AND exp .)
    REPEAT          reduce using rule 64 (exp -> exp AND exp .)
    IF              reduce using rule 64 (exp -> exp AND exp .)
    FOR             reduce using rule 64 (exp -> exp AND exp .)
    LOCAL           reduce using rule 64 (exp -> exp AND exp .)
    RETURN          reduce using rule 64 (exp -> exp AND exp .)
    NAME            reduce using rule 64 (exp -> exp AND exp .)
    VAR             reduce using rule 64 (exp -> exp AND exp .)
    LPAREN          reduce using rule 64 (exp -> exp AND exp .)
    FUNCTION        reduce using rule 64 (exp -> exp AND exp .)
    $end            reduce using rule 64 (exp -> exp AND exp .)
    END             reduce using rule 64 (exp -> exp AND exp .)
    UNTIL           reduce using rule 64 (exp -> exp AND exp .)
    RPAREN          reduce using rule 64 (exp -> exp AND exp .)
    RCOLCH          reduce using rule 64 (exp -> exp AND exp .)
    RBRACE          reduce using rule 64 (exp -> exp AND exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101

  ! PLUS            [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! TIMES           [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! EXPO            [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! PERCENTUAL      [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! CONCAT          [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! LTEQUALS        [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! GTEQUALS        [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! EQUALS          [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! DIF             [ reduce using rule 64 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 102 ]
  ! OR              [ shift and go to state 103 ]


state 151

    (65) exp -> exp OR exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              reduce using rule 65 (exp -> exp OR exp .)
    OR              reduce using rule 65 (exp -> exp OR exp .)
    THEN            reduce using rule 65 (exp -> exp OR exp .)
    COMMA           reduce using rule 65 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 65 (exp -> exp OR exp .)
    BREAK           reduce using rule 65 (exp -> exp OR exp .)
    DUALCOLON       reduce using rule 65 (exp -> exp OR exp .)
    WHILE           reduce using rule 65 (exp -> exp OR exp .)
    REPEAT          reduce using rule 65 (exp -> exp OR exp .)
    IF              reduce using rule 65 (exp -> exp OR exp .)
    FOR             reduce using rule 65 (exp -> exp OR exp .)
    LOCAL           reduce using rule 65 (exp -> exp OR exp .)
    RETURN          reduce using rule 65 (exp -> exp OR exp .)
    NAME            reduce using rule 65 (exp -> exp OR exp .)
    VAR             reduce using rule 65 (exp -> exp OR exp .)
    LPAREN          reduce using rule 65 (exp -> exp OR exp .)
    FUNCTION        reduce using rule 65 (exp -> exp OR exp .)
    $end            reduce using rule 65 (exp -> exp OR exp .)
    END             reduce using rule 65 (exp -> exp OR exp .)
    UNTIL           reduce using rule 65 (exp -> exp OR exp .)
    RPAREN          reduce using rule 65 (exp -> exp OR exp .)
    RCOLCH          reduce using rule 65 (exp -> exp OR exp .)
    RBRACE          reduce using rule 65 (exp -> exp OR exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102

  ! PLUS            [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! TIMES           [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! EXPO            [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! PERCENTUAL      [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! CONCAT          [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! LTEQUALS        [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! GTEQUALS        [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! EQUALS          [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! DIF             [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 65 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 103 ]


state 152

    (68) exp_prefix -> LPAREN exp RPAREN .

    COLON           reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    DO              reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    EXPO            reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    PERCENTUAL      reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    CONCAT          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    LT              reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    LTEQUALS        reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    GT              reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    GTEQUALS        reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    DIF             reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    AND             reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    OR              reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    THEN            reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    BREAK           reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    DUALCOLON       reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    WHILE           reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    REPEAT          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    IF              reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    FOR             reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    LOCAL           reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    NAME            reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    VAR             reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    FUNCTION        reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    $end            reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    END             reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    UNTIL           reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    RCOLCH          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    RBRACE          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)


state 153

    (100) struct_repeat -> REPEAT block UNTIL exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    SEMICOLON       reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    BREAK           reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    DO              reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    DUALCOLON       reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    WHILE           reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    REPEAT          reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    IF              reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    FOR             reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    LOCAL           reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    RETURN          reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    NAME            reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    VAR             reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    LPAREN          reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    FUNCTION        reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    $end            reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    END             reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    UNTIL           reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 154

    (93) if -> IF exp THEN block . END

    END             shift and go to state 175


state 155

    (94) if -> IF exp THEN else .

    SEMICOLON       reduce using rule 94 (if -> IF exp THEN else .)
    BREAK           reduce using rule 94 (if -> IF exp THEN else .)
    DO              reduce using rule 94 (if -> IF exp THEN else .)
    DUALCOLON       reduce using rule 94 (if -> IF exp THEN else .)
    WHILE           reduce using rule 94 (if -> IF exp THEN else .)
    REPEAT          reduce using rule 94 (if -> IF exp THEN else .)
    IF              reduce using rule 94 (if -> IF exp THEN else .)
    FOR             reduce using rule 94 (if -> IF exp THEN else .)
    LOCAL           reduce using rule 94 (if -> IF exp THEN else .)
    RETURN          reduce using rule 94 (if -> IF exp THEN else .)
    NAME            reduce using rule 94 (if -> IF exp THEN else .)
    VAR             reduce using rule 94 (if -> IF exp THEN else .)
    LPAREN          reduce using rule 94 (if -> IF exp THEN else .)
    FUNCTION        reduce using rule 94 (if -> IF exp THEN else .)
    $end            reduce using rule 94 (if -> IF exp THEN else .)
    END             reduce using rule 94 (if -> IF exp THEN else .)
    UNTIL           reduce using rule 94 (if -> IF exp THEN else .)


state 156

    (95) else -> ELSE . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    block                          shift and go to state 176
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 157

    (97) struct_for -> FOR NAME ATRIB exp . COMMA exp DO block END
    (98) struct_for -> FOR NAME ATRIB exp . COMMA exp COMMA exp DO block END
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    COMMA           shift and go to state 177
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 158

    (35) list_names -> NAME COMMA list_names .

    IN              reduce using rule 35 (list_names -> NAME COMMA list_names .)
    ATRIB           reduce using rule 35 (list_names -> NAME COMMA list_names .)
    COMMA           reduce using rule 35 (list_names -> NAME COMMA list_names .)


state 159

    (99) struct_for_in -> FOR list_names IN list_exps . DO block END

    DO              shift and go to state 178


state 160

    (90) local_var -> LOCAL list_names ATRIB list_exps .

    SEMICOLON       reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    BREAK           reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    DO              reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    DUALCOLON       reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    WHILE           reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    REPEAT          reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    IF              reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    FOR             reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    LOCAL           reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    RETURN          reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    NAME            reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    VAR             reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    LPAREN          reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    FUNCTION        reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    $end            reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    END             reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)
    UNTIL           reduce using rule 90 (local_var -> LOCAL list_names ATRIB list_exps .)


state 161

    (91) local_var -> LOCAL NAME ATRIB exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    SEMICOLON       reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    BREAK           reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    DO              reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    DUALCOLON       reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    WHILE           reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    REPEAT          reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    IF              reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    FOR             reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    LOCAL           reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    RETURN          reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    NAME            reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    VAR             reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    LPAREN          reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    FUNCTION        reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    $end            reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    END             reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    UNTIL           reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 162

    (101) local_function -> LOCAL FUNCTION name_function body_function .

    SEMICOLON       reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    BREAK           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    DO              reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    DUALCOLON       reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    WHILE           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    REPEAT          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    IF              reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    FOR             reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    LOCAL           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    RETURN          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    NAME            reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    VAR             reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    LPAREN          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    FUNCTION        reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    $end            reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    END             reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    UNTIL           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    PLUS            reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    MINUS           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    TIMES           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    DIVIDE          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    EXPO            reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    PERCENTUAL      reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    CONCAT          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    LT              reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    LTEQUALS        reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    GT              reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    GTEQUALS        reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    EQUALS          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    DIF             reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    AND             reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    OR              reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    THEN            reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    COMMA           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    RPAREN          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    RCOLCH          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    RBRACE          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)


state 163

    (25) name_function -> NAME DOT . NAME

    NAME            shift and go to state 179


state 164

    (26) name_function -> NAME COLON . NAME

    NAME            shift and go to state 180


state 165

    (37) list_exps -> exp COMMA list_exps .

    SEMICOLON       reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    BREAK           reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    DO              reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    DUALCOLON       reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    WHILE           reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    REPEAT          reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    IF              reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    FOR             reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    LOCAL           reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    RETURN          reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    NAME            reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    VAR             reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    LPAREN          reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    FUNCTION        reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    $end            reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    END             reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    UNTIL           reduce using rule 37 (list_exps -> exp COMMA list_exps .)
    RPAREN          reduce using rule 37 (list_exps -> exp COMMA list_exps .)


state 166

    (30) var -> prefix_exp LCOLCH exp RCOLCH .

    COMMA           reduce using rule 30 (var -> prefix_exp LCOLCH exp RCOLCH .)
    ATRIB           reduce using rule 30 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LCOLCH          reduce using rule 30 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DOT             reduce using rule 30 (var -> prefix_exp LCOLCH exp RCOLCH .)


state 167

    (75) body_function -> LPAREN list_pars RPAREN . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    block                          shift and go to state 181
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 168

    (76) list_pars -> list_names COMMA . VARARGS

    VARARGS         shift and go to state 182


state 169

    (34) prefix_exp -> LPAREN exp RPAREN .
    (68) exp_prefix -> LPAREN exp RPAREN .

    LCOLCH          reduce using rule 34 (prefix_exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 34 (prefix_exp -> LPAREN exp RPAREN .)
    COLON           reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 68 (exp_prefix -> LPAREN exp RPAREN .)


state 170

    (81) list_fields -> field separator_fields list_fields .

    RBRACE          reduce using rule 81 (list_fields -> field separator_fields list_fields .)


state 171

    (83) list_fields -> field_empty separator_fields list_fields .

    RBRACE          reduce using rule 83 (list_fields -> field_empty separator_fields list_fields .)


state 172

    (86) field -> LCOLCH exp RCOLCH . ATRIB exp
    (84) field_empty -> LCOLCH exp RCOLCH .

    ATRIB           shift and go to state 183
    COMMA           reduce using rule 84 (field_empty -> LCOLCH exp RCOLCH .)
    SEMICOLON       reduce using rule 84 (field_empty -> LCOLCH exp RCOLCH .)
    RBRACE          reduce using rule 84 (field_empty -> LCOLCH exp RCOLCH .)


state 173

    (87) field -> NAME ATRIB exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    COMMA           reduce using rule 87 (field -> NAME ATRIB exp .)
    SEMICOLON       reduce using rule 87 (field -> NAME ATRIB exp .)
    RBRACE          reduce using rule 87 (field -> NAME ATRIB exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 174

    (96) struct_while -> WHILE exp DO block END .

    SEMICOLON       reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    BREAK           reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    DO              reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    DUALCOLON       reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    WHILE           reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    REPEAT          reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    IF              reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    FOR             reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    LOCAL           reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    RETURN          reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    NAME            reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    VAR             reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    LPAREN          reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    FUNCTION        reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    $end            reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    END             reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    UNTIL           reduce using rule 96 (struct_while -> WHILE exp DO block END .)


state 175

    (93) if -> IF exp THEN block END .

    SEMICOLON       reduce using rule 93 (if -> IF exp THEN block END .)
    BREAK           reduce using rule 93 (if -> IF exp THEN block END .)
    DO              reduce using rule 93 (if -> IF exp THEN block END .)
    DUALCOLON       reduce using rule 93 (if -> IF exp THEN block END .)
    WHILE           reduce using rule 93 (if -> IF exp THEN block END .)
    REPEAT          reduce using rule 93 (if -> IF exp THEN block END .)
    IF              reduce using rule 93 (if -> IF exp THEN block END .)
    FOR             reduce using rule 93 (if -> IF exp THEN block END .)
    LOCAL           reduce using rule 93 (if -> IF exp THEN block END .)
    RETURN          reduce using rule 93 (if -> IF exp THEN block END .)
    NAME            reduce using rule 93 (if -> IF exp THEN block END .)
    VAR             reduce using rule 93 (if -> IF exp THEN block END .)
    LPAREN          reduce using rule 93 (if -> IF exp THEN block END .)
    FUNCTION        reduce using rule 93 (if -> IF exp THEN block END .)
    $end            reduce using rule 93 (if -> IF exp THEN block END .)
    END             reduce using rule 93 (if -> IF exp THEN block END .)
    UNTIL           reduce using rule 93 (if -> IF exp THEN block END .)


state 176

    (95) else -> ELSE block . END

    END             shift and go to state 184


state 177

    (97) struct_for -> FOR NAME ATRIB exp COMMA . exp DO block END
    (98) struct_for -> FOR NAME ATRIB exp COMMA . exp COMMA exp DO block END
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 185
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 178

    (99) struct_for_in -> FOR list_names IN list_exps DO . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    block                          shift and go to state 186
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 179

    (25) name_function -> NAME DOT NAME .

    LPAREN          reduce using rule 25 (name_function -> NAME DOT NAME .)


state 180

    (26) name_function -> NAME COLON NAME .

    LPAREN          reduce using rule 26 (name_function -> NAME COLON NAME .)


state 181

    (75) body_function -> LPAREN list_pars RPAREN block . END

    END             shift and go to state 187


state 182

    (76) list_pars -> list_names COMMA VARARGS .

    RPAREN          reduce using rule 76 (list_pars -> list_names COMMA VARARGS .)


state 183

    (86) field -> LCOLCH exp RCOLCH ATRIB . exp
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 188
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 184

    (95) else -> ELSE block END .

    SEMICOLON       reduce using rule 95 (else -> ELSE block END .)
    BREAK           reduce using rule 95 (else -> ELSE block END .)
    DO              reduce using rule 95 (else -> ELSE block END .)
    DUALCOLON       reduce using rule 95 (else -> ELSE block END .)
    WHILE           reduce using rule 95 (else -> ELSE block END .)
    REPEAT          reduce using rule 95 (else -> ELSE block END .)
    IF              reduce using rule 95 (else -> ELSE block END .)
    FOR             reduce using rule 95 (else -> ELSE block END .)
    LOCAL           reduce using rule 95 (else -> ELSE block END .)
    RETURN          reduce using rule 95 (else -> ELSE block END .)
    NAME            reduce using rule 95 (else -> ELSE block END .)
    VAR             reduce using rule 95 (else -> ELSE block END .)
    LPAREN          reduce using rule 95 (else -> ELSE block END .)
    FUNCTION        reduce using rule 95 (else -> ELSE block END .)
    $end            reduce using rule 95 (else -> ELSE block END .)
    END             reduce using rule 95 (else -> ELSE block END .)
    UNTIL           reduce using rule 95 (else -> ELSE block END .)


state 185

    (97) struct_for -> FOR NAME ATRIB exp COMMA exp . DO block END
    (98) struct_for -> FOR NAME ATRIB exp COMMA exp . COMMA exp DO block END
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              shift and go to state 190
    COMMA           shift and go to state 189
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 186

    (99) struct_for_in -> FOR list_names IN list_exps DO block . END

    END             shift and go to state 191


state 187

    (75) body_function -> LPAREN list_pars RPAREN block END .

    SEMICOLON       reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    BREAK           reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    DO              reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    DUALCOLON       reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    WHILE           reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    REPEAT          reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    IF              reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    FOR             reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    LOCAL           reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    RETURN          reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    NAME            reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    VAR             reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    LPAREN          reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    FUNCTION        reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    $end            reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    END             reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    UNTIL           reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    PLUS            reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    MINUS           reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    TIMES           reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    DIVIDE          reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    EXPO            reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    PERCENTUAL      reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    CONCAT          reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    LT              reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    LTEQUALS        reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    GT              reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    GTEQUALS        reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    EQUALS          reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    DIF             reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    AND             reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    OR              reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    THEN            reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    COMMA           reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    RPAREN          reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    RCOLCH          reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)
    RBRACE          reduce using rule 75 (body_function -> LPAREN list_pars RPAREN block END .)


state 188

    (86) field -> LCOLCH exp RCOLCH ATRIB exp .
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    COMMA           reduce using rule 86 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    SEMICOLON       reduce using rule 86 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    RBRACE          reduce using rule 86 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 189

    (98) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA . exp DO block END
    (39) exp -> . NIL
    (40) exp -> . FALSE
    (41) exp -> . TRUE
    (42) exp -> . NUMBER
    (43) exp -> . STRING
    (44) exp -> . VARARGS
    (45) exp -> . def_function
    (46) exp -> . exp_prefix
    (47) exp -> . construct_table
    (48) exp -> . TAG exp
    (49) exp -> . MINUS exp
    (50) exp -> . NOT exp
    (51) exp -> . exp PLUS exp
    (52) exp -> . exp MINUS exp
    (53) exp -> . exp TIMES exp
    (54) exp -> . exp DIVIDE exp
    (55) exp -> . exp EXPO exp
    (56) exp -> . exp PERCENTUAL exp
    (57) exp -> . exp CONCAT exp
    (58) exp -> . exp LT exp
    (59) exp -> . exp LTEQUALS exp
    (60) exp -> . exp GT exp
    (61) exp -> . exp GTEQUALS exp
    (62) exp -> . exp EQUALS exp
    (63) exp -> . exp DIF exp
    (64) exp -> . exp AND exp
    (65) exp -> . exp OR exp
    (73) def_function -> . function
    (74) def_function -> . local_function
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (78) construct_table -> . LBRACE list_fields RBRACE
    (79) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 45
    FALSE           shift and go to state 46
    TRUE            shift and go to state 47
    NUMBER          shift and go to state 48
    STRING          shift and go to state 49
    VARARGS         shift and go to state 50
    TAG             shift and go to state 54
    MINUS           shift and go to state 55
    NOT             shift and go to state 56
    VAR             shift and go to state 31
    LPAREN          shift and go to state 58
    LBRACE          shift and go to state 42
    FUNCTION        shift and go to state 33
    LOCAL           shift and go to state 59

    exp                            shift and go to state 192
    def_function                   shift and go to state 51
    exp_prefix                     shift and go to state 52
    construct_table                shift and go to state 53
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 57

state 190

    (97) struct_for -> FOR NAME ATRIB exp COMMA exp DO . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    block                          shift and go to state 193
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 191

    (99) struct_for_in -> FOR list_names IN list_exps DO block END .

    SEMICOLON       reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    BREAK           reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    DO              reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    DUALCOLON       reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    WHILE           reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    REPEAT          reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    IF              reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    FOR             reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    LOCAL           reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    RETURN          reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    NAME            reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    VAR             reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    LPAREN          reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    FUNCTION        reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    $end            reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    END             reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    UNTIL           reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)


state 192

    (98) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp . DO block END
    (51) exp -> exp . PLUS exp
    (52) exp -> exp . MINUS exp
    (53) exp -> exp . TIMES exp
    (54) exp -> exp . DIVIDE exp
    (55) exp -> exp . EXPO exp
    (56) exp -> exp . PERCENTUAL exp
    (57) exp -> exp . CONCAT exp
    (58) exp -> exp . LT exp
    (59) exp -> exp . LTEQUALS exp
    (60) exp -> exp . GT exp
    (61) exp -> exp . GTEQUALS exp
    (62) exp -> exp . EQUALS exp
    (63) exp -> exp . DIF exp
    (64) exp -> exp . AND exp
    (65) exp -> exp . OR exp

    DO              shift and go to state 194
    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
    EXPO            shift and go to state 93
    PERCENTUAL      shift and go to state 94
    CONCAT          shift and go to state 95
    LT              shift and go to state 96
    LTEQUALS        shift and go to state 97
    GT              shift and go to state 98
    GTEQUALS        shift and go to state 99
    EQUALS          shift and go to state 100
    DIF             shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103


state 193

    (97) struct_for -> FOR NAME ATRIB exp COMMA exp DO block . END

    END             shift and go to state 195


state 194

    (98) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (27) list_vars -> . var
    (28) list_vars -> . var COMMA list_vars
    (69) call_function -> . exp_prefix args
    (70) call_function -> . exp_prefix COLON NAME args
    (23) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (73) def_function -> . function
    (74) def_function -> . local_function
    (90) local_var -> . LOCAL list_names ATRIB list_exps
    (91) local_var -> . LOCAL NAME ATRIB exp
    (20) command_ret -> . RETURN
    (21) command_ret -> . RETURN list_exps
    (22) command_ret -> . RETURN list_exps SEMICOLON
    (29) var -> . NAME
    (30) var -> . prefix_exp LCOLCH exp RCOLCH
    (31) var -> . prefix_exp DOT NAME
    (66) exp_prefix -> . VAR
    (67) exp_prefix -> . call_function
    (68) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (32) prefix_exp -> . var
    (33) prefix_exp -> . call_function
    (34) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 21
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 20
    VAR             shift and go to state 31
    LPAREN          shift and go to state 32
    FUNCTION        shift and go to state 33

    block                          shift and go to state 196
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 195

    (97) struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .

    SEMICOLON       reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    BREAK           reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    DO              reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    DUALCOLON       reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    WHILE           reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    REPEAT          reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    IF              reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    FOR             reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    LOCAL           reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    RETURN          reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    NAME            reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    VAR             reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    LPAREN          reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    FUNCTION        reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    $end            reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    END             reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    UNTIL           reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)


state 196

    (98) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block . END

    END             shift and go to state 197


state 197

    (98) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .

    SEMICOLON       reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    BREAK           reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    DO              reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    DUALCOLON       reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    WHILE           reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    REPEAT          reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    IF              reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    FOR             reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    LOCAL           reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    RETURN          reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    NAME            reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    VAR             reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    LPAREN          reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    FUNCTION        reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    $end            reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    END             reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    UNTIL           reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 29 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 29 resolved as shift
WARNING: shift/reduce conflict for LOCAL in state 29 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 52 resolved as shift
WARNING: shift/reduce conflict for ATRIB in state 65 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 67 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 125 resolved as shift
WARNING: reduce/reduce conflict in state 6 resolved using rule (command -> call_function)
WARNING: rejected rule (exp_prefix -> call_function) in state 6
