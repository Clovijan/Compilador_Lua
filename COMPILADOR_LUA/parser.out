Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> command
Rule 3     block -> command block
Rule 4     command -> SEMICOLON
Rule 5     command -> list_vars ATRIB list_exps
Rule 6     command -> call_function
Rule 7     command -> rotulo
Rule 8     command -> BREAK
Rule 9     command -> DO block END
Rule 10    command -> struct_while
Rule 11    command -> struct_repeat
Rule 12    command -> if
Rule 13    command -> struct_for
Rule 14    command -> struct_for_in
Rule 15    command -> def_function
Rule 16    command -> local_var
Rule 17    command -> command_ret
Rule 18    command_ret -> RETURN
Rule 19    command_ret -> RETURN list_exps
Rule 20    command_ret -> RETURN list_exps SEMICOLON
Rule 21    rotulo -> DUALCOLON NAME DUALCOLON
Rule 22    name_function -> NAME
Rule 23    name_function -> NAME DOT NAME
Rule 24    name_function -> NAME COLON NAME
Rule 25    list_vars -> var
Rule 26    list_vars -> var COMMA list_vars
Rule 27    var -> NAME
Rule 28    var -> prefix_exp LCOLCH exp RCOLCH
Rule 29    var -> prefix_exp DOT NAME
Rule 30    prefix_exp -> var
Rule 31    prefix_exp -> call_function
Rule 32    prefix_exp -> LPAREN exp RPAREN
Rule 33    list_names -> NAME COMMA list_names
Rule 34    list_names -> NAME
Rule 35    list_exps -> exp COMMA list_exps
Rule 36    list_exps -> exp
Rule 37    exp -> var
Rule 38    exp -> NIL
Rule 39    exp -> FALSE
Rule 40    exp -> TRUE
Rule 41    exp -> NUMBER
Rule 42    exp -> STRING
Rule 43    exp -> VARARGS
Rule 44    exp -> def_function
Rule 45    exp -> exp_prefix
Rule 46    exp -> construct_table
Rule 47    exp -> TAG exp
Rule 48    exp -> MINUS exp
Rule 49    exp -> NOT exp
Rule 50    exp -> exp PLUS exp
Rule 51    exp -> exp MINUS exp
Rule 52    exp -> exp TIMES exp
Rule 53    exp -> exp DIVIDE exp
Rule 54    exp -> exp EXPO exp
Rule 55    exp -> exp PERCENTUAL exp
Rule 56    exp -> exp CONCAT exp
Rule 57    exp -> exp LT exp
Rule 58    exp -> exp LTEQUALS exp
Rule 59    exp -> exp GT exp
Rule 60    exp -> exp GTEQUALS exp
Rule 61    exp -> exp EQUALS exp
Rule 62    exp -> exp DIF exp
Rule 63    exp -> exp AND exp
Rule 64    exp -> exp OR exp
Rule 65    exp_prefix -> var
Rule 66    exp_prefix -> LPAREN exp RPAREN
Rule 67    call_function -> exp_prefix args
Rule 68    args -> LPAREN list_exps RPAREN
Rule 69    args -> LPAREN RPAREN
Rule 70    args -> construct_table
Rule 71    def_function -> function
Rule 72    def_function -> local_function
Rule 73    body_function -> LPAREN list_pars RPAREN block END
Rule 74    list_pars -> list_names
Rule 75    list_pars -> list_names COMMA VARARGS
Rule 76    list_pars -> VARARGS
Rule 77    construct_table -> LBRACE list_fields RBRACE
Rule 78    construct_table -> LBRACE RBRACE
Rule 79    list_fields -> field
Rule 80    list_fields -> field separator_fields list_fields
Rule 81    list_fields -> field_empty
Rule 82    list_fields -> field_empty separator_fields list_fields
Rule 83    field_empty -> LCOLCH exp RCOLCH
Rule 84    field_empty -> NAME
Rule 85    field -> LCOLCH exp RCOLCH ATRIB exp
Rule 86    field -> NAME ATRIB exp
Rule 87    separator_fields -> COMMA
Rule 88    separator_fields -> SEMICOLON
Rule 89    local_var -> LOCAL list_names ATRIB list_exps
Rule 90    local_var -> LOCAL list_names
Rule 91    local_var -> LOCAL NAME ATRIB exp
Rule 92    function -> FUNCTION name_function body_function
Rule 93    if -> IF exp THEN block END
Rule 94    if -> IF exp THEN else
Rule 95    if -> IF exp THEN block else_if else
Rule 96    else_if -> ELSEIF exp THEN block
Rule 97    else_if -> ELSEIF exp THEN block else_if
Rule 98    else -> ELSE block END
Rule 99    struct_while -> WHILE exp DO block END
Rule 100   struct_for -> FOR NAME ATRIB exp COMMA exp DO block END
Rule 101   struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
Rule 102   struct_for_in -> FOR list_names IN list_exps DO block END
Rule 103   struct_repeat -> REPEAT block UNTIL exp
Rule 104   local_function -> LOCAL FUNCTION NAME body_function

Terminals, with rules where they appear

AND                  : 63
ATRIB                : 5 85 86 89 91 100 101
BREAK                : 8
COLON                : 24
COMMA                : 26 33 35 75 87 100 101 101
CONCAT               : 56
DIF                  : 62
DIVIDE               : 53
DO                   : 9 99 100 101 102
DOT                  : 23 29
DUALCOLON            : 21 21
ELSE                 : 98
ELSEIF               : 96 97
END                  : 9 73 93 98 99 100 101 102
EQUALS               : 61
EXPO                 : 54
FALSE                : 39
FOR                  : 100 101 102
FUNCTION             : 92 104
GT                   : 59
GTEQUALS             : 60
IF                   : 93 94 95
IN                   : 102
LBRACE               : 77 78
LCOLCH               : 28 83 85
LOCAL                : 89 90 91 104
LPAREN               : 32 66 68 69 73
LT                   : 57
LTEQUALS             : 58
MINUS                : 48 51
NAME                 : 21 22 23 23 24 24 27 29 33 34 84 86 91 100 101 104
NIL                  : 38
NOT                  : 49
NUMBER               : 41
OR                   : 64
PERCENTUAL           : 55
PLUS                 : 50
RBRACE               : 77 78
RCOLCH               : 28 83 85
REPEAT               : 103
RETURN               : 18 19 20
RPAREN               : 32 66 68 69 73
SEMICOLON            : 4 20 88
STRING               : 42
TAG                  : 47
THEN                 : 93 94 95 96 97
TIMES                : 52
TRUE                 : 40
UNTIL                : 103
VAR                  : 
VARARGS              : 43 75 76
WHILE                : 99
error                : 

Nonterminals, with rules where they appear

args                 : 67
block                : 1 3 9 73 93 95 96 97 98 99 100 101 102 103
body_function        : 92 104
call_function        : 6 31
command              : 2 3
command_ret          : 17
construct_table      : 46 70
def_function         : 15 44
else                 : 94 95
else_if              : 95 97
exp                  : 28 32 35 36 47 48 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 66 83 85 85 86 91 93 94 95 96 97 99 100 100 101 101 101 103
exp_prefix           : 45 67
field                : 79 80
field_empty          : 81 82
function             : 71
if                   : 12
list_exps            : 5 19 20 35 68 89 102
list_fields          : 77 80 82
list_names           : 33 74 75 89 90 102
list_pars            : 73
list_vars            : 5 26
local_function       : 72
local_var            : 16
name_function        : 92
prefix_exp           : 28 29
program              : 0
rotulo               : 7
separator_fields     : 80 82
struct_for           : 13
struct_for_in        : 14
struct_repeat        : 11
struct_while         : 10
var                  : 25 26 30 37 65

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    program                        shift and go to state 1
    block                          shift and go to state 2
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> command .
    (3) block -> command . block
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    $end            reduce using rule 2 (block -> command .)
    END             reduce using rule 2 (block -> command .)
    UNTIL           reduce using rule 2 (block -> command .)
    ELSEIF          reduce using rule 2 (block -> command .)
    ELSE            reduce using rule 2 (block -> command .)
    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    command                        shift and go to state 3
    block                          shift and go to state 33
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 4

    (4) command -> SEMICOLON .

    SEMICOLON       reduce using rule 4 (command -> SEMICOLON .)
    BREAK           reduce using rule 4 (command -> SEMICOLON .)
    DO              reduce using rule 4 (command -> SEMICOLON .)
    DUALCOLON       reduce using rule 4 (command -> SEMICOLON .)
    WHILE           reduce using rule 4 (command -> SEMICOLON .)
    REPEAT          reduce using rule 4 (command -> SEMICOLON .)
    IF              reduce using rule 4 (command -> SEMICOLON .)
    FOR             reduce using rule 4 (command -> SEMICOLON .)
    LOCAL           reduce using rule 4 (command -> SEMICOLON .)
    RETURN          reduce using rule 4 (command -> SEMICOLON .)
    NAME            reduce using rule 4 (command -> SEMICOLON .)
    LPAREN          reduce using rule 4 (command -> SEMICOLON .)
    FUNCTION        reduce using rule 4 (command -> SEMICOLON .)
    $end            reduce using rule 4 (command -> SEMICOLON .)
    END             reduce using rule 4 (command -> SEMICOLON .)
    UNTIL           reduce using rule 4 (command -> SEMICOLON .)
    ELSEIF          reduce using rule 4 (command -> SEMICOLON .)
    ELSE            reduce using rule 4 (command -> SEMICOLON .)


state 5

    (5) command -> list_vars . ATRIB list_exps

    ATRIB           shift and go to state 34


state 6

    (6) command -> call_function .
    (31) prefix_exp -> call_function .

    SEMICOLON       reduce using rule 6 (command -> call_function .)
    BREAK           reduce using rule 6 (command -> call_function .)
    DO              reduce using rule 6 (command -> call_function .)
    DUALCOLON       reduce using rule 6 (command -> call_function .)
    WHILE           reduce using rule 6 (command -> call_function .)
    REPEAT          reduce using rule 6 (command -> call_function .)
    IF              reduce using rule 6 (command -> call_function .)
    FOR             reduce using rule 6 (command -> call_function .)
    LOCAL           reduce using rule 6 (command -> call_function .)
    RETURN          reduce using rule 6 (command -> call_function .)
    NAME            reduce using rule 6 (command -> call_function .)
    LPAREN          reduce using rule 6 (command -> call_function .)
    FUNCTION        reduce using rule 6 (command -> call_function .)
    $end            reduce using rule 6 (command -> call_function .)
    END             reduce using rule 6 (command -> call_function .)
    UNTIL           reduce using rule 6 (command -> call_function .)
    ELSEIF          reduce using rule 6 (command -> call_function .)
    ELSE            reduce using rule 6 (command -> call_function .)
    LCOLCH          reduce using rule 31 (prefix_exp -> call_function .)
    DOT             reduce using rule 31 (prefix_exp -> call_function .)


state 7

    (7) command -> rotulo .

    SEMICOLON       reduce using rule 7 (command -> rotulo .)
    BREAK           reduce using rule 7 (command -> rotulo .)
    DO              reduce using rule 7 (command -> rotulo .)
    DUALCOLON       reduce using rule 7 (command -> rotulo .)
    WHILE           reduce using rule 7 (command -> rotulo .)
    REPEAT          reduce using rule 7 (command -> rotulo .)
    IF              reduce using rule 7 (command -> rotulo .)
    FOR             reduce using rule 7 (command -> rotulo .)
    LOCAL           reduce using rule 7 (command -> rotulo .)
    RETURN          reduce using rule 7 (command -> rotulo .)
    NAME            reduce using rule 7 (command -> rotulo .)
    LPAREN          reduce using rule 7 (command -> rotulo .)
    FUNCTION        reduce using rule 7 (command -> rotulo .)
    $end            reduce using rule 7 (command -> rotulo .)
    END             reduce using rule 7 (command -> rotulo .)
    UNTIL           reduce using rule 7 (command -> rotulo .)
    ELSEIF          reduce using rule 7 (command -> rotulo .)
    ELSE            reduce using rule 7 (command -> rotulo .)


state 8

    (8) command -> BREAK .

    SEMICOLON       reduce using rule 8 (command -> BREAK .)
    BREAK           reduce using rule 8 (command -> BREAK .)
    DO              reduce using rule 8 (command -> BREAK .)
    DUALCOLON       reduce using rule 8 (command -> BREAK .)
    WHILE           reduce using rule 8 (command -> BREAK .)
    REPEAT          reduce using rule 8 (command -> BREAK .)
    IF              reduce using rule 8 (command -> BREAK .)
    FOR             reduce using rule 8 (command -> BREAK .)
    LOCAL           reduce using rule 8 (command -> BREAK .)
    RETURN          reduce using rule 8 (command -> BREAK .)
    NAME            reduce using rule 8 (command -> BREAK .)
    LPAREN          reduce using rule 8 (command -> BREAK .)
    FUNCTION        reduce using rule 8 (command -> BREAK .)
    $end            reduce using rule 8 (command -> BREAK .)
    END             reduce using rule 8 (command -> BREAK .)
    UNTIL           reduce using rule 8 (command -> BREAK .)
    ELSEIF          reduce using rule 8 (command -> BREAK .)
    ELSE            reduce using rule 8 (command -> BREAK .)


state 9

    (9) command -> DO . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 35
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 10

    (10) command -> struct_while .

    SEMICOLON       reduce using rule 10 (command -> struct_while .)
    BREAK           reduce using rule 10 (command -> struct_while .)
    DO              reduce using rule 10 (command -> struct_while .)
    DUALCOLON       reduce using rule 10 (command -> struct_while .)
    WHILE           reduce using rule 10 (command -> struct_while .)
    REPEAT          reduce using rule 10 (command -> struct_while .)
    IF              reduce using rule 10 (command -> struct_while .)
    FOR             reduce using rule 10 (command -> struct_while .)
    LOCAL           reduce using rule 10 (command -> struct_while .)
    RETURN          reduce using rule 10 (command -> struct_while .)
    NAME            reduce using rule 10 (command -> struct_while .)
    LPAREN          reduce using rule 10 (command -> struct_while .)
    FUNCTION        reduce using rule 10 (command -> struct_while .)
    $end            reduce using rule 10 (command -> struct_while .)
    END             reduce using rule 10 (command -> struct_while .)
    UNTIL           reduce using rule 10 (command -> struct_while .)
    ELSEIF          reduce using rule 10 (command -> struct_while .)
    ELSE            reduce using rule 10 (command -> struct_while .)


state 11

    (11) command -> struct_repeat .

    SEMICOLON       reduce using rule 11 (command -> struct_repeat .)
    BREAK           reduce using rule 11 (command -> struct_repeat .)
    DO              reduce using rule 11 (command -> struct_repeat .)
    DUALCOLON       reduce using rule 11 (command -> struct_repeat .)
    WHILE           reduce using rule 11 (command -> struct_repeat .)
    REPEAT          reduce using rule 11 (command -> struct_repeat .)
    IF              reduce using rule 11 (command -> struct_repeat .)
    FOR             reduce using rule 11 (command -> struct_repeat .)
    LOCAL           reduce using rule 11 (command -> struct_repeat .)
    RETURN          reduce using rule 11 (command -> struct_repeat .)
    NAME            reduce using rule 11 (command -> struct_repeat .)
    LPAREN          reduce using rule 11 (command -> struct_repeat .)
    FUNCTION        reduce using rule 11 (command -> struct_repeat .)
    $end            reduce using rule 11 (command -> struct_repeat .)
    END             reduce using rule 11 (command -> struct_repeat .)
    UNTIL           reduce using rule 11 (command -> struct_repeat .)
    ELSEIF          reduce using rule 11 (command -> struct_repeat .)
    ELSE            reduce using rule 11 (command -> struct_repeat .)


state 12

    (12) command -> if .

    SEMICOLON       reduce using rule 12 (command -> if .)
    BREAK           reduce using rule 12 (command -> if .)
    DO              reduce using rule 12 (command -> if .)
    DUALCOLON       reduce using rule 12 (command -> if .)
    WHILE           reduce using rule 12 (command -> if .)
    REPEAT          reduce using rule 12 (command -> if .)
    IF              reduce using rule 12 (command -> if .)
    FOR             reduce using rule 12 (command -> if .)
    LOCAL           reduce using rule 12 (command -> if .)
    RETURN          reduce using rule 12 (command -> if .)
    NAME            reduce using rule 12 (command -> if .)
    LPAREN          reduce using rule 12 (command -> if .)
    FUNCTION        reduce using rule 12 (command -> if .)
    $end            reduce using rule 12 (command -> if .)
    END             reduce using rule 12 (command -> if .)
    UNTIL           reduce using rule 12 (command -> if .)
    ELSEIF          reduce using rule 12 (command -> if .)
    ELSE            reduce using rule 12 (command -> if .)


state 13

    (13) command -> struct_for .

    SEMICOLON       reduce using rule 13 (command -> struct_for .)
    BREAK           reduce using rule 13 (command -> struct_for .)
    DO              reduce using rule 13 (command -> struct_for .)
    DUALCOLON       reduce using rule 13 (command -> struct_for .)
    WHILE           reduce using rule 13 (command -> struct_for .)
    REPEAT          reduce using rule 13 (command -> struct_for .)
    IF              reduce using rule 13 (command -> struct_for .)
    FOR             reduce using rule 13 (command -> struct_for .)
    LOCAL           reduce using rule 13 (command -> struct_for .)
    RETURN          reduce using rule 13 (command -> struct_for .)
    NAME            reduce using rule 13 (command -> struct_for .)
    LPAREN          reduce using rule 13 (command -> struct_for .)
    FUNCTION        reduce using rule 13 (command -> struct_for .)
    $end            reduce using rule 13 (command -> struct_for .)
    END             reduce using rule 13 (command -> struct_for .)
    UNTIL           reduce using rule 13 (command -> struct_for .)
    ELSEIF          reduce using rule 13 (command -> struct_for .)
    ELSE            reduce using rule 13 (command -> struct_for .)


state 14

    (14) command -> struct_for_in .

    SEMICOLON       reduce using rule 14 (command -> struct_for_in .)
    BREAK           reduce using rule 14 (command -> struct_for_in .)
    DO              reduce using rule 14 (command -> struct_for_in .)
    DUALCOLON       reduce using rule 14 (command -> struct_for_in .)
    WHILE           reduce using rule 14 (command -> struct_for_in .)
    REPEAT          reduce using rule 14 (command -> struct_for_in .)
    IF              reduce using rule 14 (command -> struct_for_in .)
    FOR             reduce using rule 14 (command -> struct_for_in .)
    LOCAL           reduce using rule 14 (command -> struct_for_in .)
    RETURN          reduce using rule 14 (command -> struct_for_in .)
    NAME            reduce using rule 14 (command -> struct_for_in .)
    LPAREN          reduce using rule 14 (command -> struct_for_in .)
    FUNCTION        reduce using rule 14 (command -> struct_for_in .)
    $end            reduce using rule 14 (command -> struct_for_in .)
    END             reduce using rule 14 (command -> struct_for_in .)
    UNTIL           reduce using rule 14 (command -> struct_for_in .)
    ELSEIF          reduce using rule 14 (command -> struct_for_in .)
    ELSE            reduce using rule 14 (command -> struct_for_in .)


state 15

    (15) command -> def_function .

    SEMICOLON       reduce using rule 15 (command -> def_function .)
    BREAK           reduce using rule 15 (command -> def_function .)
    DO              reduce using rule 15 (command -> def_function .)
    DUALCOLON       reduce using rule 15 (command -> def_function .)
    WHILE           reduce using rule 15 (command -> def_function .)
    REPEAT          reduce using rule 15 (command -> def_function .)
    IF              reduce using rule 15 (command -> def_function .)
    FOR             reduce using rule 15 (command -> def_function .)
    LOCAL           reduce using rule 15 (command -> def_function .)
    RETURN          reduce using rule 15 (command -> def_function .)
    NAME            reduce using rule 15 (command -> def_function .)
    LPAREN          reduce using rule 15 (command -> def_function .)
    FUNCTION        reduce using rule 15 (command -> def_function .)
    $end            reduce using rule 15 (command -> def_function .)
    END             reduce using rule 15 (command -> def_function .)
    UNTIL           reduce using rule 15 (command -> def_function .)
    ELSEIF          reduce using rule 15 (command -> def_function .)
    ELSE            reduce using rule 15 (command -> def_function .)


state 16

    (16) command -> local_var .

    SEMICOLON       reduce using rule 16 (command -> local_var .)
    BREAK           reduce using rule 16 (command -> local_var .)
    DO              reduce using rule 16 (command -> local_var .)
    DUALCOLON       reduce using rule 16 (command -> local_var .)
    WHILE           reduce using rule 16 (command -> local_var .)
    REPEAT          reduce using rule 16 (command -> local_var .)
    IF              reduce using rule 16 (command -> local_var .)
    FOR             reduce using rule 16 (command -> local_var .)
    LOCAL           reduce using rule 16 (command -> local_var .)
    RETURN          reduce using rule 16 (command -> local_var .)
    NAME            reduce using rule 16 (command -> local_var .)
    LPAREN          reduce using rule 16 (command -> local_var .)
    FUNCTION        reduce using rule 16 (command -> local_var .)
    $end            reduce using rule 16 (command -> local_var .)
    END             reduce using rule 16 (command -> local_var .)
    UNTIL           reduce using rule 16 (command -> local_var .)
    ELSEIF          reduce using rule 16 (command -> local_var .)
    ELSE            reduce using rule 16 (command -> local_var .)


state 17

    (17) command -> command_ret .

    SEMICOLON       reduce using rule 17 (command -> command_ret .)
    BREAK           reduce using rule 17 (command -> command_ret .)
    DO              reduce using rule 17 (command -> command_ret .)
    DUALCOLON       reduce using rule 17 (command -> command_ret .)
    WHILE           reduce using rule 17 (command -> command_ret .)
    REPEAT          reduce using rule 17 (command -> command_ret .)
    IF              reduce using rule 17 (command -> command_ret .)
    FOR             reduce using rule 17 (command -> command_ret .)
    LOCAL           reduce using rule 17 (command -> command_ret .)
    RETURN          reduce using rule 17 (command -> command_ret .)
    NAME            reduce using rule 17 (command -> command_ret .)
    LPAREN          reduce using rule 17 (command -> command_ret .)
    FUNCTION        reduce using rule 17 (command -> command_ret .)
    $end            reduce using rule 17 (command -> command_ret .)
    END             reduce using rule 17 (command -> command_ret .)
    UNTIL           reduce using rule 17 (command -> command_ret .)
    ELSEIF          reduce using rule 17 (command -> command_ret .)
    ELSE            reduce using rule 17 (command -> command_ret .)


state 18

    (25) list_vars -> var .
    (26) list_vars -> var . COMMA list_vars
    (65) exp_prefix -> var .
    (30) prefix_exp -> var .

    ATRIB           reduce using rule 25 (list_vars -> var .)
    COMMA           shift and go to state 36
    LPAREN          reduce using rule 65 (exp_prefix -> var .)
    LBRACE          reduce using rule 65 (exp_prefix -> var .)
    LCOLCH          reduce using rule 30 (prefix_exp -> var .)
    DOT             reduce using rule 30 (prefix_exp -> var .)


state 19

    (67) call_function -> exp_prefix . args
    (68) args -> . LPAREN list_exps RPAREN
    (69) args -> . LPAREN RPAREN
    (70) args -> . construct_table
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE

    LPAREN          shift and go to state 38
    LBRACE          shift and go to state 40

    args                           shift and go to state 37
    construct_table                shift and go to state 39

state 20

    (21) rotulo -> DUALCOLON . NAME DUALCOLON

    NAME            shift and go to state 41


state 21

    (27) var -> NAME .

    COMMA           reduce using rule 27 (var -> NAME .)
    ATRIB           reduce using rule 27 (var -> NAME .)
    LPAREN          reduce using rule 27 (var -> NAME .)
    LBRACE          reduce using rule 27 (var -> NAME .)
    LCOLCH          reduce using rule 27 (var -> NAME .)
    DOT             reduce using rule 27 (var -> NAME .)
    DO              reduce using rule 27 (var -> NAME .)
    PLUS            reduce using rule 27 (var -> NAME .)
    MINUS           reduce using rule 27 (var -> NAME .)
    TIMES           reduce using rule 27 (var -> NAME .)
    DIVIDE          reduce using rule 27 (var -> NAME .)
    EXPO            reduce using rule 27 (var -> NAME .)
    PERCENTUAL      reduce using rule 27 (var -> NAME .)
    CONCAT          reduce using rule 27 (var -> NAME .)
    LT              reduce using rule 27 (var -> NAME .)
    LTEQUALS        reduce using rule 27 (var -> NAME .)
    GT              reduce using rule 27 (var -> NAME .)
    GTEQUALS        reduce using rule 27 (var -> NAME .)
    EQUALS          reduce using rule 27 (var -> NAME .)
    DIF             reduce using rule 27 (var -> NAME .)
    AND             reduce using rule 27 (var -> NAME .)
    OR              reduce using rule 27 (var -> NAME .)
    THEN            reduce using rule 27 (var -> NAME .)
    SEMICOLON       reduce using rule 27 (var -> NAME .)
    BREAK           reduce using rule 27 (var -> NAME .)
    DUALCOLON       reduce using rule 27 (var -> NAME .)
    WHILE           reduce using rule 27 (var -> NAME .)
    REPEAT          reduce using rule 27 (var -> NAME .)
    IF              reduce using rule 27 (var -> NAME .)
    FOR             reduce using rule 27 (var -> NAME .)
    LOCAL           reduce using rule 27 (var -> NAME .)
    RETURN          reduce using rule 27 (var -> NAME .)
    NAME            reduce using rule 27 (var -> NAME .)
    FUNCTION        reduce using rule 27 (var -> NAME .)
    $end            reduce using rule 27 (var -> NAME .)
    END             reduce using rule 27 (var -> NAME .)
    UNTIL           reduce using rule 27 (var -> NAME .)
    ELSEIF          reduce using rule 27 (var -> NAME .)
    ELSE            reduce using rule 27 (var -> NAME .)
    RPAREN          reduce using rule 27 (var -> NAME .)
    RCOLCH          reduce using rule 27 (var -> NAME .)
    RBRACE          reduce using rule 27 (var -> NAME .)


state 22

    (99) struct_while -> WHILE . exp DO block END
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 42
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 23

    (103) struct_repeat -> REPEAT . block UNTIL exp
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 58
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 24

    (93) if -> IF . exp THEN block END
    (94) if -> IF . exp THEN else
    (95) if -> IF . exp THEN block else_if else
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 59
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 25

    (100) struct_for -> FOR . NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> FOR . NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> FOR . list_names IN list_exps DO block END
    (33) list_names -> . NAME COMMA list_names
    (34) list_names -> . NAME

    NAME            shift and go to state 60

    list_names                     shift and go to state 61

state 26

    (71) def_function -> function .

    SEMICOLON       reduce using rule 71 (def_function -> function .)
    BREAK           reduce using rule 71 (def_function -> function .)
    DO              reduce using rule 71 (def_function -> function .)
    DUALCOLON       reduce using rule 71 (def_function -> function .)
    WHILE           reduce using rule 71 (def_function -> function .)
    REPEAT          reduce using rule 71 (def_function -> function .)
    IF              reduce using rule 71 (def_function -> function .)
    FOR             reduce using rule 71 (def_function -> function .)
    LOCAL           reduce using rule 71 (def_function -> function .)
    RETURN          reduce using rule 71 (def_function -> function .)
    NAME            reduce using rule 71 (def_function -> function .)
    LPAREN          reduce using rule 71 (def_function -> function .)
    FUNCTION        reduce using rule 71 (def_function -> function .)
    $end            reduce using rule 71 (def_function -> function .)
    END             reduce using rule 71 (def_function -> function .)
    UNTIL           reduce using rule 71 (def_function -> function .)
    ELSEIF          reduce using rule 71 (def_function -> function .)
    ELSE            reduce using rule 71 (def_function -> function .)
    PLUS            reduce using rule 71 (def_function -> function .)
    MINUS           reduce using rule 71 (def_function -> function .)
    TIMES           reduce using rule 71 (def_function -> function .)
    DIVIDE          reduce using rule 71 (def_function -> function .)
    EXPO            reduce using rule 71 (def_function -> function .)
    PERCENTUAL      reduce using rule 71 (def_function -> function .)
    CONCAT          reduce using rule 71 (def_function -> function .)
    LT              reduce using rule 71 (def_function -> function .)
    LTEQUALS        reduce using rule 71 (def_function -> function .)
    GT              reduce using rule 71 (def_function -> function .)
    GTEQUALS        reduce using rule 71 (def_function -> function .)
    EQUALS          reduce using rule 71 (def_function -> function .)
    DIF             reduce using rule 71 (def_function -> function .)
    AND             reduce using rule 71 (def_function -> function .)
    OR              reduce using rule 71 (def_function -> function .)
    THEN            reduce using rule 71 (def_function -> function .)
    COMMA           reduce using rule 71 (def_function -> function .)
    RPAREN          reduce using rule 71 (def_function -> function .)
    RCOLCH          reduce using rule 71 (def_function -> function .)
    RBRACE          reduce using rule 71 (def_function -> function .)


state 27

    (72) def_function -> local_function .

    SEMICOLON       reduce using rule 72 (def_function -> local_function .)
    BREAK           reduce using rule 72 (def_function -> local_function .)
    DO              reduce using rule 72 (def_function -> local_function .)
    DUALCOLON       reduce using rule 72 (def_function -> local_function .)
    WHILE           reduce using rule 72 (def_function -> local_function .)
    REPEAT          reduce using rule 72 (def_function -> local_function .)
    IF              reduce using rule 72 (def_function -> local_function .)
    FOR             reduce using rule 72 (def_function -> local_function .)
    LOCAL           reduce using rule 72 (def_function -> local_function .)
    RETURN          reduce using rule 72 (def_function -> local_function .)
    NAME            reduce using rule 72 (def_function -> local_function .)
    LPAREN          reduce using rule 72 (def_function -> local_function .)
    FUNCTION        reduce using rule 72 (def_function -> local_function .)
    $end            reduce using rule 72 (def_function -> local_function .)
    END             reduce using rule 72 (def_function -> local_function .)
    UNTIL           reduce using rule 72 (def_function -> local_function .)
    ELSEIF          reduce using rule 72 (def_function -> local_function .)
    ELSE            reduce using rule 72 (def_function -> local_function .)
    PLUS            reduce using rule 72 (def_function -> local_function .)
    MINUS           reduce using rule 72 (def_function -> local_function .)
    TIMES           reduce using rule 72 (def_function -> local_function .)
    DIVIDE          reduce using rule 72 (def_function -> local_function .)
    EXPO            reduce using rule 72 (def_function -> local_function .)
    PERCENTUAL      reduce using rule 72 (def_function -> local_function .)
    CONCAT          reduce using rule 72 (def_function -> local_function .)
    LT              reduce using rule 72 (def_function -> local_function .)
    LTEQUALS        reduce using rule 72 (def_function -> local_function .)
    GT              reduce using rule 72 (def_function -> local_function .)
    GTEQUALS        reduce using rule 72 (def_function -> local_function .)
    EQUALS          reduce using rule 72 (def_function -> local_function .)
    DIF             reduce using rule 72 (def_function -> local_function .)
    AND             reduce using rule 72 (def_function -> local_function .)
    OR              reduce using rule 72 (def_function -> local_function .)
    THEN            reduce using rule 72 (def_function -> local_function .)
    COMMA           reduce using rule 72 (def_function -> local_function .)
    RPAREN          reduce using rule 72 (def_function -> local_function .)
    RCOLCH          reduce using rule 72 (def_function -> local_function .)
    RBRACE          reduce using rule 72 (def_function -> local_function .)


state 28

    (89) local_var -> LOCAL . list_names ATRIB list_exps
    (90) local_var -> LOCAL . list_names
    (91) local_var -> LOCAL . NAME ATRIB exp
    (104) local_function -> LOCAL . FUNCTION NAME body_function
    (33) list_names -> . NAME COMMA list_names
    (34) list_names -> . NAME

    NAME            shift and go to state 63
    FUNCTION        shift and go to state 64

    list_names                     shift and go to state 62

state 29

    (18) command_ret -> RETURN .
    (19) command_ret -> RETURN . list_exps
    (20) command_ret -> RETURN . list_exps SEMICOLON
    (35) list_exps -> . exp COMMA list_exps
    (36) list_exps -> . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for LOCAL resolved as shift
    SEMICOLON       reduce using rule 18 (command_ret -> RETURN .)
    BREAK           reduce using rule 18 (command_ret -> RETURN .)
    DO              reduce using rule 18 (command_ret -> RETURN .)
    DUALCOLON       reduce using rule 18 (command_ret -> RETURN .)
    WHILE           reduce using rule 18 (command_ret -> RETURN .)
    REPEAT          reduce using rule 18 (command_ret -> RETURN .)
    IF              reduce using rule 18 (command_ret -> RETURN .)
    FOR             reduce using rule 18 (command_ret -> RETURN .)
    RETURN          reduce using rule 18 (command_ret -> RETURN .)
    $end            reduce using rule 18 (command_ret -> RETURN .)
    END             reduce using rule 18 (command_ret -> RETURN .)
    UNTIL           reduce using rule 18 (command_ret -> RETURN .)
    ELSEIF          reduce using rule 18 (command_ret -> RETURN .)
    ELSE            reduce using rule 18 (command_ret -> RETURN .)
    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

  ! LOCAL           [ reduce using rule 18 (command_ret -> RETURN .) ]
  ! NAME            [ reduce using rule 18 (command_ret -> RETURN .) ]
  ! LPAREN          [ reduce using rule 18 (command_ret -> RETURN .) ]
  ! FUNCTION        [ reduce using rule 18 (command_ret -> RETURN .) ]

    list_exps                      shift and go to state 65
    exp                            shift and go to state 66
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 30

    (28) var -> prefix_exp . LCOLCH exp RCOLCH
    (29) var -> prefix_exp . DOT NAME

    LCOLCH          shift and go to state 67
    DOT             shift and go to state 68


state 31

    (66) exp_prefix -> LPAREN . exp RPAREN
    (32) prefix_exp -> LPAREN . exp RPAREN
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 69
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 32

    (92) function -> FUNCTION . name_function body_function
    (22) name_function -> . NAME
    (23) name_function -> . NAME DOT NAME
    (24) name_function -> . NAME COLON NAME

    NAME            shift and go to state 71

    name_function                  shift and go to state 70

state 33

    (3) block -> command block .

    $end            reduce using rule 3 (block -> command block .)
    END             reduce using rule 3 (block -> command block .)
    UNTIL           reduce using rule 3 (block -> command block .)
    ELSEIF          reduce using rule 3 (block -> command block .)
    ELSE            reduce using rule 3 (block -> command block .)


state 34

    (5) command -> list_vars ATRIB . list_exps
    (35) list_exps -> . exp COMMA list_exps
    (36) list_exps -> . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    list_exps                      shift and go to state 72
    exp                            shift and go to state 66
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 35

    (9) command -> DO block . END

    END             shift and go to state 73


state 36

    (26) list_vars -> var COMMA . list_vars
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (67) call_function -> . exp_prefix args
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN

    NAME            shift and go to state 21
    LPAREN          shift and go to state 76

    var                            shift and go to state 74
    list_vars                      shift and go to state 75
    prefix_exp                     shift and go to state 30
    call_function                  shift and go to state 56
    exp_prefix                     shift and go to state 19

state 37

    (67) call_function -> exp_prefix args .

    SEMICOLON       reduce using rule 67 (call_function -> exp_prefix args .)
    BREAK           reduce using rule 67 (call_function -> exp_prefix args .)
    DO              reduce using rule 67 (call_function -> exp_prefix args .)
    DUALCOLON       reduce using rule 67 (call_function -> exp_prefix args .)
    WHILE           reduce using rule 67 (call_function -> exp_prefix args .)
    REPEAT          reduce using rule 67 (call_function -> exp_prefix args .)
    IF              reduce using rule 67 (call_function -> exp_prefix args .)
    FOR             reduce using rule 67 (call_function -> exp_prefix args .)
    LOCAL           reduce using rule 67 (call_function -> exp_prefix args .)
    RETURN          reduce using rule 67 (call_function -> exp_prefix args .)
    NAME            reduce using rule 67 (call_function -> exp_prefix args .)
    LPAREN          reduce using rule 67 (call_function -> exp_prefix args .)
    FUNCTION        reduce using rule 67 (call_function -> exp_prefix args .)
    $end            reduce using rule 67 (call_function -> exp_prefix args .)
    LCOLCH          reduce using rule 67 (call_function -> exp_prefix args .)
    DOT             reduce using rule 67 (call_function -> exp_prefix args .)
    END             reduce using rule 67 (call_function -> exp_prefix args .)
    UNTIL           reduce using rule 67 (call_function -> exp_prefix args .)
    ELSEIF          reduce using rule 67 (call_function -> exp_prefix args .)
    ELSE            reduce using rule 67 (call_function -> exp_prefix args .)


state 38

    (68) args -> LPAREN . list_exps RPAREN
    (69) args -> LPAREN . RPAREN
    (35) list_exps -> . exp COMMA list_exps
    (36) list_exps -> . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    RPAREN          shift and go to state 78
    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    list_exps                      shift and go to state 77
    exp                            shift and go to state 66
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 39

    (70) args -> construct_table .

    SEMICOLON       reduce using rule 70 (args -> construct_table .)
    BREAK           reduce using rule 70 (args -> construct_table .)
    DO              reduce using rule 70 (args -> construct_table .)
    DUALCOLON       reduce using rule 70 (args -> construct_table .)
    WHILE           reduce using rule 70 (args -> construct_table .)
    REPEAT          reduce using rule 70 (args -> construct_table .)
    IF              reduce using rule 70 (args -> construct_table .)
    FOR             reduce using rule 70 (args -> construct_table .)
    LOCAL           reduce using rule 70 (args -> construct_table .)
    RETURN          reduce using rule 70 (args -> construct_table .)
    NAME            reduce using rule 70 (args -> construct_table .)
    LPAREN          reduce using rule 70 (args -> construct_table .)
    FUNCTION        reduce using rule 70 (args -> construct_table .)
    $end            reduce using rule 70 (args -> construct_table .)
    LCOLCH          reduce using rule 70 (args -> construct_table .)
    DOT             reduce using rule 70 (args -> construct_table .)
    END             reduce using rule 70 (args -> construct_table .)
    UNTIL           reduce using rule 70 (args -> construct_table .)
    ELSEIF          reduce using rule 70 (args -> construct_table .)
    ELSE            reduce using rule 70 (args -> construct_table .)


state 40

    (77) construct_table -> LBRACE . list_fields RBRACE
    (78) construct_table -> LBRACE . RBRACE
    (79) list_fields -> . field
    (80) list_fields -> . field separator_fields list_fields
    (81) list_fields -> . field_empty
    (82) list_fields -> . field_empty separator_fields list_fields
    (85) field -> . LCOLCH exp RCOLCH ATRIB exp
    (86) field -> . NAME ATRIB exp
    (83) field_empty -> . LCOLCH exp RCOLCH
    (84) field_empty -> . NAME

    RBRACE          shift and go to state 80
    LCOLCH          shift and go to state 83
    NAME            shift and go to state 84

    list_fields                    shift and go to state 79
    field                          shift and go to state 81
    field_empty                    shift and go to state 82

state 41

    (21) rotulo -> DUALCOLON NAME . DUALCOLON

    DUALCOLON       shift and go to state 85


state 42

    (99) struct_while -> WHILE exp . DO block END
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              shift and go to state 86
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 43

    (37) exp -> var .
    (65) exp_prefix -> var .
    (30) prefix_exp -> var .

  ! reduce/reduce conflict for LPAREN resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for DO resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for PLUS resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for MINUS resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for TIMES resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for EXPO resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for PERCENTUAL resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for CONCAT resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for LT resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for LTEQUALS resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for GT resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for GTEQUALS resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for EQUALS resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for DIF resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for AND resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for OR resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for THEN resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for COMMA resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for BREAK resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for DUALCOLON resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for WHILE resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for REPEAT resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for IF resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for FOR resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for LOCAL resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for RETURN resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for NAME resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for $end resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for END resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for UNTIL resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for ELSE resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for RCOLCH resolved using rule 37 (exp -> var .)
  ! reduce/reduce conflict for RBRACE resolved using rule 37 (exp -> var .)
    DO              reduce using rule 37 (exp -> var .)
    PLUS            reduce using rule 37 (exp -> var .)
    MINUS           reduce using rule 37 (exp -> var .)
    TIMES           reduce using rule 37 (exp -> var .)
    DIVIDE          reduce using rule 37 (exp -> var .)
    EXPO            reduce using rule 37 (exp -> var .)
    PERCENTUAL      reduce using rule 37 (exp -> var .)
    CONCAT          reduce using rule 37 (exp -> var .)
    LT              reduce using rule 37 (exp -> var .)
    LTEQUALS        reduce using rule 37 (exp -> var .)
    GT              reduce using rule 37 (exp -> var .)
    GTEQUALS        reduce using rule 37 (exp -> var .)
    EQUALS          reduce using rule 37 (exp -> var .)
    DIF             reduce using rule 37 (exp -> var .)
    AND             reduce using rule 37 (exp -> var .)
    OR              reduce using rule 37 (exp -> var .)
    THEN            reduce using rule 37 (exp -> var .)
    COMMA           reduce using rule 37 (exp -> var .)
    SEMICOLON       reduce using rule 37 (exp -> var .)
    BREAK           reduce using rule 37 (exp -> var .)
    DUALCOLON       reduce using rule 37 (exp -> var .)
    WHILE           reduce using rule 37 (exp -> var .)
    REPEAT          reduce using rule 37 (exp -> var .)
    IF              reduce using rule 37 (exp -> var .)
    FOR             reduce using rule 37 (exp -> var .)
    LOCAL           reduce using rule 37 (exp -> var .)
    RETURN          reduce using rule 37 (exp -> var .)
    NAME            reduce using rule 37 (exp -> var .)
    LPAREN          reduce using rule 37 (exp -> var .)
    FUNCTION        reduce using rule 37 (exp -> var .)
    $end            reduce using rule 37 (exp -> var .)
    END             reduce using rule 37 (exp -> var .)
    UNTIL           reduce using rule 37 (exp -> var .)
    ELSEIF          reduce using rule 37 (exp -> var .)
    ELSE            reduce using rule 37 (exp -> var .)
    RPAREN          reduce using rule 37 (exp -> var .)
    RCOLCH          reduce using rule 37 (exp -> var .)
    RBRACE          reduce using rule 37 (exp -> var .)
    LBRACE          reduce using rule 65 (exp_prefix -> var .)
    LCOLCH          reduce using rule 30 (prefix_exp -> var .)
    DOT             reduce using rule 30 (prefix_exp -> var .)

  ! LPAREN          [ reduce using rule 65 (exp_prefix -> var .) ]
  ! DO              [ reduce using rule 65 (exp_prefix -> var .) ]
  ! PLUS            [ reduce using rule 65 (exp_prefix -> var .) ]
  ! MINUS           [ reduce using rule 65 (exp_prefix -> var .) ]
  ! TIMES           [ reduce using rule 65 (exp_prefix -> var .) ]
  ! DIVIDE          [ reduce using rule 65 (exp_prefix -> var .) ]
  ! EXPO            [ reduce using rule 65 (exp_prefix -> var .) ]
  ! PERCENTUAL      [ reduce using rule 65 (exp_prefix -> var .) ]
  ! CONCAT          [ reduce using rule 65 (exp_prefix -> var .) ]
  ! LT              [ reduce using rule 65 (exp_prefix -> var .) ]
  ! LTEQUALS        [ reduce using rule 65 (exp_prefix -> var .) ]
  ! GT              [ reduce using rule 65 (exp_prefix -> var .) ]
  ! GTEQUALS        [ reduce using rule 65 (exp_prefix -> var .) ]
  ! EQUALS          [ reduce using rule 65 (exp_prefix -> var .) ]
  ! DIF             [ reduce using rule 65 (exp_prefix -> var .) ]
  ! AND             [ reduce using rule 65 (exp_prefix -> var .) ]
  ! OR              [ reduce using rule 65 (exp_prefix -> var .) ]
  ! THEN            [ reduce using rule 65 (exp_prefix -> var .) ]
  ! COMMA           [ reduce using rule 65 (exp_prefix -> var .) ]
  ! SEMICOLON       [ reduce using rule 65 (exp_prefix -> var .) ]
  ! BREAK           [ reduce using rule 65 (exp_prefix -> var .) ]
  ! DUALCOLON       [ reduce using rule 65 (exp_prefix -> var .) ]
  ! WHILE           [ reduce using rule 65 (exp_prefix -> var .) ]
  ! REPEAT          [ reduce using rule 65 (exp_prefix -> var .) ]
  ! IF              [ reduce using rule 65 (exp_prefix -> var .) ]
  ! FOR             [ reduce using rule 65 (exp_prefix -> var .) ]
  ! LOCAL           [ reduce using rule 65 (exp_prefix -> var .) ]
  ! RETURN          [ reduce using rule 65 (exp_prefix -> var .) ]
  ! NAME            [ reduce using rule 65 (exp_prefix -> var .) ]
  ! FUNCTION        [ reduce using rule 65 (exp_prefix -> var .) ]
  ! $end            [ reduce using rule 65 (exp_prefix -> var .) ]
  ! END             [ reduce using rule 65 (exp_prefix -> var .) ]
  ! UNTIL           [ reduce using rule 65 (exp_prefix -> var .) ]
  ! ELSEIF          [ reduce using rule 65 (exp_prefix -> var .) ]
  ! ELSE            [ reduce using rule 65 (exp_prefix -> var .) ]
  ! RPAREN          [ reduce using rule 65 (exp_prefix -> var .) ]
  ! RCOLCH          [ reduce using rule 65 (exp_prefix -> var .) ]
  ! RBRACE          [ reduce using rule 65 (exp_prefix -> var .) ]


state 44

    (38) exp -> NIL .

    DO              reduce using rule 38 (exp -> NIL .)
    PLUS            reduce using rule 38 (exp -> NIL .)
    MINUS           reduce using rule 38 (exp -> NIL .)
    TIMES           reduce using rule 38 (exp -> NIL .)
    DIVIDE          reduce using rule 38 (exp -> NIL .)
    EXPO            reduce using rule 38 (exp -> NIL .)
    PERCENTUAL      reduce using rule 38 (exp -> NIL .)
    CONCAT          reduce using rule 38 (exp -> NIL .)
    LT              reduce using rule 38 (exp -> NIL .)
    LTEQUALS        reduce using rule 38 (exp -> NIL .)
    GT              reduce using rule 38 (exp -> NIL .)
    GTEQUALS        reduce using rule 38 (exp -> NIL .)
    EQUALS          reduce using rule 38 (exp -> NIL .)
    DIF             reduce using rule 38 (exp -> NIL .)
    AND             reduce using rule 38 (exp -> NIL .)
    OR              reduce using rule 38 (exp -> NIL .)
    THEN            reduce using rule 38 (exp -> NIL .)
    COMMA           reduce using rule 38 (exp -> NIL .)
    SEMICOLON       reduce using rule 38 (exp -> NIL .)
    BREAK           reduce using rule 38 (exp -> NIL .)
    DUALCOLON       reduce using rule 38 (exp -> NIL .)
    WHILE           reduce using rule 38 (exp -> NIL .)
    REPEAT          reduce using rule 38 (exp -> NIL .)
    IF              reduce using rule 38 (exp -> NIL .)
    FOR             reduce using rule 38 (exp -> NIL .)
    LOCAL           reduce using rule 38 (exp -> NIL .)
    RETURN          reduce using rule 38 (exp -> NIL .)
    NAME            reduce using rule 38 (exp -> NIL .)
    LPAREN          reduce using rule 38 (exp -> NIL .)
    FUNCTION        reduce using rule 38 (exp -> NIL .)
    $end            reduce using rule 38 (exp -> NIL .)
    END             reduce using rule 38 (exp -> NIL .)
    UNTIL           reduce using rule 38 (exp -> NIL .)
    ELSEIF          reduce using rule 38 (exp -> NIL .)
    ELSE            reduce using rule 38 (exp -> NIL .)
    RPAREN          reduce using rule 38 (exp -> NIL .)
    RCOLCH          reduce using rule 38 (exp -> NIL .)
    RBRACE          reduce using rule 38 (exp -> NIL .)


state 45

    (39) exp -> FALSE .

    DO              reduce using rule 39 (exp -> FALSE .)
    PLUS            reduce using rule 39 (exp -> FALSE .)
    MINUS           reduce using rule 39 (exp -> FALSE .)
    TIMES           reduce using rule 39 (exp -> FALSE .)
    DIVIDE          reduce using rule 39 (exp -> FALSE .)
    EXPO            reduce using rule 39 (exp -> FALSE .)
    PERCENTUAL      reduce using rule 39 (exp -> FALSE .)
    CONCAT          reduce using rule 39 (exp -> FALSE .)
    LT              reduce using rule 39 (exp -> FALSE .)
    LTEQUALS        reduce using rule 39 (exp -> FALSE .)
    GT              reduce using rule 39 (exp -> FALSE .)
    GTEQUALS        reduce using rule 39 (exp -> FALSE .)
    EQUALS          reduce using rule 39 (exp -> FALSE .)
    DIF             reduce using rule 39 (exp -> FALSE .)
    AND             reduce using rule 39 (exp -> FALSE .)
    OR              reduce using rule 39 (exp -> FALSE .)
    THEN            reduce using rule 39 (exp -> FALSE .)
    COMMA           reduce using rule 39 (exp -> FALSE .)
    SEMICOLON       reduce using rule 39 (exp -> FALSE .)
    BREAK           reduce using rule 39 (exp -> FALSE .)
    DUALCOLON       reduce using rule 39 (exp -> FALSE .)
    WHILE           reduce using rule 39 (exp -> FALSE .)
    REPEAT          reduce using rule 39 (exp -> FALSE .)
    IF              reduce using rule 39 (exp -> FALSE .)
    FOR             reduce using rule 39 (exp -> FALSE .)
    LOCAL           reduce using rule 39 (exp -> FALSE .)
    RETURN          reduce using rule 39 (exp -> FALSE .)
    NAME            reduce using rule 39 (exp -> FALSE .)
    LPAREN          reduce using rule 39 (exp -> FALSE .)
    FUNCTION        reduce using rule 39 (exp -> FALSE .)
    $end            reduce using rule 39 (exp -> FALSE .)
    END             reduce using rule 39 (exp -> FALSE .)
    UNTIL           reduce using rule 39 (exp -> FALSE .)
    ELSEIF          reduce using rule 39 (exp -> FALSE .)
    ELSE            reduce using rule 39 (exp -> FALSE .)
    RPAREN          reduce using rule 39 (exp -> FALSE .)
    RCOLCH          reduce using rule 39 (exp -> FALSE .)
    RBRACE          reduce using rule 39 (exp -> FALSE .)


state 46

    (40) exp -> TRUE .

    DO              reduce using rule 40 (exp -> TRUE .)
    PLUS            reduce using rule 40 (exp -> TRUE .)
    MINUS           reduce using rule 40 (exp -> TRUE .)
    TIMES           reduce using rule 40 (exp -> TRUE .)
    DIVIDE          reduce using rule 40 (exp -> TRUE .)
    EXPO            reduce using rule 40 (exp -> TRUE .)
    PERCENTUAL      reduce using rule 40 (exp -> TRUE .)
    CONCAT          reduce using rule 40 (exp -> TRUE .)
    LT              reduce using rule 40 (exp -> TRUE .)
    LTEQUALS        reduce using rule 40 (exp -> TRUE .)
    GT              reduce using rule 40 (exp -> TRUE .)
    GTEQUALS        reduce using rule 40 (exp -> TRUE .)
    EQUALS          reduce using rule 40 (exp -> TRUE .)
    DIF             reduce using rule 40 (exp -> TRUE .)
    AND             reduce using rule 40 (exp -> TRUE .)
    OR              reduce using rule 40 (exp -> TRUE .)
    THEN            reduce using rule 40 (exp -> TRUE .)
    COMMA           reduce using rule 40 (exp -> TRUE .)
    SEMICOLON       reduce using rule 40 (exp -> TRUE .)
    BREAK           reduce using rule 40 (exp -> TRUE .)
    DUALCOLON       reduce using rule 40 (exp -> TRUE .)
    WHILE           reduce using rule 40 (exp -> TRUE .)
    REPEAT          reduce using rule 40 (exp -> TRUE .)
    IF              reduce using rule 40 (exp -> TRUE .)
    FOR             reduce using rule 40 (exp -> TRUE .)
    LOCAL           reduce using rule 40 (exp -> TRUE .)
    RETURN          reduce using rule 40 (exp -> TRUE .)
    NAME            reduce using rule 40 (exp -> TRUE .)
    LPAREN          reduce using rule 40 (exp -> TRUE .)
    FUNCTION        reduce using rule 40 (exp -> TRUE .)
    $end            reduce using rule 40 (exp -> TRUE .)
    END             reduce using rule 40 (exp -> TRUE .)
    UNTIL           reduce using rule 40 (exp -> TRUE .)
    ELSEIF          reduce using rule 40 (exp -> TRUE .)
    ELSE            reduce using rule 40 (exp -> TRUE .)
    RPAREN          reduce using rule 40 (exp -> TRUE .)
    RCOLCH          reduce using rule 40 (exp -> TRUE .)
    RBRACE          reduce using rule 40 (exp -> TRUE .)


state 47

    (41) exp -> NUMBER .

    DO              reduce using rule 41 (exp -> NUMBER .)
    PLUS            reduce using rule 41 (exp -> NUMBER .)
    MINUS           reduce using rule 41 (exp -> NUMBER .)
    TIMES           reduce using rule 41 (exp -> NUMBER .)
    DIVIDE          reduce using rule 41 (exp -> NUMBER .)
    EXPO            reduce using rule 41 (exp -> NUMBER .)
    PERCENTUAL      reduce using rule 41 (exp -> NUMBER .)
    CONCAT          reduce using rule 41 (exp -> NUMBER .)
    LT              reduce using rule 41 (exp -> NUMBER .)
    LTEQUALS        reduce using rule 41 (exp -> NUMBER .)
    GT              reduce using rule 41 (exp -> NUMBER .)
    GTEQUALS        reduce using rule 41 (exp -> NUMBER .)
    EQUALS          reduce using rule 41 (exp -> NUMBER .)
    DIF             reduce using rule 41 (exp -> NUMBER .)
    AND             reduce using rule 41 (exp -> NUMBER .)
    OR              reduce using rule 41 (exp -> NUMBER .)
    THEN            reduce using rule 41 (exp -> NUMBER .)
    COMMA           reduce using rule 41 (exp -> NUMBER .)
    SEMICOLON       reduce using rule 41 (exp -> NUMBER .)
    BREAK           reduce using rule 41 (exp -> NUMBER .)
    DUALCOLON       reduce using rule 41 (exp -> NUMBER .)
    WHILE           reduce using rule 41 (exp -> NUMBER .)
    REPEAT          reduce using rule 41 (exp -> NUMBER .)
    IF              reduce using rule 41 (exp -> NUMBER .)
    FOR             reduce using rule 41 (exp -> NUMBER .)
    LOCAL           reduce using rule 41 (exp -> NUMBER .)
    RETURN          reduce using rule 41 (exp -> NUMBER .)
    NAME            reduce using rule 41 (exp -> NUMBER .)
    LPAREN          reduce using rule 41 (exp -> NUMBER .)
    FUNCTION        reduce using rule 41 (exp -> NUMBER .)
    $end            reduce using rule 41 (exp -> NUMBER .)
    END             reduce using rule 41 (exp -> NUMBER .)
    UNTIL           reduce using rule 41 (exp -> NUMBER .)
    ELSEIF          reduce using rule 41 (exp -> NUMBER .)
    ELSE            reduce using rule 41 (exp -> NUMBER .)
    RPAREN          reduce using rule 41 (exp -> NUMBER .)
    RCOLCH          reduce using rule 41 (exp -> NUMBER .)
    RBRACE          reduce using rule 41 (exp -> NUMBER .)


state 48

    (42) exp -> STRING .

    DO              reduce using rule 42 (exp -> STRING .)
    PLUS            reduce using rule 42 (exp -> STRING .)
    MINUS           reduce using rule 42 (exp -> STRING .)
    TIMES           reduce using rule 42 (exp -> STRING .)
    DIVIDE          reduce using rule 42 (exp -> STRING .)
    EXPO            reduce using rule 42 (exp -> STRING .)
    PERCENTUAL      reduce using rule 42 (exp -> STRING .)
    CONCAT          reduce using rule 42 (exp -> STRING .)
    LT              reduce using rule 42 (exp -> STRING .)
    LTEQUALS        reduce using rule 42 (exp -> STRING .)
    GT              reduce using rule 42 (exp -> STRING .)
    GTEQUALS        reduce using rule 42 (exp -> STRING .)
    EQUALS          reduce using rule 42 (exp -> STRING .)
    DIF             reduce using rule 42 (exp -> STRING .)
    AND             reduce using rule 42 (exp -> STRING .)
    OR              reduce using rule 42 (exp -> STRING .)
    THEN            reduce using rule 42 (exp -> STRING .)
    COMMA           reduce using rule 42 (exp -> STRING .)
    SEMICOLON       reduce using rule 42 (exp -> STRING .)
    BREAK           reduce using rule 42 (exp -> STRING .)
    DUALCOLON       reduce using rule 42 (exp -> STRING .)
    WHILE           reduce using rule 42 (exp -> STRING .)
    REPEAT          reduce using rule 42 (exp -> STRING .)
    IF              reduce using rule 42 (exp -> STRING .)
    FOR             reduce using rule 42 (exp -> STRING .)
    LOCAL           reduce using rule 42 (exp -> STRING .)
    RETURN          reduce using rule 42 (exp -> STRING .)
    NAME            reduce using rule 42 (exp -> STRING .)
    LPAREN          reduce using rule 42 (exp -> STRING .)
    FUNCTION        reduce using rule 42 (exp -> STRING .)
    $end            reduce using rule 42 (exp -> STRING .)
    END             reduce using rule 42 (exp -> STRING .)
    UNTIL           reduce using rule 42 (exp -> STRING .)
    ELSEIF          reduce using rule 42 (exp -> STRING .)
    ELSE            reduce using rule 42 (exp -> STRING .)
    RPAREN          reduce using rule 42 (exp -> STRING .)
    RCOLCH          reduce using rule 42 (exp -> STRING .)
    RBRACE          reduce using rule 42 (exp -> STRING .)


state 49

    (43) exp -> VARARGS .

    DO              reduce using rule 43 (exp -> VARARGS .)
    PLUS            reduce using rule 43 (exp -> VARARGS .)
    MINUS           reduce using rule 43 (exp -> VARARGS .)
    TIMES           reduce using rule 43 (exp -> VARARGS .)
    DIVIDE          reduce using rule 43 (exp -> VARARGS .)
    EXPO            reduce using rule 43 (exp -> VARARGS .)
    PERCENTUAL      reduce using rule 43 (exp -> VARARGS .)
    CONCAT          reduce using rule 43 (exp -> VARARGS .)
    LT              reduce using rule 43 (exp -> VARARGS .)
    LTEQUALS        reduce using rule 43 (exp -> VARARGS .)
    GT              reduce using rule 43 (exp -> VARARGS .)
    GTEQUALS        reduce using rule 43 (exp -> VARARGS .)
    EQUALS          reduce using rule 43 (exp -> VARARGS .)
    DIF             reduce using rule 43 (exp -> VARARGS .)
    AND             reduce using rule 43 (exp -> VARARGS .)
    OR              reduce using rule 43 (exp -> VARARGS .)
    THEN            reduce using rule 43 (exp -> VARARGS .)
    COMMA           reduce using rule 43 (exp -> VARARGS .)
    SEMICOLON       reduce using rule 43 (exp -> VARARGS .)
    BREAK           reduce using rule 43 (exp -> VARARGS .)
    DUALCOLON       reduce using rule 43 (exp -> VARARGS .)
    WHILE           reduce using rule 43 (exp -> VARARGS .)
    REPEAT          reduce using rule 43 (exp -> VARARGS .)
    IF              reduce using rule 43 (exp -> VARARGS .)
    FOR             reduce using rule 43 (exp -> VARARGS .)
    LOCAL           reduce using rule 43 (exp -> VARARGS .)
    RETURN          reduce using rule 43 (exp -> VARARGS .)
    NAME            reduce using rule 43 (exp -> VARARGS .)
    LPAREN          reduce using rule 43 (exp -> VARARGS .)
    FUNCTION        reduce using rule 43 (exp -> VARARGS .)
    $end            reduce using rule 43 (exp -> VARARGS .)
    END             reduce using rule 43 (exp -> VARARGS .)
    UNTIL           reduce using rule 43 (exp -> VARARGS .)
    ELSEIF          reduce using rule 43 (exp -> VARARGS .)
    ELSE            reduce using rule 43 (exp -> VARARGS .)
    RPAREN          reduce using rule 43 (exp -> VARARGS .)
    RCOLCH          reduce using rule 43 (exp -> VARARGS .)
    RBRACE          reduce using rule 43 (exp -> VARARGS .)


state 50

    (44) exp -> def_function .

    DO              reduce using rule 44 (exp -> def_function .)
    PLUS            reduce using rule 44 (exp -> def_function .)
    MINUS           reduce using rule 44 (exp -> def_function .)
    TIMES           reduce using rule 44 (exp -> def_function .)
    DIVIDE          reduce using rule 44 (exp -> def_function .)
    EXPO            reduce using rule 44 (exp -> def_function .)
    PERCENTUAL      reduce using rule 44 (exp -> def_function .)
    CONCAT          reduce using rule 44 (exp -> def_function .)
    LT              reduce using rule 44 (exp -> def_function .)
    LTEQUALS        reduce using rule 44 (exp -> def_function .)
    GT              reduce using rule 44 (exp -> def_function .)
    GTEQUALS        reduce using rule 44 (exp -> def_function .)
    EQUALS          reduce using rule 44 (exp -> def_function .)
    DIF             reduce using rule 44 (exp -> def_function .)
    AND             reduce using rule 44 (exp -> def_function .)
    OR              reduce using rule 44 (exp -> def_function .)
    THEN            reduce using rule 44 (exp -> def_function .)
    COMMA           reduce using rule 44 (exp -> def_function .)
    SEMICOLON       reduce using rule 44 (exp -> def_function .)
    BREAK           reduce using rule 44 (exp -> def_function .)
    DUALCOLON       reduce using rule 44 (exp -> def_function .)
    WHILE           reduce using rule 44 (exp -> def_function .)
    REPEAT          reduce using rule 44 (exp -> def_function .)
    IF              reduce using rule 44 (exp -> def_function .)
    FOR             reduce using rule 44 (exp -> def_function .)
    LOCAL           reduce using rule 44 (exp -> def_function .)
    RETURN          reduce using rule 44 (exp -> def_function .)
    NAME            reduce using rule 44 (exp -> def_function .)
    LPAREN          reduce using rule 44 (exp -> def_function .)
    FUNCTION        reduce using rule 44 (exp -> def_function .)
    $end            reduce using rule 44 (exp -> def_function .)
    END             reduce using rule 44 (exp -> def_function .)
    UNTIL           reduce using rule 44 (exp -> def_function .)
    ELSEIF          reduce using rule 44 (exp -> def_function .)
    ELSE            reduce using rule 44 (exp -> def_function .)
    RPAREN          reduce using rule 44 (exp -> def_function .)
    RCOLCH          reduce using rule 44 (exp -> def_function .)
    RBRACE          reduce using rule 44 (exp -> def_function .)


state 51

    (45) exp -> exp_prefix .
    (67) call_function -> exp_prefix . args
    (68) args -> . LPAREN list_exps RPAREN
    (69) args -> . LPAREN RPAREN
    (70) args -> . construct_table
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE

  ! shift/reduce conflict for LPAREN resolved as shift
    DO              reduce using rule 45 (exp -> exp_prefix .)
    PLUS            reduce using rule 45 (exp -> exp_prefix .)
    MINUS           reduce using rule 45 (exp -> exp_prefix .)
    TIMES           reduce using rule 45 (exp -> exp_prefix .)
    DIVIDE          reduce using rule 45 (exp -> exp_prefix .)
    EXPO            reduce using rule 45 (exp -> exp_prefix .)
    PERCENTUAL      reduce using rule 45 (exp -> exp_prefix .)
    CONCAT          reduce using rule 45 (exp -> exp_prefix .)
    LT              reduce using rule 45 (exp -> exp_prefix .)
    LTEQUALS        reduce using rule 45 (exp -> exp_prefix .)
    GT              reduce using rule 45 (exp -> exp_prefix .)
    GTEQUALS        reduce using rule 45 (exp -> exp_prefix .)
    EQUALS          reduce using rule 45 (exp -> exp_prefix .)
    DIF             reduce using rule 45 (exp -> exp_prefix .)
    AND             reduce using rule 45 (exp -> exp_prefix .)
    OR              reduce using rule 45 (exp -> exp_prefix .)
    THEN            reduce using rule 45 (exp -> exp_prefix .)
    COMMA           reduce using rule 45 (exp -> exp_prefix .)
    SEMICOLON       reduce using rule 45 (exp -> exp_prefix .)
    BREAK           reduce using rule 45 (exp -> exp_prefix .)
    DUALCOLON       reduce using rule 45 (exp -> exp_prefix .)
    WHILE           reduce using rule 45 (exp -> exp_prefix .)
    REPEAT          reduce using rule 45 (exp -> exp_prefix .)
    IF              reduce using rule 45 (exp -> exp_prefix .)
    FOR             reduce using rule 45 (exp -> exp_prefix .)
    LOCAL           reduce using rule 45 (exp -> exp_prefix .)
    RETURN          reduce using rule 45 (exp -> exp_prefix .)
    NAME            reduce using rule 45 (exp -> exp_prefix .)
    FUNCTION        reduce using rule 45 (exp -> exp_prefix .)
    $end            reduce using rule 45 (exp -> exp_prefix .)
    END             reduce using rule 45 (exp -> exp_prefix .)
    UNTIL           reduce using rule 45 (exp -> exp_prefix .)
    ELSEIF          reduce using rule 45 (exp -> exp_prefix .)
    ELSE            reduce using rule 45 (exp -> exp_prefix .)
    RPAREN          reduce using rule 45 (exp -> exp_prefix .)
    RCOLCH          reduce using rule 45 (exp -> exp_prefix .)
    RBRACE          reduce using rule 45 (exp -> exp_prefix .)
    LPAREN          shift and go to state 38
    LBRACE          shift and go to state 40

  ! LPAREN          [ reduce using rule 45 (exp -> exp_prefix .) ]

    args                           shift and go to state 37
    construct_table                shift and go to state 39

state 52

    (46) exp -> construct_table .

    DO              reduce using rule 46 (exp -> construct_table .)
    PLUS            reduce using rule 46 (exp -> construct_table .)
    MINUS           reduce using rule 46 (exp -> construct_table .)
    TIMES           reduce using rule 46 (exp -> construct_table .)
    DIVIDE          reduce using rule 46 (exp -> construct_table .)
    EXPO            reduce using rule 46 (exp -> construct_table .)
    PERCENTUAL      reduce using rule 46 (exp -> construct_table .)
    CONCAT          reduce using rule 46 (exp -> construct_table .)
    LT              reduce using rule 46 (exp -> construct_table .)
    LTEQUALS        reduce using rule 46 (exp -> construct_table .)
    GT              reduce using rule 46 (exp -> construct_table .)
    GTEQUALS        reduce using rule 46 (exp -> construct_table .)
    EQUALS          reduce using rule 46 (exp -> construct_table .)
    DIF             reduce using rule 46 (exp -> construct_table .)
    AND             reduce using rule 46 (exp -> construct_table .)
    OR              reduce using rule 46 (exp -> construct_table .)
    THEN            reduce using rule 46 (exp -> construct_table .)
    COMMA           reduce using rule 46 (exp -> construct_table .)
    SEMICOLON       reduce using rule 46 (exp -> construct_table .)
    BREAK           reduce using rule 46 (exp -> construct_table .)
    DUALCOLON       reduce using rule 46 (exp -> construct_table .)
    WHILE           reduce using rule 46 (exp -> construct_table .)
    REPEAT          reduce using rule 46 (exp -> construct_table .)
    IF              reduce using rule 46 (exp -> construct_table .)
    FOR             reduce using rule 46 (exp -> construct_table .)
    LOCAL           reduce using rule 46 (exp -> construct_table .)
    RETURN          reduce using rule 46 (exp -> construct_table .)
    NAME            reduce using rule 46 (exp -> construct_table .)
    LPAREN          reduce using rule 46 (exp -> construct_table .)
    FUNCTION        reduce using rule 46 (exp -> construct_table .)
    $end            reduce using rule 46 (exp -> construct_table .)
    END             reduce using rule 46 (exp -> construct_table .)
    UNTIL           reduce using rule 46 (exp -> construct_table .)
    ELSEIF          reduce using rule 46 (exp -> construct_table .)
    ELSE            reduce using rule 46 (exp -> construct_table .)
    RPAREN          reduce using rule 46 (exp -> construct_table .)
    RCOLCH          reduce using rule 46 (exp -> construct_table .)
    RBRACE          reduce using rule 46 (exp -> construct_table .)


state 53

    (47) exp -> TAG . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 102
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 54

    (48) exp -> MINUS . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 103
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 55

    (49) exp -> NOT . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 104
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 56

    (31) prefix_exp -> call_function .

    LCOLCH          reduce using rule 31 (prefix_exp -> call_function .)
    DOT             reduce using rule 31 (prefix_exp -> call_function .)


state 57

    (104) local_function -> LOCAL . FUNCTION NAME body_function

    FUNCTION        shift and go to state 64


state 58

    (103) struct_repeat -> REPEAT block . UNTIL exp

    UNTIL           shift and go to state 105


state 59

    (93) if -> IF exp . THEN block END
    (94) if -> IF exp . THEN else
    (95) if -> IF exp . THEN block else_if else
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    THEN            shift and go to state 106
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 60

    (100) struct_for -> FOR NAME . ATRIB exp COMMA exp DO block END
    (101) struct_for -> FOR NAME . ATRIB exp COMMA exp COMMA exp DO block END
    (33) list_names -> NAME . COMMA list_names
    (34) list_names -> NAME .

    ATRIB           shift and go to state 107
    COMMA           shift and go to state 108
    IN              reduce using rule 34 (list_names -> NAME .)


state 61

    (102) struct_for_in -> FOR list_names . IN list_exps DO block END

    IN              shift and go to state 109


state 62

    (89) local_var -> LOCAL list_names . ATRIB list_exps
    (90) local_var -> LOCAL list_names .

    ATRIB           shift and go to state 110
    SEMICOLON       reduce using rule 90 (local_var -> LOCAL list_names .)
    BREAK           reduce using rule 90 (local_var -> LOCAL list_names .)
    DO              reduce using rule 90 (local_var -> LOCAL list_names .)
    DUALCOLON       reduce using rule 90 (local_var -> LOCAL list_names .)
    WHILE           reduce using rule 90 (local_var -> LOCAL list_names .)
    REPEAT          reduce using rule 90 (local_var -> LOCAL list_names .)
    IF              reduce using rule 90 (local_var -> LOCAL list_names .)
    FOR             reduce using rule 90 (local_var -> LOCAL list_names .)
    LOCAL           reduce using rule 90 (local_var -> LOCAL list_names .)
    RETURN          reduce using rule 90 (local_var -> LOCAL list_names .)
    NAME            reduce using rule 90 (local_var -> LOCAL list_names .)
    LPAREN          reduce using rule 90 (local_var -> LOCAL list_names .)
    FUNCTION        reduce using rule 90 (local_var -> LOCAL list_names .)
    $end            reduce using rule 90 (local_var -> LOCAL list_names .)
    END             reduce using rule 90 (local_var -> LOCAL list_names .)
    UNTIL           reduce using rule 90 (local_var -> LOCAL list_names .)
    ELSEIF          reduce using rule 90 (local_var -> LOCAL list_names .)
    ELSE            reduce using rule 90 (local_var -> LOCAL list_names .)


state 63

    (91) local_var -> LOCAL NAME . ATRIB exp
    (33) list_names -> NAME . COMMA list_names
    (34) list_names -> NAME .

  ! shift/reduce conflict for ATRIB resolved as shift
    ATRIB           shift and go to state 111
    COMMA           shift and go to state 108
    SEMICOLON       reduce using rule 34 (list_names -> NAME .)
    BREAK           reduce using rule 34 (list_names -> NAME .)
    DO              reduce using rule 34 (list_names -> NAME .)
    DUALCOLON       reduce using rule 34 (list_names -> NAME .)
    WHILE           reduce using rule 34 (list_names -> NAME .)
    REPEAT          reduce using rule 34 (list_names -> NAME .)
    IF              reduce using rule 34 (list_names -> NAME .)
    FOR             reduce using rule 34 (list_names -> NAME .)
    LOCAL           reduce using rule 34 (list_names -> NAME .)
    RETURN          reduce using rule 34 (list_names -> NAME .)
    NAME            reduce using rule 34 (list_names -> NAME .)
    LPAREN          reduce using rule 34 (list_names -> NAME .)
    FUNCTION        reduce using rule 34 (list_names -> NAME .)
    $end            reduce using rule 34 (list_names -> NAME .)
    END             reduce using rule 34 (list_names -> NAME .)
    UNTIL           reduce using rule 34 (list_names -> NAME .)
    ELSEIF          reduce using rule 34 (list_names -> NAME .)
    ELSE            reduce using rule 34 (list_names -> NAME .)

  ! ATRIB           [ reduce using rule 34 (list_names -> NAME .) ]


state 64

    (104) local_function -> LOCAL FUNCTION . NAME body_function

    NAME            shift and go to state 112


state 65

    (19) command_ret -> RETURN list_exps .
    (20) command_ret -> RETURN list_exps . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    BREAK           reduce using rule 19 (command_ret -> RETURN list_exps .)
    DO              reduce using rule 19 (command_ret -> RETURN list_exps .)
    DUALCOLON       reduce using rule 19 (command_ret -> RETURN list_exps .)
    WHILE           reduce using rule 19 (command_ret -> RETURN list_exps .)
    REPEAT          reduce using rule 19 (command_ret -> RETURN list_exps .)
    IF              reduce using rule 19 (command_ret -> RETURN list_exps .)
    FOR             reduce using rule 19 (command_ret -> RETURN list_exps .)
    LOCAL           reduce using rule 19 (command_ret -> RETURN list_exps .)
    RETURN          reduce using rule 19 (command_ret -> RETURN list_exps .)
    NAME            reduce using rule 19 (command_ret -> RETURN list_exps .)
    LPAREN          reduce using rule 19 (command_ret -> RETURN list_exps .)
    FUNCTION        reduce using rule 19 (command_ret -> RETURN list_exps .)
    $end            reduce using rule 19 (command_ret -> RETURN list_exps .)
    END             reduce using rule 19 (command_ret -> RETURN list_exps .)
    UNTIL           reduce using rule 19 (command_ret -> RETURN list_exps .)
    ELSEIF          reduce using rule 19 (command_ret -> RETURN list_exps .)
    ELSE            reduce using rule 19 (command_ret -> RETURN list_exps .)
    SEMICOLON       shift and go to state 113

  ! SEMICOLON       [ reduce using rule 19 (command_ret -> RETURN list_exps .) ]


state 66

    (35) list_exps -> exp . COMMA list_exps
    (36) list_exps -> exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    COMMA           shift and go to state 114
    SEMICOLON       reduce using rule 36 (list_exps -> exp .)
    BREAK           reduce using rule 36 (list_exps -> exp .)
    DO              reduce using rule 36 (list_exps -> exp .)
    DUALCOLON       reduce using rule 36 (list_exps -> exp .)
    WHILE           reduce using rule 36 (list_exps -> exp .)
    REPEAT          reduce using rule 36 (list_exps -> exp .)
    IF              reduce using rule 36 (list_exps -> exp .)
    FOR             reduce using rule 36 (list_exps -> exp .)
    LOCAL           reduce using rule 36 (list_exps -> exp .)
    RETURN          reduce using rule 36 (list_exps -> exp .)
    NAME            reduce using rule 36 (list_exps -> exp .)
    LPAREN          reduce using rule 36 (list_exps -> exp .)
    FUNCTION        reduce using rule 36 (list_exps -> exp .)
    $end            reduce using rule 36 (list_exps -> exp .)
    END             reduce using rule 36 (list_exps -> exp .)
    UNTIL           reduce using rule 36 (list_exps -> exp .)
    ELSEIF          reduce using rule 36 (list_exps -> exp .)
    ELSE            reduce using rule 36 (list_exps -> exp .)
    RPAREN          reduce using rule 36 (list_exps -> exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 67

    (28) var -> prefix_exp LCOLCH . exp RCOLCH
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    prefix_exp                     shift and go to state 30
    exp                            shift and go to state 115
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 68

    (29) var -> prefix_exp DOT . NAME

    NAME            shift and go to state 116


state 69

    (66) exp_prefix -> LPAREN exp . RPAREN
    (32) prefix_exp -> LPAREN exp . RPAREN
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    RPAREN          shift and go to state 117
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 70

    (92) function -> FUNCTION name_function . body_function
    (73) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 119

    body_function                  shift and go to state 118

state 71

    (22) name_function -> NAME .
    (23) name_function -> NAME . DOT NAME
    (24) name_function -> NAME . COLON NAME

    LPAREN          reduce using rule 22 (name_function -> NAME .)
    DOT             shift and go to state 120
    COLON           shift and go to state 121


state 72

    (5) command -> list_vars ATRIB list_exps .

    SEMICOLON       reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    BREAK           reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    DO              reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    DUALCOLON       reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    WHILE           reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    REPEAT          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    IF              reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    FOR             reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    LOCAL           reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    RETURN          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    NAME            reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    LPAREN          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    FUNCTION        reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    $end            reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    END             reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    UNTIL           reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    ELSEIF          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    ELSE            reduce using rule 5 (command -> list_vars ATRIB list_exps .)


state 73

    (9) command -> DO block END .

    SEMICOLON       reduce using rule 9 (command -> DO block END .)
    BREAK           reduce using rule 9 (command -> DO block END .)
    DO              reduce using rule 9 (command -> DO block END .)
    DUALCOLON       reduce using rule 9 (command -> DO block END .)
    WHILE           reduce using rule 9 (command -> DO block END .)
    REPEAT          reduce using rule 9 (command -> DO block END .)
    IF              reduce using rule 9 (command -> DO block END .)
    FOR             reduce using rule 9 (command -> DO block END .)
    LOCAL           reduce using rule 9 (command -> DO block END .)
    RETURN          reduce using rule 9 (command -> DO block END .)
    NAME            reduce using rule 9 (command -> DO block END .)
    LPAREN          reduce using rule 9 (command -> DO block END .)
    FUNCTION        reduce using rule 9 (command -> DO block END .)
    $end            reduce using rule 9 (command -> DO block END .)
    END             reduce using rule 9 (command -> DO block END .)
    UNTIL           reduce using rule 9 (command -> DO block END .)
    ELSEIF          reduce using rule 9 (command -> DO block END .)
    ELSE            reduce using rule 9 (command -> DO block END .)


state 74

    (25) list_vars -> var .
    (26) list_vars -> var . COMMA list_vars
    (30) prefix_exp -> var .
    (65) exp_prefix -> var .

    ATRIB           reduce using rule 25 (list_vars -> var .)
    COMMA           shift and go to state 36
    LCOLCH          reduce using rule 30 (prefix_exp -> var .)
    DOT             reduce using rule 30 (prefix_exp -> var .)
    LPAREN          reduce using rule 65 (exp_prefix -> var .)
    LBRACE          reduce using rule 65 (exp_prefix -> var .)


state 75

    (26) list_vars -> var COMMA list_vars .

    ATRIB           reduce using rule 26 (list_vars -> var COMMA list_vars .)


state 76

    (32) prefix_exp -> LPAREN . exp RPAREN
    (66) exp_prefix -> LPAREN . exp RPAREN
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 122
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 77

    (68) args -> LPAREN list_exps . RPAREN

    RPAREN          shift and go to state 123


state 78

    (69) args -> LPAREN RPAREN .

    SEMICOLON       reduce using rule 69 (args -> LPAREN RPAREN .)
    BREAK           reduce using rule 69 (args -> LPAREN RPAREN .)
    DO              reduce using rule 69 (args -> LPAREN RPAREN .)
    DUALCOLON       reduce using rule 69 (args -> LPAREN RPAREN .)
    WHILE           reduce using rule 69 (args -> LPAREN RPAREN .)
    REPEAT          reduce using rule 69 (args -> LPAREN RPAREN .)
    IF              reduce using rule 69 (args -> LPAREN RPAREN .)
    FOR             reduce using rule 69 (args -> LPAREN RPAREN .)
    LOCAL           reduce using rule 69 (args -> LPAREN RPAREN .)
    RETURN          reduce using rule 69 (args -> LPAREN RPAREN .)
    NAME            reduce using rule 69 (args -> LPAREN RPAREN .)
    LPAREN          reduce using rule 69 (args -> LPAREN RPAREN .)
    FUNCTION        reduce using rule 69 (args -> LPAREN RPAREN .)
    $end            reduce using rule 69 (args -> LPAREN RPAREN .)
    LCOLCH          reduce using rule 69 (args -> LPAREN RPAREN .)
    DOT             reduce using rule 69 (args -> LPAREN RPAREN .)
    END             reduce using rule 69 (args -> LPAREN RPAREN .)
    UNTIL           reduce using rule 69 (args -> LPAREN RPAREN .)
    ELSEIF          reduce using rule 69 (args -> LPAREN RPAREN .)
    ELSE            reduce using rule 69 (args -> LPAREN RPAREN .)


state 79

    (77) construct_table -> LBRACE list_fields . RBRACE

    RBRACE          shift and go to state 124


state 80

    (78) construct_table -> LBRACE RBRACE .

    SEMICOLON       reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    BREAK           reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    DO              reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    DUALCOLON       reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    WHILE           reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    REPEAT          reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    IF              reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    FOR             reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    LOCAL           reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    RETURN          reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    NAME            reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    LPAREN          reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    FUNCTION        reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    $end            reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    LCOLCH          reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    DOT             reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    END             reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    UNTIL           reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    ELSEIF          reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    ELSE            reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    PLUS            reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    MINUS           reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    TIMES           reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    EXPO            reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    PERCENTUAL      reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    CONCAT          reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    LT              reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    LTEQUALS        reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    GT              reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    GTEQUALS        reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    EQUALS          reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    DIF             reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    AND             reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    OR              reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    THEN            reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    COMMA           reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    RPAREN          reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    RCOLCH          reduce using rule 78 (construct_table -> LBRACE RBRACE .)
    RBRACE          reduce using rule 78 (construct_table -> LBRACE RBRACE .)


state 81

    (79) list_fields -> field .
    (80) list_fields -> field . separator_fields list_fields
    (87) separator_fields -> . COMMA
    (88) separator_fields -> . SEMICOLON

    RBRACE          reduce using rule 79 (list_fields -> field .)
    COMMA           shift and go to state 126
    SEMICOLON       shift and go to state 127

    separator_fields               shift and go to state 125

state 82

    (81) list_fields -> field_empty .
    (82) list_fields -> field_empty . separator_fields list_fields
    (87) separator_fields -> . COMMA
    (88) separator_fields -> . SEMICOLON

    RBRACE          reduce using rule 81 (list_fields -> field_empty .)
    COMMA           shift and go to state 126
    SEMICOLON       shift and go to state 127

    separator_fields               shift and go to state 128

state 83

    (85) field -> LCOLCH . exp RCOLCH ATRIB exp
    (83) field_empty -> LCOLCH . exp RCOLCH
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 129
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 84

    (86) field -> NAME . ATRIB exp
    (84) field_empty -> NAME .

    ATRIB           shift and go to state 130
    COMMA           reduce using rule 84 (field_empty -> NAME .)
    SEMICOLON       reduce using rule 84 (field_empty -> NAME .)
    RBRACE          reduce using rule 84 (field_empty -> NAME .)


state 85

    (21) rotulo -> DUALCOLON NAME DUALCOLON .

    SEMICOLON       reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    BREAK           reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    DO              reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    DUALCOLON       reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    WHILE           reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    REPEAT          reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    IF              reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    FOR             reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    LOCAL           reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    RETURN          reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    NAME            reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    LPAREN          reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    FUNCTION        reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    $end            reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    END             reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    UNTIL           reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    ELSEIF          reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    ELSE            reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)


state 86

    (99) struct_while -> WHILE exp DO . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 131
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 87

    (50) exp -> exp PLUS . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 132
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 88

    (51) exp -> exp MINUS . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 133
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 89

    (52) exp -> exp TIMES . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 134
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 90

    (53) exp -> exp DIVIDE . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 135
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 91

    (54) exp -> exp EXPO . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 136
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 92

    (55) exp -> exp PERCENTUAL . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 137
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 93

    (56) exp -> exp CONCAT . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 138
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 94

    (57) exp -> exp LT . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 139
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 95

    (58) exp -> exp LTEQUALS . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 140
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 96

    (59) exp -> exp GT . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 141
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 97

    (60) exp -> exp GTEQUALS . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 142
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 98

    (61) exp -> exp EQUALS . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 143
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 99

    (62) exp -> exp DIF . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 144
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 100

    (63) exp -> exp AND . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 145
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 101

    (64) exp -> exp OR . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 146
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 102

    (47) exp -> TAG exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 47 (exp -> TAG exp .)
    PLUS            reduce using rule 47 (exp -> TAG exp .)
    MINUS           reduce using rule 47 (exp -> TAG exp .)
    TIMES           reduce using rule 47 (exp -> TAG exp .)
    DIVIDE          reduce using rule 47 (exp -> TAG exp .)
    PERCENTUAL      reduce using rule 47 (exp -> TAG exp .)
    CONCAT          reduce using rule 47 (exp -> TAG exp .)
    LT              reduce using rule 47 (exp -> TAG exp .)
    LTEQUALS        reduce using rule 47 (exp -> TAG exp .)
    GT              reduce using rule 47 (exp -> TAG exp .)
    GTEQUALS        reduce using rule 47 (exp -> TAG exp .)
    EQUALS          reduce using rule 47 (exp -> TAG exp .)
    DIF             reduce using rule 47 (exp -> TAG exp .)
    AND             reduce using rule 47 (exp -> TAG exp .)
    OR              reduce using rule 47 (exp -> TAG exp .)
    THEN            reduce using rule 47 (exp -> TAG exp .)
    COMMA           reduce using rule 47 (exp -> TAG exp .)
    SEMICOLON       reduce using rule 47 (exp -> TAG exp .)
    BREAK           reduce using rule 47 (exp -> TAG exp .)
    DUALCOLON       reduce using rule 47 (exp -> TAG exp .)
    WHILE           reduce using rule 47 (exp -> TAG exp .)
    REPEAT          reduce using rule 47 (exp -> TAG exp .)
    IF              reduce using rule 47 (exp -> TAG exp .)
    FOR             reduce using rule 47 (exp -> TAG exp .)
    LOCAL           reduce using rule 47 (exp -> TAG exp .)
    RETURN          reduce using rule 47 (exp -> TAG exp .)
    NAME            reduce using rule 47 (exp -> TAG exp .)
    LPAREN          reduce using rule 47 (exp -> TAG exp .)
    FUNCTION        reduce using rule 47 (exp -> TAG exp .)
    $end            reduce using rule 47 (exp -> TAG exp .)
    END             reduce using rule 47 (exp -> TAG exp .)
    UNTIL           reduce using rule 47 (exp -> TAG exp .)
    ELSEIF          reduce using rule 47 (exp -> TAG exp .)
    ELSE            reduce using rule 47 (exp -> TAG exp .)
    RPAREN          reduce using rule 47 (exp -> TAG exp .)
    RCOLCH          reduce using rule 47 (exp -> TAG exp .)
    RBRACE          reduce using rule 47 (exp -> TAG exp .)
    EXPO            shift and go to state 91

  ! EXPO            [ reduce using rule 47 (exp -> TAG exp .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! PERCENTUAL      [ shift and go to state 92 ]
  ! CONCAT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 103

    (48) exp -> MINUS exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 48 (exp -> MINUS exp .)
    PLUS            reduce using rule 48 (exp -> MINUS exp .)
    MINUS           reduce using rule 48 (exp -> MINUS exp .)
    CONCAT          reduce using rule 48 (exp -> MINUS exp .)
    LT              reduce using rule 48 (exp -> MINUS exp .)
    LTEQUALS        reduce using rule 48 (exp -> MINUS exp .)
    GT              reduce using rule 48 (exp -> MINUS exp .)
    GTEQUALS        reduce using rule 48 (exp -> MINUS exp .)
    EQUALS          reduce using rule 48 (exp -> MINUS exp .)
    DIF             reduce using rule 48 (exp -> MINUS exp .)
    AND             reduce using rule 48 (exp -> MINUS exp .)
    OR              reduce using rule 48 (exp -> MINUS exp .)
    THEN            reduce using rule 48 (exp -> MINUS exp .)
    COMMA           reduce using rule 48 (exp -> MINUS exp .)
    SEMICOLON       reduce using rule 48 (exp -> MINUS exp .)
    BREAK           reduce using rule 48 (exp -> MINUS exp .)
    DUALCOLON       reduce using rule 48 (exp -> MINUS exp .)
    WHILE           reduce using rule 48 (exp -> MINUS exp .)
    REPEAT          reduce using rule 48 (exp -> MINUS exp .)
    IF              reduce using rule 48 (exp -> MINUS exp .)
    FOR             reduce using rule 48 (exp -> MINUS exp .)
    LOCAL           reduce using rule 48 (exp -> MINUS exp .)
    RETURN          reduce using rule 48 (exp -> MINUS exp .)
    NAME            reduce using rule 48 (exp -> MINUS exp .)
    LPAREN          reduce using rule 48 (exp -> MINUS exp .)
    FUNCTION        reduce using rule 48 (exp -> MINUS exp .)
    $end            reduce using rule 48 (exp -> MINUS exp .)
    END             reduce using rule 48 (exp -> MINUS exp .)
    UNTIL           reduce using rule 48 (exp -> MINUS exp .)
    ELSEIF          reduce using rule 48 (exp -> MINUS exp .)
    ELSE            reduce using rule 48 (exp -> MINUS exp .)
    RPAREN          reduce using rule 48 (exp -> MINUS exp .)
    RCOLCH          reduce using rule 48 (exp -> MINUS exp .)
    RBRACE          reduce using rule 48 (exp -> MINUS exp .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92

  ! TIMES           [ reduce using rule 48 (exp -> MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> MINUS exp .) ]
  ! EXPO            [ reduce using rule 48 (exp -> MINUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 48 (exp -> MINUS exp .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! CONCAT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 104

    (49) exp -> NOT exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 49 (exp -> NOT exp .)
    PLUS            reduce using rule 49 (exp -> NOT exp .)
    MINUS           reduce using rule 49 (exp -> NOT exp .)
    TIMES           reduce using rule 49 (exp -> NOT exp .)
    DIVIDE          reduce using rule 49 (exp -> NOT exp .)
    PERCENTUAL      reduce using rule 49 (exp -> NOT exp .)
    CONCAT          reduce using rule 49 (exp -> NOT exp .)
    LT              reduce using rule 49 (exp -> NOT exp .)
    LTEQUALS        reduce using rule 49 (exp -> NOT exp .)
    GT              reduce using rule 49 (exp -> NOT exp .)
    GTEQUALS        reduce using rule 49 (exp -> NOT exp .)
    EQUALS          reduce using rule 49 (exp -> NOT exp .)
    DIF             reduce using rule 49 (exp -> NOT exp .)
    AND             reduce using rule 49 (exp -> NOT exp .)
    OR              reduce using rule 49 (exp -> NOT exp .)
    THEN            reduce using rule 49 (exp -> NOT exp .)
    COMMA           reduce using rule 49 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 49 (exp -> NOT exp .)
    BREAK           reduce using rule 49 (exp -> NOT exp .)
    DUALCOLON       reduce using rule 49 (exp -> NOT exp .)
    WHILE           reduce using rule 49 (exp -> NOT exp .)
    REPEAT          reduce using rule 49 (exp -> NOT exp .)
    IF              reduce using rule 49 (exp -> NOT exp .)
    FOR             reduce using rule 49 (exp -> NOT exp .)
    LOCAL           reduce using rule 49 (exp -> NOT exp .)
    RETURN          reduce using rule 49 (exp -> NOT exp .)
    NAME            reduce using rule 49 (exp -> NOT exp .)
    LPAREN          reduce using rule 49 (exp -> NOT exp .)
    FUNCTION        reduce using rule 49 (exp -> NOT exp .)
    $end            reduce using rule 49 (exp -> NOT exp .)
    END             reduce using rule 49 (exp -> NOT exp .)
    UNTIL           reduce using rule 49 (exp -> NOT exp .)
    ELSEIF          reduce using rule 49 (exp -> NOT exp .)
    ELSE            reduce using rule 49 (exp -> NOT exp .)
    RPAREN          reduce using rule 49 (exp -> NOT exp .)
    RCOLCH          reduce using rule 49 (exp -> NOT exp .)
    RBRACE          reduce using rule 49 (exp -> NOT exp .)
    EXPO            shift and go to state 91

  ! EXPO            [ reduce using rule 49 (exp -> NOT exp .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! PERCENTUAL      [ shift and go to state 92 ]
  ! CONCAT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 105

    (103) struct_repeat -> REPEAT block UNTIL . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 147
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 106

    (93) if -> IF exp THEN . block END
    (94) if -> IF exp THEN . else
    (95) if -> IF exp THEN . block else_if else
    (2) block -> . command
    (3) block -> . command block
    (98) else -> . ELSE block END
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    ELSE            shift and go to state 150
    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 148
    else                           shift and go to state 149
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 107

    (100) struct_for -> FOR NAME ATRIB . exp COMMA exp DO block END
    (101) struct_for -> FOR NAME ATRIB . exp COMMA exp COMMA exp DO block END
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 151
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 108

    (33) list_names -> NAME COMMA . list_names
    (33) list_names -> . NAME COMMA list_names
    (34) list_names -> . NAME

    NAME            shift and go to state 152

    list_names                     shift and go to state 153

state 109

    (102) struct_for_in -> FOR list_names IN . list_exps DO block END
    (35) list_exps -> . exp COMMA list_exps
    (36) list_exps -> . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    list_exps                      shift and go to state 154
    exp                            shift and go to state 66
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 110

    (89) local_var -> LOCAL list_names ATRIB . list_exps
    (35) list_exps -> . exp COMMA list_exps
    (36) list_exps -> . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    list_exps                      shift and go to state 155
    exp                            shift and go to state 66
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 111

    (91) local_var -> LOCAL NAME ATRIB . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 156
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 112

    (104) local_function -> LOCAL FUNCTION NAME . body_function
    (73) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 119

    body_function                  shift and go to state 157

state 113

    (20) command_ret -> RETURN list_exps SEMICOLON .

    SEMICOLON       reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    BREAK           reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    DO              reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    DUALCOLON       reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    WHILE           reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    REPEAT          reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    IF              reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    FOR             reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    LOCAL           reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    RETURN          reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    NAME            reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    LPAREN          reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    FUNCTION        reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    $end            reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    END             reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    UNTIL           reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    ELSEIF          reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    ELSE            reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)


state 114

    (35) list_exps -> exp COMMA . list_exps
    (35) list_exps -> . exp COMMA list_exps
    (36) list_exps -> . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 66
    list_exps                      shift and go to state 158
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 115

    (28) var -> prefix_exp LCOLCH exp . RCOLCH
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    RCOLCH          shift and go to state 159
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 116

    (29) var -> prefix_exp DOT NAME .

    COMMA           reduce using rule 29 (var -> prefix_exp DOT NAME .)
    ATRIB           reduce using rule 29 (var -> prefix_exp DOT NAME .)
    LPAREN          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    LBRACE          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    LCOLCH          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    DOT             reduce using rule 29 (var -> prefix_exp DOT NAME .)
    DO              reduce using rule 29 (var -> prefix_exp DOT NAME .)
    PLUS            reduce using rule 29 (var -> prefix_exp DOT NAME .)
    MINUS           reduce using rule 29 (var -> prefix_exp DOT NAME .)
    TIMES           reduce using rule 29 (var -> prefix_exp DOT NAME .)
    DIVIDE          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    EXPO            reduce using rule 29 (var -> prefix_exp DOT NAME .)
    PERCENTUAL      reduce using rule 29 (var -> prefix_exp DOT NAME .)
    CONCAT          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    LT              reduce using rule 29 (var -> prefix_exp DOT NAME .)
    LTEQUALS        reduce using rule 29 (var -> prefix_exp DOT NAME .)
    GT              reduce using rule 29 (var -> prefix_exp DOT NAME .)
    GTEQUALS        reduce using rule 29 (var -> prefix_exp DOT NAME .)
    EQUALS          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    DIF             reduce using rule 29 (var -> prefix_exp DOT NAME .)
    AND             reduce using rule 29 (var -> prefix_exp DOT NAME .)
    OR              reduce using rule 29 (var -> prefix_exp DOT NAME .)
    THEN            reduce using rule 29 (var -> prefix_exp DOT NAME .)
    SEMICOLON       reduce using rule 29 (var -> prefix_exp DOT NAME .)
    BREAK           reduce using rule 29 (var -> prefix_exp DOT NAME .)
    DUALCOLON       reduce using rule 29 (var -> prefix_exp DOT NAME .)
    WHILE           reduce using rule 29 (var -> prefix_exp DOT NAME .)
    REPEAT          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    IF              reduce using rule 29 (var -> prefix_exp DOT NAME .)
    FOR             reduce using rule 29 (var -> prefix_exp DOT NAME .)
    LOCAL           reduce using rule 29 (var -> prefix_exp DOT NAME .)
    RETURN          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    NAME            reduce using rule 29 (var -> prefix_exp DOT NAME .)
    FUNCTION        reduce using rule 29 (var -> prefix_exp DOT NAME .)
    $end            reduce using rule 29 (var -> prefix_exp DOT NAME .)
    END             reduce using rule 29 (var -> prefix_exp DOT NAME .)
    UNTIL           reduce using rule 29 (var -> prefix_exp DOT NAME .)
    ELSEIF          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    ELSE            reduce using rule 29 (var -> prefix_exp DOT NAME .)
    RPAREN          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    RCOLCH          reduce using rule 29 (var -> prefix_exp DOT NAME .)
    RBRACE          reduce using rule 29 (var -> prefix_exp DOT NAME .)


state 117

    (66) exp_prefix -> LPAREN exp RPAREN .
    (32) prefix_exp -> LPAREN exp RPAREN .

    LPAREN          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    DO              reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    EXPO            reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    PERCENTUAL      reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    CONCAT          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    LT              reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    LTEQUALS        reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    GT              reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    GTEQUALS        reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    DIF             reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    AND             reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    OR              reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    THEN            reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    BREAK           reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    DUALCOLON       reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    WHILE           reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    REPEAT          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    IF              reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    FOR             reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    LOCAL           reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    NAME            reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    FUNCTION        reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    $end            reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    END             reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    UNTIL           reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    ELSEIF          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    ELSE            reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    RCOLCH          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    RBRACE          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    LCOLCH          reduce using rule 32 (prefix_exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 32 (prefix_exp -> LPAREN exp RPAREN .)


state 118

    (92) function -> FUNCTION name_function body_function .

    SEMICOLON       reduce using rule 92 (function -> FUNCTION name_function body_function .)
    BREAK           reduce using rule 92 (function -> FUNCTION name_function body_function .)
    DO              reduce using rule 92 (function -> FUNCTION name_function body_function .)
    DUALCOLON       reduce using rule 92 (function -> FUNCTION name_function body_function .)
    WHILE           reduce using rule 92 (function -> FUNCTION name_function body_function .)
    REPEAT          reduce using rule 92 (function -> FUNCTION name_function body_function .)
    IF              reduce using rule 92 (function -> FUNCTION name_function body_function .)
    FOR             reduce using rule 92 (function -> FUNCTION name_function body_function .)
    LOCAL           reduce using rule 92 (function -> FUNCTION name_function body_function .)
    RETURN          reduce using rule 92 (function -> FUNCTION name_function body_function .)
    NAME            reduce using rule 92 (function -> FUNCTION name_function body_function .)
    LPAREN          reduce using rule 92 (function -> FUNCTION name_function body_function .)
    FUNCTION        reduce using rule 92 (function -> FUNCTION name_function body_function .)
    $end            reduce using rule 92 (function -> FUNCTION name_function body_function .)
    END             reduce using rule 92 (function -> FUNCTION name_function body_function .)
    UNTIL           reduce using rule 92 (function -> FUNCTION name_function body_function .)
    ELSEIF          reduce using rule 92 (function -> FUNCTION name_function body_function .)
    ELSE            reduce using rule 92 (function -> FUNCTION name_function body_function .)
    PLUS            reduce using rule 92 (function -> FUNCTION name_function body_function .)
    MINUS           reduce using rule 92 (function -> FUNCTION name_function body_function .)
    TIMES           reduce using rule 92 (function -> FUNCTION name_function body_function .)
    DIVIDE          reduce using rule 92 (function -> FUNCTION name_function body_function .)
    EXPO            reduce using rule 92 (function -> FUNCTION name_function body_function .)
    PERCENTUAL      reduce using rule 92 (function -> FUNCTION name_function body_function .)
    CONCAT          reduce using rule 92 (function -> FUNCTION name_function body_function .)
    LT              reduce using rule 92 (function -> FUNCTION name_function body_function .)
    LTEQUALS        reduce using rule 92 (function -> FUNCTION name_function body_function .)
    GT              reduce using rule 92 (function -> FUNCTION name_function body_function .)
    GTEQUALS        reduce using rule 92 (function -> FUNCTION name_function body_function .)
    EQUALS          reduce using rule 92 (function -> FUNCTION name_function body_function .)
    DIF             reduce using rule 92 (function -> FUNCTION name_function body_function .)
    AND             reduce using rule 92 (function -> FUNCTION name_function body_function .)
    OR              reduce using rule 92 (function -> FUNCTION name_function body_function .)
    THEN            reduce using rule 92 (function -> FUNCTION name_function body_function .)
    COMMA           reduce using rule 92 (function -> FUNCTION name_function body_function .)
    RPAREN          reduce using rule 92 (function -> FUNCTION name_function body_function .)
    RCOLCH          reduce using rule 92 (function -> FUNCTION name_function body_function .)
    RBRACE          reduce using rule 92 (function -> FUNCTION name_function body_function .)


state 119

    (73) body_function -> LPAREN . list_pars RPAREN block END
    (74) list_pars -> . list_names
    (75) list_pars -> . list_names COMMA VARARGS
    (76) list_pars -> . VARARGS
    (33) list_names -> . NAME COMMA list_names
    (34) list_names -> . NAME

    VARARGS         shift and go to state 162
    NAME            shift and go to state 152

    list_pars                      shift and go to state 160
    list_names                     shift and go to state 161

state 120

    (23) name_function -> NAME DOT . NAME

    NAME            shift and go to state 163


state 121

    (24) name_function -> NAME COLON . NAME

    NAME            shift and go to state 164


state 122

    (32) prefix_exp -> LPAREN exp . RPAREN
    (66) exp_prefix -> LPAREN exp . RPAREN
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    RPAREN          shift and go to state 165
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 123

    (68) args -> LPAREN list_exps RPAREN .

    SEMICOLON       reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    BREAK           reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    DO              reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    DUALCOLON       reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    WHILE           reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    REPEAT          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    IF              reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    FOR             reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    LOCAL           reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    RETURN          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    NAME            reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    LPAREN          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    FUNCTION        reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    $end            reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    LCOLCH          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    DOT             reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    END             reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    UNTIL           reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    ELSEIF          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    ELSE            reduce using rule 68 (args -> LPAREN list_exps RPAREN .)


state 124

    (77) construct_table -> LBRACE list_fields RBRACE .

    SEMICOLON       reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    BREAK           reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    DO              reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    DUALCOLON       reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    WHILE           reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    REPEAT          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    IF              reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    FOR             reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    LOCAL           reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    RETURN          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    NAME            reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    LPAREN          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    FUNCTION        reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    $end            reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    LCOLCH          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    DOT             reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    END             reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    UNTIL           reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    ELSEIF          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    ELSE            reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    PLUS            reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    MINUS           reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    TIMES           reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    DIVIDE          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    EXPO            reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    PERCENTUAL      reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    CONCAT          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    LT              reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    LTEQUALS        reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    GT              reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    GTEQUALS        reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    EQUALS          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    DIF             reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    AND             reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    OR              reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    THEN            reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    COMMA           reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    RPAREN          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    RCOLCH          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)
    RBRACE          reduce using rule 77 (construct_table -> LBRACE list_fields RBRACE .)


state 125

    (80) list_fields -> field separator_fields . list_fields
    (79) list_fields -> . field
    (80) list_fields -> . field separator_fields list_fields
    (81) list_fields -> . field_empty
    (82) list_fields -> . field_empty separator_fields list_fields
    (85) field -> . LCOLCH exp RCOLCH ATRIB exp
    (86) field -> . NAME ATRIB exp
    (83) field_empty -> . LCOLCH exp RCOLCH
    (84) field_empty -> . NAME

    LCOLCH          shift and go to state 83
    NAME            shift and go to state 84

    field                          shift and go to state 81
    list_fields                    shift and go to state 166
    field_empty                    shift and go to state 82

state 126

    (87) separator_fields -> COMMA .

    LCOLCH          reduce using rule 87 (separator_fields -> COMMA .)
    NAME            reduce using rule 87 (separator_fields -> COMMA .)


state 127

    (88) separator_fields -> SEMICOLON .

    LCOLCH          reduce using rule 88 (separator_fields -> SEMICOLON .)
    NAME            reduce using rule 88 (separator_fields -> SEMICOLON .)


state 128

    (82) list_fields -> field_empty separator_fields . list_fields
    (79) list_fields -> . field
    (80) list_fields -> . field separator_fields list_fields
    (81) list_fields -> . field_empty
    (82) list_fields -> . field_empty separator_fields list_fields
    (85) field -> . LCOLCH exp RCOLCH ATRIB exp
    (86) field -> . NAME ATRIB exp
    (83) field_empty -> . LCOLCH exp RCOLCH
    (84) field_empty -> . NAME

    LCOLCH          shift and go to state 83
    NAME            shift and go to state 84

    field_empty                    shift and go to state 82
    list_fields                    shift and go to state 167
    field                          shift and go to state 81

state 129

    (85) field -> LCOLCH exp . RCOLCH ATRIB exp
    (83) field_empty -> LCOLCH exp . RCOLCH
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    RCOLCH          shift and go to state 168
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 130

    (86) field -> NAME ATRIB . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 169
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 131

    (99) struct_while -> WHILE exp DO block . END

    END             shift and go to state 170


state 132

    (50) exp -> exp PLUS exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 50 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 50 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 50 (exp -> exp PLUS exp .)
    CONCAT          reduce using rule 50 (exp -> exp PLUS exp .)
    LT              reduce using rule 50 (exp -> exp PLUS exp .)
    LTEQUALS        reduce using rule 50 (exp -> exp PLUS exp .)
    GT              reduce using rule 50 (exp -> exp PLUS exp .)
    GTEQUALS        reduce using rule 50 (exp -> exp PLUS exp .)
    EQUALS          reduce using rule 50 (exp -> exp PLUS exp .)
    DIF             reduce using rule 50 (exp -> exp PLUS exp .)
    AND             reduce using rule 50 (exp -> exp PLUS exp .)
    OR              reduce using rule 50 (exp -> exp PLUS exp .)
    THEN            reduce using rule 50 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 50 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 50 (exp -> exp PLUS exp .)
    BREAK           reduce using rule 50 (exp -> exp PLUS exp .)
    DUALCOLON       reduce using rule 50 (exp -> exp PLUS exp .)
    WHILE           reduce using rule 50 (exp -> exp PLUS exp .)
    REPEAT          reduce using rule 50 (exp -> exp PLUS exp .)
    IF              reduce using rule 50 (exp -> exp PLUS exp .)
    FOR             reduce using rule 50 (exp -> exp PLUS exp .)
    LOCAL           reduce using rule 50 (exp -> exp PLUS exp .)
    RETURN          reduce using rule 50 (exp -> exp PLUS exp .)
    NAME            reduce using rule 50 (exp -> exp PLUS exp .)
    LPAREN          reduce using rule 50 (exp -> exp PLUS exp .)
    FUNCTION        reduce using rule 50 (exp -> exp PLUS exp .)
    $end            reduce using rule 50 (exp -> exp PLUS exp .)
    END             reduce using rule 50 (exp -> exp PLUS exp .)
    UNTIL           reduce using rule 50 (exp -> exp PLUS exp .)
    ELSEIF          reduce using rule 50 (exp -> exp PLUS exp .)
    ELSE            reduce using rule 50 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 50 (exp -> exp PLUS exp .)
    RCOLCH          reduce using rule 50 (exp -> exp PLUS exp .)
    RBRACE          reduce using rule 50 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92

  ! TIMES           [ reduce using rule 50 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 50 (exp -> exp PLUS exp .) ]
  ! EXPO            [ reduce using rule 50 (exp -> exp PLUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 50 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! CONCAT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 133

    (51) exp -> exp MINUS exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 51 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 51 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 51 (exp -> exp MINUS exp .)
    CONCAT          reduce using rule 51 (exp -> exp MINUS exp .)
    LT              reduce using rule 51 (exp -> exp MINUS exp .)
    LTEQUALS        reduce using rule 51 (exp -> exp MINUS exp .)
    GT              reduce using rule 51 (exp -> exp MINUS exp .)
    GTEQUALS        reduce using rule 51 (exp -> exp MINUS exp .)
    EQUALS          reduce using rule 51 (exp -> exp MINUS exp .)
    DIF             reduce using rule 51 (exp -> exp MINUS exp .)
    AND             reduce using rule 51 (exp -> exp MINUS exp .)
    OR              reduce using rule 51 (exp -> exp MINUS exp .)
    THEN            reduce using rule 51 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 51 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp MINUS exp .)
    BREAK           reduce using rule 51 (exp -> exp MINUS exp .)
    DUALCOLON       reduce using rule 51 (exp -> exp MINUS exp .)
    WHILE           reduce using rule 51 (exp -> exp MINUS exp .)
    REPEAT          reduce using rule 51 (exp -> exp MINUS exp .)
    IF              reduce using rule 51 (exp -> exp MINUS exp .)
    FOR             reduce using rule 51 (exp -> exp MINUS exp .)
    LOCAL           reduce using rule 51 (exp -> exp MINUS exp .)
    RETURN          reduce using rule 51 (exp -> exp MINUS exp .)
    NAME            reduce using rule 51 (exp -> exp MINUS exp .)
    LPAREN          reduce using rule 51 (exp -> exp MINUS exp .)
    FUNCTION        reduce using rule 51 (exp -> exp MINUS exp .)
    $end            reduce using rule 51 (exp -> exp MINUS exp .)
    END             reduce using rule 51 (exp -> exp MINUS exp .)
    UNTIL           reduce using rule 51 (exp -> exp MINUS exp .)
    ELSEIF          reduce using rule 51 (exp -> exp MINUS exp .)
    ELSE            reduce using rule 51 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 51 (exp -> exp MINUS exp .)
    RCOLCH          reduce using rule 51 (exp -> exp MINUS exp .)
    RBRACE          reduce using rule 51 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92

  ! TIMES           [ reduce using rule 51 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 51 (exp -> exp MINUS exp .) ]
  ! EXPO            [ reduce using rule 51 (exp -> exp MINUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 51 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! CONCAT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 134

    (52) exp -> exp TIMES exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 52 (exp -> exp TIMES exp .)
    PLUS            reduce using rule 52 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 52 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 52 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 52 (exp -> exp TIMES exp .)
    PERCENTUAL      reduce using rule 52 (exp -> exp TIMES exp .)
    CONCAT          reduce using rule 52 (exp -> exp TIMES exp .)
    LT              reduce using rule 52 (exp -> exp TIMES exp .)
    LTEQUALS        reduce using rule 52 (exp -> exp TIMES exp .)
    GT              reduce using rule 52 (exp -> exp TIMES exp .)
    GTEQUALS        reduce using rule 52 (exp -> exp TIMES exp .)
    EQUALS          reduce using rule 52 (exp -> exp TIMES exp .)
    DIF             reduce using rule 52 (exp -> exp TIMES exp .)
    AND             reduce using rule 52 (exp -> exp TIMES exp .)
    OR              reduce using rule 52 (exp -> exp TIMES exp .)
    THEN            reduce using rule 52 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 52 (exp -> exp TIMES exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp TIMES exp .)
    BREAK           reduce using rule 52 (exp -> exp TIMES exp .)
    DUALCOLON       reduce using rule 52 (exp -> exp TIMES exp .)
    WHILE           reduce using rule 52 (exp -> exp TIMES exp .)
    REPEAT          reduce using rule 52 (exp -> exp TIMES exp .)
    IF              reduce using rule 52 (exp -> exp TIMES exp .)
    FOR             reduce using rule 52 (exp -> exp TIMES exp .)
    LOCAL           reduce using rule 52 (exp -> exp TIMES exp .)
    RETURN          reduce using rule 52 (exp -> exp TIMES exp .)
    NAME            reduce using rule 52 (exp -> exp TIMES exp .)
    LPAREN          reduce using rule 52 (exp -> exp TIMES exp .)
    FUNCTION        reduce using rule 52 (exp -> exp TIMES exp .)
    $end            reduce using rule 52 (exp -> exp TIMES exp .)
    END             reduce using rule 52 (exp -> exp TIMES exp .)
    UNTIL           reduce using rule 52 (exp -> exp TIMES exp .)
    ELSEIF          reduce using rule 52 (exp -> exp TIMES exp .)
    ELSE            reduce using rule 52 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 52 (exp -> exp TIMES exp .)
    RCOLCH          reduce using rule 52 (exp -> exp TIMES exp .)
    RBRACE          reduce using rule 52 (exp -> exp TIMES exp .)
    EXPO            shift and go to state 91

  ! EXPO            [ reduce using rule 52 (exp -> exp TIMES exp .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! PERCENTUAL      [ shift and go to state 92 ]
  ! CONCAT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 135

    (53) exp -> exp DIVIDE exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 53 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 53 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 53 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 53 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 53 (exp -> exp DIVIDE exp .)
    PERCENTUAL      reduce using rule 53 (exp -> exp DIVIDE exp .)
    CONCAT          reduce using rule 53 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 53 (exp -> exp DIVIDE exp .)
    LTEQUALS        reduce using rule 53 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 53 (exp -> exp DIVIDE exp .)
    GTEQUALS        reduce using rule 53 (exp -> exp DIVIDE exp .)
    EQUALS          reduce using rule 53 (exp -> exp DIVIDE exp .)
    DIF             reduce using rule 53 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 53 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 53 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 53 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 53 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 53 (exp -> exp DIVIDE exp .)
    BREAK           reduce using rule 53 (exp -> exp DIVIDE exp .)
    DUALCOLON       reduce using rule 53 (exp -> exp DIVIDE exp .)
    WHILE           reduce using rule 53 (exp -> exp DIVIDE exp .)
    REPEAT          reduce using rule 53 (exp -> exp DIVIDE exp .)
    IF              reduce using rule 53 (exp -> exp DIVIDE exp .)
    FOR             reduce using rule 53 (exp -> exp DIVIDE exp .)
    LOCAL           reduce using rule 53 (exp -> exp DIVIDE exp .)
    RETURN          reduce using rule 53 (exp -> exp DIVIDE exp .)
    NAME            reduce using rule 53 (exp -> exp DIVIDE exp .)
    LPAREN          reduce using rule 53 (exp -> exp DIVIDE exp .)
    FUNCTION        reduce using rule 53 (exp -> exp DIVIDE exp .)
    $end            reduce using rule 53 (exp -> exp DIVIDE exp .)
    END             reduce using rule 53 (exp -> exp DIVIDE exp .)
    UNTIL           reduce using rule 53 (exp -> exp DIVIDE exp .)
    ELSEIF          reduce using rule 53 (exp -> exp DIVIDE exp .)
    ELSE            reduce using rule 53 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 53 (exp -> exp DIVIDE exp .)
    RCOLCH          reduce using rule 53 (exp -> exp DIVIDE exp .)
    RBRACE          reduce using rule 53 (exp -> exp DIVIDE exp .)
    EXPO            shift and go to state 91

  ! EXPO            [ reduce using rule 53 (exp -> exp DIVIDE exp .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! PERCENTUAL      [ shift and go to state 92 ]
  ! CONCAT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 136

    (54) exp -> exp EXPO exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 54 (exp -> exp EXPO exp .)
    PLUS            reduce using rule 54 (exp -> exp EXPO exp .)
    MINUS           reduce using rule 54 (exp -> exp EXPO exp .)
    TIMES           reduce using rule 54 (exp -> exp EXPO exp .)
    DIVIDE          reduce using rule 54 (exp -> exp EXPO exp .)
    EXPO            reduce using rule 54 (exp -> exp EXPO exp .)
    PERCENTUAL      reduce using rule 54 (exp -> exp EXPO exp .)
    CONCAT          reduce using rule 54 (exp -> exp EXPO exp .)
    LT              reduce using rule 54 (exp -> exp EXPO exp .)
    LTEQUALS        reduce using rule 54 (exp -> exp EXPO exp .)
    GT              reduce using rule 54 (exp -> exp EXPO exp .)
    GTEQUALS        reduce using rule 54 (exp -> exp EXPO exp .)
    EQUALS          reduce using rule 54 (exp -> exp EXPO exp .)
    DIF             reduce using rule 54 (exp -> exp EXPO exp .)
    AND             reduce using rule 54 (exp -> exp EXPO exp .)
    OR              reduce using rule 54 (exp -> exp EXPO exp .)
    THEN            reduce using rule 54 (exp -> exp EXPO exp .)
    COMMA           reduce using rule 54 (exp -> exp EXPO exp .)
    SEMICOLON       reduce using rule 54 (exp -> exp EXPO exp .)
    BREAK           reduce using rule 54 (exp -> exp EXPO exp .)
    DUALCOLON       reduce using rule 54 (exp -> exp EXPO exp .)
    WHILE           reduce using rule 54 (exp -> exp EXPO exp .)
    REPEAT          reduce using rule 54 (exp -> exp EXPO exp .)
    IF              reduce using rule 54 (exp -> exp EXPO exp .)
    FOR             reduce using rule 54 (exp -> exp EXPO exp .)
    LOCAL           reduce using rule 54 (exp -> exp EXPO exp .)
    RETURN          reduce using rule 54 (exp -> exp EXPO exp .)
    NAME            reduce using rule 54 (exp -> exp EXPO exp .)
    LPAREN          reduce using rule 54 (exp -> exp EXPO exp .)
    FUNCTION        reduce using rule 54 (exp -> exp EXPO exp .)
    $end            reduce using rule 54 (exp -> exp EXPO exp .)
    END             reduce using rule 54 (exp -> exp EXPO exp .)
    UNTIL           reduce using rule 54 (exp -> exp EXPO exp .)
    ELSEIF          reduce using rule 54 (exp -> exp EXPO exp .)
    ELSE            reduce using rule 54 (exp -> exp EXPO exp .)
    RPAREN          reduce using rule 54 (exp -> exp EXPO exp .)
    RCOLCH          reduce using rule 54 (exp -> exp EXPO exp .)
    RBRACE          reduce using rule 54 (exp -> exp EXPO exp .)

  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! EXPO            [ shift and go to state 91 ]
  ! PERCENTUAL      [ shift and go to state 92 ]
  ! CONCAT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 137

    (55) exp -> exp PERCENTUAL exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    PLUS            reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    MINUS           reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    TIMES           reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    DIVIDE          reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    PERCENTUAL      reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    CONCAT          reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    LT              reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    LTEQUALS        reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    GT              reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    GTEQUALS        reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    EQUALS          reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    DIF             reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    AND             reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    OR              reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    THEN            reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    COMMA           reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    SEMICOLON       reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    BREAK           reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    DUALCOLON       reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    WHILE           reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    REPEAT          reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    IF              reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    FOR             reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    LOCAL           reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    RETURN          reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    NAME            reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    LPAREN          reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    FUNCTION        reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    $end            reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    END             reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    UNTIL           reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    ELSEIF          reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    ELSE            reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    RPAREN          reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    RCOLCH          reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    RBRACE          reduce using rule 55 (exp -> exp PERCENTUAL exp .)
    EXPO            shift and go to state 91

  ! EXPO            [ reduce using rule 55 (exp -> exp PERCENTUAL exp .) ]
  ! PLUS            [ shift and go to state 87 ]
  ! MINUS           [ shift and go to state 88 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 90 ]
  ! PERCENTUAL      [ shift and go to state 92 ]
  ! CONCAT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 138

    (56) exp -> exp CONCAT exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 56 (exp -> exp CONCAT exp .)
    CONCAT          reduce using rule 56 (exp -> exp CONCAT exp .)
    LT              reduce using rule 56 (exp -> exp CONCAT exp .)
    LTEQUALS        reduce using rule 56 (exp -> exp CONCAT exp .)
    GT              reduce using rule 56 (exp -> exp CONCAT exp .)
    GTEQUALS        reduce using rule 56 (exp -> exp CONCAT exp .)
    EQUALS          reduce using rule 56 (exp -> exp CONCAT exp .)
    DIF             reduce using rule 56 (exp -> exp CONCAT exp .)
    AND             reduce using rule 56 (exp -> exp CONCAT exp .)
    OR              reduce using rule 56 (exp -> exp CONCAT exp .)
    THEN            reduce using rule 56 (exp -> exp CONCAT exp .)
    COMMA           reduce using rule 56 (exp -> exp CONCAT exp .)
    SEMICOLON       reduce using rule 56 (exp -> exp CONCAT exp .)
    BREAK           reduce using rule 56 (exp -> exp CONCAT exp .)
    DUALCOLON       reduce using rule 56 (exp -> exp CONCAT exp .)
    WHILE           reduce using rule 56 (exp -> exp CONCAT exp .)
    REPEAT          reduce using rule 56 (exp -> exp CONCAT exp .)
    IF              reduce using rule 56 (exp -> exp CONCAT exp .)
    FOR             reduce using rule 56 (exp -> exp CONCAT exp .)
    LOCAL           reduce using rule 56 (exp -> exp CONCAT exp .)
    RETURN          reduce using rule 56 (exp -> exp CONCAT exp .)
    NAME            reduce using rule 56 (exp -> exp CONCAT exp .)
    LPAREN          reduce using rule 56 (exp -> exp CONCAT exp .)
    FUNCTION        reduce using rule 56 (exp -> exp CONCAT exp .)
    $end            reduce using rule 56 (exp -> exp CONCAT exp .)
    END             reduce using rule 56 (exp -> exp CONCAT exp .)
    UNTIL           reduce using rule 56 (exp -> exp CONCAT exp .)
    ELSEIF          reduce using rule 56 (exp -> exp CONCAT exp .)
    ELSE            reduce using rule 56 (exp -> exp CONCAT exp .)
    RPAREN          reduce using rule 56 (exp -> exp CONCAT exp .)
    RCOLCH          reduce using rule 56 (exp -> exp CONCAT exp .)
    RBRACE          reduce using rule 56 (exp -> exp CONCAT exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92

  ! PLUS            [ reduce using rule 56 (exp -> exp CONCAT exp .) ]
  ! MINUS           [ reduce using rule 56 (exp -> exp CONCAT exp .) ]
  ! TIMES           [ reduce using rule 56 (exp -> exp CONCAT exp .) ]
  ! DIVIDE          [ reduce using rule 56 (exp -> exp CONCAT exp .) ]
  ! EXPO            [ reduce using rule 56 (exp -> exp CONCAT exp .) ]
  ! PERCENTUAL      [ reduce using rule 56 (exp -> exp CONCAT exp .) ]
  ! CONCAT          [ shift and go to state 93 ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 139

    (57) exp -> exp LT exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 57 (exp -> exp LT exp .)
    LT              reduce using rule 57 (exp -> exp LT exp .)
    LTEQUALS        reduce using rule 57 (exp -> exp LT exp .)
    GT              reduce using rule 57 (exp -> exp LT exp .)
    GTEQUALS        reduce using rule 57 (exp -> exp LT exp .)
    EQUALS          reduce using rule 57 (exp -> exp LT exp .)
    DIF             reduce using rule 57 (exp -> exp LT exp .)
    AND             reduce using rule 57 (exp -> exp LT exp .)
    OR              reduce using rule 57 (exp -> exp LT exp .)
    THEN            reduce using rule 57 (exp -> exp LT exp .)
    COMMA           reduce using rule 57 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 57 (exp -> exp LT exp .)
    BREAK           reduce using rule 57 (exp -> exp LT exp .)
    DUALCOLON       reduce using rule 57 (exp -> exp LT exp .)
    WHILE           reduce using rule 57 (exp -> exp LT exp .)
    REPEAT          reduce using rule 57 (exp -> exp LT exp .)
    IF              reduce using rule 57 (exp -> exp LT exp .)
    FOR             reduce using rule 57 (exp -> exp LT exp .)
    LOCAL           reduce using rule 57 (exp -> exp LT exp .)
    RETURN          reduce using rule 57 (exp -> exp LT exp .)
    NAME            reduce using rule 57 (exp -> exp LT exp .)
    LPAREN          reduce using rule 57 (exp -> exp LT exp .)
    FUNCTION        reduce using rule 57 (exp -> exp LT exp .)
    $end            reduce using rule 57 (exp -> exp LT exp .)
    END             reduce using rule 57 (exp -> exp LT exp .)
    UNTIL           reduce using rule 57 (exp -> exp LT exp .)
    ELSEIF          reduce using rule 57 (exp -> exp LT exp .)
    ELSE            reduce using rule 57 (exp -> exp LT exp .)
    RPAREN          reduce using rule 57 (exp -> exp LT exp .)
    RCOLCH          reduce using rule 57 (exp -> exp LT exp .)
    RBRACE          reduce using rule 57 (exp -> exp LT exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93

  ! PLUS            [ reduce using rule 57 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 57 (exp -> exp LT exp .) ]
  ! TIMES           [ reduce using rule 57 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 57 (exp -> exp LT exp .) ]
  ! EXPO            [ reduce using rule 57 (exp -> exp LT exp .) ]
  ! PERCENTUAL      [ reduce using rule 57 (exp -> exp LT exp .) ]
  ! CONCAT          [ reduce using rule 57 (exp -> exp LT exp .) ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 140

    (58) exp -> exp LTEQUALS exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 58 (exp -> exp LTEQUALS exp .)
    LT              reduce using rule 58 (exp -> exp LTEQUALS exp .)
    LTEQUALS        reduce using rule 58 (exp -> exp LTEQUALS exp .)
    GT              reduce using rule 58 (exp -> exp LTEQUALS exp .)
    GTEQUALS        reduce using rule 58 (exp -> exp LTEQUALS exp .)
    EQUALS          reduce using rule 58 (exp -> exp LTEQUALS exp .)
    DIF             reduce using rule 58 (exp -> exp LTEQUALS exp .)
    AND             reduce using rule 58 (exp -> exp LTEQUALS exp .)
    OR              reduce using rule 58 (exp -> exp LTEQUALS exp .)
    THEN            reduce using rule 58 (exp -> exp LTEQUALS exp .)
    COMMA           reduce using rule 58 (exp -> exp LTEQUALS exp .)
    SEMICOLON       reduce using rule 58 (exp -> exp LTEQUALS exp .)
    BREAK           reduce using rule 58 (exp -> exp LTEQUALS exp .)
    DUALCOLON       reduce using rule 58 (exp -> exp LTEQUALS exp .)
    WHILE           reduce using rule 58 (exp -> exp LTEQUALS exp .)
    REPEAT          reduce using rule 58 (exp -> exp LTEQUALS exp .)
    IF              reduce using rule 58 (exp -> exp LTEQUALS exp .)
    FOR             reduce using rule 58 (exp -> exp LTEQUALS exp .)
    LOCAL           reduce using rule 58 (exp -> exp LTEQUALS exp .)
    RETURN          reduce using rule 58 (exp -> exp LTEQUALS exp .)
    NAME            reduce using rule 58 (exp -> exp LTEQUALS exp .)
    LPAREN          reduce using rule 58 (exp -> exp LTEQUALS exp .)
    FUNCTION        reduce using rule 58 (exp -> exp LTEQUALS exp .)
    $end            reduce using rule 58 (exp -> exp LTEQUALS exp .)
    END             reduce using rule 58 (exp -> exp LTEQUALS exp .)
    UNTIL           reduce using rule 58 (exp -> exp LTEQUALS exp .)
    ELSEIF          reduce using rule 58 (exp -> exp LTEQUALS exp .)
    ELSE            reduce using rule 58 (exp -> exp LTEQUALS exp .)
    RPAREN          reduce using rule 58 (exp -> exp LTEQUALS exp .)
    RCOLCH          reduce using rule 58 (exp -> exp LTEQUALS exp .)
    RBRACE          reduce using rule 58 (exp -> exp LTEQUALS exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93

  ! PLUS            [ reduce using rule 58 (exp -> exp LTEQUALS exp .) ]
  ! MINUS           [ reduce using rule 58 (exp -> exp LTEQUALS exp .) ]
  ! TIMES           [ reduce using rule 58 (exp -> exp LTEQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 58 (exp -> exp LTEQUALS exp .) ]
  ! EXPO            [ reduce using rule 58 (exp -> exp LTEQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 58 (exp -> exp LTEQUALS exp .) ]
  ! CONCAT          [ reduce using rule 58 (exp -> exp LTEQUALS exp .) ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 141

    (59) exp -> exp GT exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 59 (exp -> exp GT exp .)
    LT              reduce using rule 59 (exp -> exp GT exp .)
    LTEQUALS        reduce using rule 59 (exp -> exp GT exp .)
    GT              reduce using rule 59 (exp -> exp GT exp .)
    GTEQUALS        reduce using rule 59 (exp -> exp GT exp .)
    EQUALS          reduce using rule 59 (exp -> exp GT exp .)
    DIF             reduce using rule 59 (exp -> exp GT exp .)
    AND             reduce using rule 59 (exp -> exp GT exp .)
    OR              reduce using rule 59 (exp -> exp GT exp .)
    THEN            reduce using rule 59 (exp -> exp GT exp .)
    COMMA           reduce using rule 59 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 59 (exp -> exp GT exp .)
    BREAK           reduce using rule 59 (exp -> exp GT exp .)
    DUALCOLON       reduce using rule 59 (exp -> exp GT exp .)
    WHILE           reduce using rule 59 (exp -> exp GT exp .)
    REPEAT          reduce using rule 59 (exp -> exp GT exp .)
    IF              reduce using rule 59 (exp -> exp GT exp .)
    FOR             reduce using rule 59 (exp -> exp GT exp .)
    LOCAL           reduce using rule 59 (exp -> exp GT exp .)
    RETURN          reduce using rule 59 (exp -> exp GT exp .)
    NAME            reduce using rule 59 (exp -> exp GT exp .)
    LPAREN          reduce using rule 59 (exp -> exp GT exp .)
    FUNCTION        reduce using rule 59 (exp -> exp GT exp .)
    $end            reduce using rule 59 (exp -> exp GT exp .)
    END             reduce using rule 59 (exp -> exp GT exp .)
    UNTIL           reduce using rule 59 (exp -> exp GT exp .)
    ELSEIF          reduce using rule 59 (exp -> exp GT exp .)
    ELSE            reduce using rule 59 (exp -> exp GT exp .)
    RPAREN          reduce using rule 59 (exp -> exp GT exp .)
    RCOLCH          reduce using rule 59 (exp -> exp GT exp .)
    RBRACE          reduce using rule 59 (exp -> exp GT exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93

  ! PLUS            [ reduce using rule 59 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 59 (exp -> exp GT exp .) ]
  ! TIMES           [ reduce using rule 59 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 59 (exp -> exp GT exp .) ]
  ! EXPO            [ reduce using rule 59 (exp -> exp GT exp .) ]
  ! PERCENTUAL      [ reduce using rule 59 (exp -> exp GT exp .) ]
  ! CONCAT          [ reduce using rule 59 (exp -> exp GT exp .) ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 142

    (60) exp -> exp GTEQUALS exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 60 (exp -> exp GTEQUALS exp .)
    LT              reduce using rule 60 (exp -> exp GTEQUALS exp .)
    LTEQUALS        reduce using rule 60 (exp -> exp GTEQUALS exp .)
    GT              reduce using rule 60 (exp -> exp GTEQUALS exp .)
    GTEQUALS        reduce using rule 60 (exp -> exp GTEQUALS exp .)
    EQUALS          reduce using rule 60 (exp -> exp GTEQUALS exp .)
    DIF             reduce using rule 60 (exp -> exp GTEQUALS exp .)
    AND             reduce using rule 60 (exp -> exp GTEQUALS exp .)
    OR              reduce using rule 60 (exp -> exp GTEQUALS exp .)
    THEN            reduce using rule 60 (exp -> exp GTEQUALS exp .)
    COMMA           reduce using rule 60 (exp -> exp GTEQUALS exp .)
    SEMICOLON       reduce using rule 60 (exp -> exp GTEQUALS exp .)
    BREAK           reduce using rule 60 (exp -> exp GTEQUALS exp .)
    DUALCOLON       reduce using rule 60 (exp -> exp GTEQUALS exp .)
    WHILE           reduce using rule 60 (exp -> exp GTEQUALS exp .)
    REPEAT          reduce using rule 60 (exp -> exp GTEQUALS exp .)
    IF              reduce using rule 60 (exp -> exp GTEQUALS exp .)
    FOR             reduce using rule 60 (exp -> exp GTEQUALS exp .)
    LOCAL           reduce using rule 60 (exp -> exp GTEQUALS exp .)
    RETURN          reduce using rule 60 (exp -> exp GTEQUALS exp .)
    NAME            reduce using rule 60 (exp -> exp GTEQUALS exp .)
    LPAREN          reduce using rule 60 (exp -> exp GTEQUALS exp .)
    FUNCTION        reduce using rule 60 (exp -> exp GTEQUALS exp .)
    $end            reduce using rule 60 (exp -> exp GTEQUALS exp .)
    END             reduce using rule 60 (exp -> exp GTEQUALS exp .)
    UNTIL           reduce using rule 60 (exp -> exp GTEQUALS exp .)
    ELSEIF          reduce using rule 60 (exp -> exp GTEQUALS exp .)
    ELSE            reduce using rule 60 (exp -> exp GTEQUALS exp .)
    RPAREN          reduce using rule 60 (exp -> exp GTEQUALS exp .)
    RCOLCH          reduce using rule 60 (exp -> exp GTEQUALS exp .)
    RBRACE          reduce using rule 60 (exp -> exp GTEQUALS exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93

  ! PLUS            [ reduce using rule 60 (exp -> exp GTEQUALS exp .) ]
  ! MINUS           [ reduce using rule 60 (exp -> exp GTEQUALS exp .) ]
  ! TIMES           [ reduce using rule 60 (exp -> exp GTEQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 60 (exp -> exp GTEQUALS exp .) ]
  ! EXPO            [ reduce using rule 60 (exp -> exp GTEQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 60 (exp -> exp GTEQUALS exp .) ]
  ! CONCAT          [ reduce using rule 60 (exp -> exp GTEQUALS exp .) ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 143

    (61) exp -> exp EQUALS exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 61 (exp -> exp EQUALS exp .)
    LT              reduce using rule 61 (exp -> exp EQUALS exp .)
    LTEQUALS        reduce using rule 61 (exp -> exp EQUALS exp .)
    GT              reduce using rule 61 (exp -> exp EQUALS exp .)
    GTEQUALS        reduce using rule 61 (exp -> exp EQUALS exp .)
    EQUALS          reduce using rule 61 (exp -> exp EQUALS exp .)
    DIF             reduce using rule 61 (exp -> exp EQUALS exp .)
    AND             reduce using rule 61 (exp -> exp EQUALS exp .)
    OR              reduce using rule 61 (exp -> exp EQUALS exp .)
    THEN            reduce using rule 61 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 61 (exp -> exp EQUALS exp .)
    SEMICOLON       reduce using rule 61 (exp -> exp EQUALS exp .)
    BREAK           reduce using rule 61 (exp -> exp EQUALS exp .)
    DUALCOLON       reduce using rule 61 (exp -> exp EQUALS exp .)
    WHILE           reduce using rule 61 (exp -> exp EQUALS exp .)
    REPEAT          reduce using rule 61 (exp -> exp EQUALS exp .)
    IF              reduce using rule 61 (exp -> exp EQUALS exp .)
    FOR             reduce using rule 61 (exp -> exp EQUALS exp .)
    LOCAL           reduce using rule 61 (exp -> exp EQUALS exp .)
    RETURN          reduce using rule 61 (exp -> exp EQUALS exp .)
    NAME            reduce using rule 61 (exp -> exp EQUALS exp .)
    LPAREN          reduce using rule 61 (exp -> exp EQUALS exp .)
    FUNCTION        reduce using rule 61 (exp -> exp EQUALS exp .)
    $end            reduce using rule 61 (exp -> exp EQUALS exp .)
    END             reduce using rule 61 (exp -> exp EQUALS exp .)
    UNTIL           reduce using rule 61 (exp -> exp EQUALS exp .)
    ELSEIF          reduce using rule 61 (exp -> exp EQUALS exp .)
    ELSE            reduce using rule 61 (exp -> exp EQUALS exp .)
    RPAREN          reduce using rule 61 (exp -> exp EQUALS exp .)
    RCOLCH          reduce using rule 61 (exp -> exp EQUALS exp .)
    RBRACE          reduce using rule 61 (exp -> exp EQUALS exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93

  ! PLUS            [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! MINUS           [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! TIMES           [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! EXPO            [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! CONCAT          [ reduce using rule 61 (exp -> exp EQUALS exp .) ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 144

    (62) exp -> exp DIF exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 62 (exp -> exp DIF exp .)
    LT              reduce using rule 62 (exp -> exp DIF exp .)
    LTEQUALS        reduce using rule 62 (exp -> exp DIF exp .)
    GT              reduce using rule 62 (exp -> exp DIF exp .)
    GTEQUALS        reduce using rule 62 (exp -> exp DIF exp .)
    EQUALS          reduce using rule 62 (exp -> exp DIF exp .)
    DIF             reduce using rule 62 (exp -> exp DIF exp .)
    AND             reduce using rule 62 (exp -> exp DIF exp .)
    OR              reduce using rule 62 (exp -> exp DIF exp .)
    THEN            reduce using rule 62 (exp -> exp DIF exp .)
    COMMA           reduce using rule 62 (exp -> exp DIF exp .)
    SEMICOLON       reduce using rule 62 (exp -> exp DIF exp .)
    BREAK           reduce using rule 62 (exp -> exp DIF exp .)
    DUALCOLON       reduce using rule 62 (exp -> exp DIF exp .)
    WHILE           reduce using rule 62 (exp -> exp DIF exp .)
    REPEAT          reduce using rule 62 (exp -> exp DIF exp .)
    IF              reduce using rule 62 (exp -> exp DIF exp .)
    FOR             reduce using rule 62 (exp -> exp DIF exp .)
    LOCAL           reduce using rule 62 (exp -> exp DIF exp .)
    RETURN          reduce using rule 62 (exp -> exp DIF exp .)
    NAME            reduce using rule 62 (exp -> exp DIF exp .)
    LPAREN          reduce using rule 62 (exp -> exp DIF exp .)
    FUNCTION        reduce using rule 62 (exp -> exp DIF exp .)
    $end            reduce using rule 62 (exp -> exp DIF exp .)
    END             reduce using rule 62 (exp -> exp DIF exp .)
    UNTIL           reduce using rule 62 (exp -> exp DIF exp .)
    ELSEIF          reduce using rule 62 (exp -> exp DIF exp .)
    ELSE            reduce using rule 62 (exp -> exp DIF exp .)
    RPAREN          reduce using rule 62 (exp -> exp DIF exp .)
    RCOLCH          reduce using rule 62 (exp -> exp DIF exp .)
    RBRACE          reduce using rule 62 (exp -> exp DIF exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93

  ! PLUS            [ reduce using rule 62 (exp -> exp DIF exp .) ]
  ! MINUS           [ reduce using rule 62 (exp -> exp DIF exp .) ]
  ! TIMES           [ reduce using rule 62 (exp -> exp DIF exp .) ]
  ! DIVIDE          [ reduce using rule 62 (exp -> exp DIF exp .) ]
  ! EXPO            [ reduce using rule 62 (exp -> exp DIF exp .) ]
  ! PERCENTUAL      [ reduce using rule 62 (exp -> exp DIF exp .) ]
  ! CONCAT          [ reduce using rule 62 (exp -> exp DIF exp .) ]
  ! LT              [ shift and go to state 94 ]
  ! LTEQUALS        [ shift and go to state 95 ]
  ! GT              [ shift and go to state 96 ]
  ! GTEQUALS        [ shift and go to state 97 ]
  ! EQUALS          [ shift and go to state 98 ]
  ! DIF             [ shift and go to state 99 ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 145

    (63) exp -> exp AND exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 63 (exp -> exp AND exp .)
    AND             reduce using rule 63 (exp -> exp AND exp .)
    OR              reduce using rule 63 (exp -> exp AND exp .)
    THEN            reduce using rule 63 (exp -> exp AND exp .)
    COMMA           reduce using rule 63 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 63 (exp -> exp AND exp .)
    BREAK           reduce using rule 63 (exp -> exp AND exp .)
    DUALCOLON       reduce using rule 63 (exp -> exp AND exp .)
    WHILE           reduce using rule 63 (exp -> exp AND exp .)
    REPEAT          reduce using rule 63 (exp -> exp AND exp .)
    IF              reduce using rule 63 (exp -> exp AND exp .)
    FOR             reduce using rule 63 (exp -> exp AND exp .)
    LOCAL           reduce using rule 63 (exp -> exp AND exp .)
    RETURN          reduce using rule 63 (exp -> exp AND exp .)
    NAME            reduce using rule 63 (exp -> exp AND exp .)
    LPAREN          reduce using rule 63 (exp -> exp AND exp .)
    FUNCTION        reduce using rule 63 (exp -> exp AND exp .)
    $end            reduce using rule 63 (exp -> exp AND exp .)
    END             reduce using rule 63 (exp -> exp AND exp .)
    UNTIL           reduce using rule 63 (exp -> exp AND exp .)
    ELSEIF          reduce using rule 63 (exp -> exp AND exp .)
    ELSE            reduce using rule 63 (exp -> exp AND exp .)
    RPAREN          reduce using rule 63 (exp -> exp AND exp .)
    RCOLCH          reduce using rule 63 (exp -> exp AND exp .)
    RBRACE          reduce using rule 63 (exp -> exp AND exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99

  ! PLUS            [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! TIMES           [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! EXPO            [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! PERCENTUAL      [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! CONCAT          [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! LTEQUALS        [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! GTEQUALS        [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! EQUALS          [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! DIF             [ reduce using rule 63 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 100 ]
  ! OR              [ shift and go to state 101 ]


state 146

    (64) exp -> exp OR exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              reduce using rule 64 (exp -> exp OR exp .)
    OR              reduce using rule 64 (exp -> exp OR exp .)
    THEN            reduce using rule 64 (exp -> exp OR exp .)
    COMMA           reduce using rule 64 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 64 (exp -> exp OR exp .)
    BREAK           reduce using rule 64 (exp -> exp OR exp .)
    DUALCOLON       reduce using rule 64 (exp -> exp OR exp .)
    WHILE           reduce using rule 64 (exp -> exp OR exp .)
    REPEAT          reduce using rule 64 (exp -> exp OR exp .)
    IF              reduce using rule 64 (exp -> exp OR exp .)
    FOR             reduce using rule 64 (exp -> exp OR exp .)
    LOCAL           reduce using rule 64 (exp -> exp OR exp .)
    RETURN          reduce using rule 64 (exp -> exp OR exp .)
    NAME            reduce using rule 64 (exp -> exp OR exp .)
    LPAREN          reduce using rule 64 (exp -> exp OR exp .)
    FUNCTION        reduce using rule 64 (exp -> exp OR exp .)
    $end            reduce using rule 64 (exp -> exp OR exp .)
    END             reduce using rule 64 (exp -> exp OR exp .)
    UNTIL           reduce using rule 64 (exp -> exp OR exp .)
    ELSEIF          reduce using rule 64 (exp -> exp OR exp .)
    ELSE            reduce using rule 64 (exp -> exp OR exp .)
    RPAREN          reduce using rule 64 (exp -> exp OR exp .)
    RCOLCH          reduce using rule 64 (exp -> exp OR exp .)
    RBRACE          reduce using rule 64 (exp -> exp OR exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100

  ! PLUS            [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! TIMES           [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! EXPO            [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! PERCENTUAL      [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! CONCAT          [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! LTEQUALS        [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! GTEQUALS        [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! EQUALS          [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! DIF             [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 64 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 101 ]


state 147

    (103) struct_repeat -> REPEAT block UNTIL exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    SEMICOLON       reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    BREAK           reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    DO              reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    DUALCOLON       reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    WHILE           reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    REPEAT          reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    IF              reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    FOR             reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    LOCAL           reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    RETURN          reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    NAME            reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    LPAREN          reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    FUNCTION        reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    $end            reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    END             reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    UNTIL           reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    ELSEIF          reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    ELSE            reduce using rule 103 (struct_repeat -> REPEAT block UNTIL exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 148

    (93) if -> IF exp THEN block . END
    (95) if -> IF exp THEN block . else_if else
    (96) else_if -> . ELSEIF exp THEN block
    (97) else_if -> . ELSEIF exp THEN block else_if

    END             shift and go to state 171
    ELSEIF          shift and go to state 173

    else_if                        shift and go to state 172

state 149

    (94) if -> IF exp THEN else .

    SEMICOLON       reduce using rule 94 (if -> IF exp THEN else .)
    BREAK           reduce using rule 94 (if -> IF exp THEN else .)
    DO              reduce using rule 94 (if -> IF exp THEN else .)
    DUALCOLON       reduce using rule 94 (if -> IF exp THEN else .)
    WHILE           reduce using rule 94 (if -> IF exp THEN else .)
    REPEAT          reduce using rule 94 (if -> IF exp THEN else .)
    IF              reduce using rule 94 (if -> IF exp THEN else .)
    FOR             reduce using rule 94 (if -> IF exp THEN else .)
    LOCAL           reduce using rule 94 (if -> IF exp THEN else .)
    RETURN          reduce using rule 94 (if -> IF exp THEN else .)
    NAME            reduce using rule 94 (if -> IF exp THEN else .)
    LPAREN          reduce using rule 94 (if -> IF exp THEN else .)
    FUNCTION        reduce using rule 94 (if -> IF exp THEN else .)
    $end            reduce using rule 94 (if -> IF exp THEN else .)
    END             reduce using rule 94 (if -> IF exp THEN else .)
    UNTIL           reduce using rule 94 (if -> IF exp THEN else .)
    ELSEIF          reduce using rule 94 (if -> IF exp THEN else .)
    ELSE            reduce using rule 94 (if -> IF exp THEN else .)


state 150

    (98) else -> ELSE . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 174
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 151

    (100) struct_for -> FOR NAME ATRIB exp . COMMA exp DO block END
    (101) struct_for -> FOR NAME ATRIB exp . COMMA exp COMMA exp DO block END
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    COMMA           shift and go to state 175
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 152

    (33) list_names -> NAME . COMMA list_names
    (34) list_names -> NAME .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 108
    IN              reduce using rule 34 (list_names -> NAME .)
    ATRIB           reduce using rule 34 (list_names -> NAME .)
    SEMICOLON       reduce using rule 34 (list_names -> NAME .)
    BREAK           reduce using rule 34 (list_names -> NAME .)
    DO              reduce using rule 34 (list_names -> NAME .)
    DUALCOLON       reduce using rule 34 (list_names -> NAME .)
    WHILE           reduce using rule 34 (list_names -> NAME .)
    REPEAT          reduce using rule 34 (list_names -> NAME .)
    IF              reduce using rule 34 (list_names -> NAME .)
    FOR             reduce using rule 34 (list_names -> NAME .)
    LOCAL           reduce using rule 34 (list_names -> NAME .)
    RETURN          reduce using rule 34 (list_names -> NAME .)
    NAME            reduce using rule 34 (list_names -> NAME .)
    LPAREN          reduce using rule 34 (list_names -> NAME .)
    FUNCTION        reduce using rule 34 (list_names -> NAME .)
    $end            reduce using rule 34 (list_names -> NAME .)
    END             reduce using rule 34 (list_names -> NAME .)
    UNTIL           reduce using rule 34 (list_names -> NAME .)
    ELSEIF          reduce using rule 34 (list_names -> NAME .)
    ELSE            reduce using rule 34 (list_names -> NAME .)
    RPAREN          reduce using rule 34 (list_names -> NAME .)

  ! COMMA           [ reduce using rule 34 (list_names -> NAME .) ]


state 153

    (33) list_names -> NAME COMMA list_names .

    IN              reduce using rule 33 (list_names -> NAME COMMA list_names .)
    ATRIB           reduce using rule 33 (list_names -> NAME COMMA list_names .)
    SEMICOLON       reduce using rule 33 (list_names -> NAME COMMA list_names .)
    BREAK           reduce using rule 33 (list_names -> NAME COMMA list_names .)
    DO              reduce using rule 33 (list_names -> NAME COMMA list_names .)
    DUALCOLON       reduce using rule 33 (list_names -> NAME COMMA list_names .)
    WHILE           reduce using rule 33 (list_names -> NAME COMMA list_names .)
    REPEAT          reduce using rule 33 (list_names -> NAME COMMA list_names .)
    IF              reduce using rule 33 (list_names -> NAME COMMA list_names .)
    FOR             reduce using rule 33 (list_names -> NAME COMMA list_names .)
    LOCAL           reduce using rule 33 (list_names -> NAME COMMA list_names .)
    RETURN          reduce using rule 33 (list_names -> NAME COMMA list_names .)
    NAME            reduce using rule 33 (list_names -> NAME COMMA list_names .)
    LPAREN          reduce using rule 33 (list_names -> NAME COMMA list_names .)
    FUNCTION        reduce using rule 33 (list_names -> NAME COMMA list_names .)
    $end            reduce using rule 33 (list_names -> NAME COMMA list_names .)
    END             reduce using rule 33 (list_names -> NAME COMMA list_names .)
    UNTIL           reduce using rule 33 (list_names -> NAME COMMA list_names .)
    ELSEIF          reduce using rule 33 (list_names -> NAME COMMA list_names .)
    ELSE            reduce using rule 33 (list_names -> NAME COMMA list_names .)
    COMMA           reduce using rule 33 (list_names -> NAME COMMA list_names .)
    RPAREN          reduce using rule 33 (list_names -> NAME COMMA list_names .)


state 154

    (102) struct_for_in -> FOR list_names IN list_exps . DO block END

    DO              shift and go to state 176


state 155

    (89) local_var -> LOCAL list_names ATRIB list_exps .

    SEMICOLON       reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    BREAK           reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    DO              reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    DUALCOLON       reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    WHILE           reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    REPEAT          reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    IF              reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    FOR             reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    LOCAL           reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    RETURN          reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    NAME            reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    LPAREN          reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    FUNCTION        reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    $end            reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    END             reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    UNTIL           reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    ELSEIF          reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)
    ELSE            reduce using rule 89 (local_var -> LOCAL list_names ATRIB list_exps .)


state 156

    (91) local_var -> LOCAL NAME ATRIB exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    SEMICOLON       reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    BREAK           reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    DO              reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    DUALCOLON       reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    WHILE           reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    REPEAT          reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    IF              reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    FOR             reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    LOCAL           reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    RETURN          reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    NAME            reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    LPAREN          reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    FUNCTION        reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    $end            reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    END             reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    UNTIL           reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    ELSEIF          reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    ELSE            reduce using rule 91 (local_var -> LOCAL NAME ATRIB exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 157

    (104) local_function -> LOCAL FUNCTION NAME body_function .

    SEMICOLON       reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    BREAK           reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    DO              reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    DUALCOLON       reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    WHILE           reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    REPEAT          reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    IF              reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    FOR             reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    LOCAL           reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    RETURN          reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    NAME            reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    LPAREN          reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    FUNCTION        reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    $end            reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    END             reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    UNTIL           reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    ELSEIF          reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    ELSE            reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    PLUS            reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    MINUS           reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    TIMES           reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    DIVIDE          reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    EXPO            reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    PERCENTUAL      reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    CONCAT          reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    LT              reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    LTEQUALS        reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    GT              reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    GTEQUALS        reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    EQUALS          reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    DIF             reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    AND             reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    OR              reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    THEN            reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    COMMA           reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    RPAREN          reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    RCOLCH          reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)
    RBRACE          reduce using rule 104 (local_function -> LOCAL FUNCTION NAME body_function .)


state 158

    (35) list_exps -> exp COMMA list_exps .

    SEMICOLON       reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    BREAK           reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    DO              reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    DUALCOLON       reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    WHILE           reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    REPEAT          reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    IF              reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    FOR             reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    LOCAL           reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    RETURN          reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    NAME            reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    LPAREN          reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    FUNCTION        reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    $end            reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    END             reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    UNTIL           reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    ELSEIF          reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    ELSE            reduce using rule 35 (list_exps -> exp COMMA list_exps .)
    RPAREN          reduce using rule 35 (list_exps -> exp COMMA list_exps .)


state 159

    (28) var -> prefix_exp LCOLCH exp RCOLCH .

    COMMA           reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    ATRIB           reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LPAREN          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LBRACE          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LCOLCH          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DOT             reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DO              reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    PLUS            reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    MINUS           reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    TIMES           reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DIVIDE          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    EXPO            reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    PERCENTUAL      reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    CONCAT          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LT              reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LTEQUALS        reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    GT              reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    GTEQUALS        reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    EQUALS          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DIF             reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    AND             reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    OR              reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    THEN            reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    SEMICOLON       reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    BREAK           reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DUALCOLON       reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    WHILE           reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    REPEAT          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    IF              reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    FOR             reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LOCAL           reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    RETURN          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    NAME            reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    FUNCTION        reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    $end            reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    END             reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    UNTIL           reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    ELSEIF          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    ELSE            reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    RPAREN          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    RCOLCH          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)
    RBRACE          reduce using rule 28 (var -> prefix_exp LCOLCH exp RCOLCH .)


state 160

    (73) body_function -> LPAREN list_pars . RPAREN block END

    RPAREN          shift and go to state 177


state 161

    (74) list_pars -> list_names .
    (75) list_pars -> list_names . COMMA VARARGS

    RPAREN          reduce using rule 74 (list_pars -> list_names .)
    COMMA           shift and go to state 178


state 162

    (76) list_pars -> VARARGS .

    RPAREN          reduce using rule 76 (list_pars -> VARARGS .)


state 163

    (23) name_function -> NAME DOT NAME .

    LPAREN          reduce using rule 23 (name_function -> NAME DOT NAME .)


state 164

    (24) name_function -> NAME COLON NAME .

    LPAREN          reduce using rule 24 (name_function -> NAME COLON NAME .)


state 165

    (32) prefix_exp -> LPAREN exp RPAREN .
    (66) exp_prefix -> LPAREN exp RPAREN .

    LCOLCH          reduce using rule 32 (prefix_exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 32 (prefix_exp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 66 (exp_prefix -> LPAREN exp RPAREN .)


state 166

    (80) list_fields -> field separator_fields list_fields .

    RBRACE          reduce using rule 80 (list_fields -> field separator_fields list_fields .)


state 167

    (82) list_fields -> field_empty separator_fields list_fields .

    RBRACE          reduce using rule 82 (list_fields -> field_empty separator_fields list_fields .)


state 168

    (85) field -> LCOLCH exp RCOLCH . ATRIB exp
    (83) field_empty -> LCOLCH exp RCOLCH .

    ATRIB           shift and go to state 179
    COMMA           reduce using rule 83 (field_empty -> LCOLCH exp RCOLCH .)
    SEMICOLON       reduce using rule 83 (field_empty -> LCOLCH exp RCOLCH .)
    RBRACE          reduce using rule 83 (field_empty -> LCOLCH exp RCOLCH .)


state 169

    (86) field -> NAME ATRIB exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    COMMA           reduce using rule 86 (field -> NAME ATRIB exp .)
    SEMICOLON       reduce using rule 86 (field -> NAME ATRIB exp .)
    RBRACE          reduce using rule 86 (field -> NAME ATRIB exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 170

    (99) struct_while -> WHILE exp DO block END .

    SEMICOLON       reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    BREAK           reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    DO              reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    DUALCOLON       reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    WHILE           reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    REPEAT          reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    IF              reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    FOR             reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    LOCAL           reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    RETURN          reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    NAME            reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    LPAREN          reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    FUNCTION        reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    $end            reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    END             reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    UNTIL           reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    ELSEIF          reduce using rule 99 (struct_while -> WHILE exp DO block END .)
    ELSE            reduce using rule 99 (struct_while -> WHILE exp DO block END .)


state 171

    (93) if -> IF exp THEN block END .

    SEMICOLON       reduce using rule 93 (if -> IF exp THEN block END .)
    BREAK           reduce using rule 93 (if -> IF exp THEN block END .)
    DO              reduce using rule 93 (if -> IF exp THEN block END .)
    DUALCOLON       reduce using rule 93 (if -> IF exp THEN block END .)
    WHILE           reduce using rule 93 (if -> IF exp THEN block END .)
    REPEAT          reduce using rule 93 (if -> IF exp THEN block END .)
    IF              reduce using rule 93 (if -> IF exp THEN block END .)
    FOR             reduce using rule 93 (if -> IF exp THEN block END .)
    LOCAL           reduce using rule 93 (if -> IF exp THEN block END .)
    RETURN          reduce using rule 93 (if -> IF exp THEN block END .)
    NAME            reduce using rule 93 (if -> IF exp THEN block END .)
    LPAREN          reduce using rule 93 (if -> IF exp THEN block END .)
    FUNCTION        reduce using rule 93 (if -> IF exp THEN block END .)
    $end            reduce using rule 93 (if -> IF exp THEN block END .)
    END             reduce using rule 93 (if -> IF exp THEN block END .)
    UNTIL           reduce using rule 93 (if -> IF exp THEN block END .)
    ELSEIF          reduce using rule 93 (if -> IF exp THEN block END .)
    ELSE            reduce using rule 93 (if -> IF exp THEN block END .)


state 172

    (95) if -> IF exp THEN block else_if . else
    (98) else -> . ELSE block END

    ELSE            shift and go to state 150

    else                           shift and go to state 180

state 173

    (96) else_if -> ELSEIF . exp THEN block
    (97) else_if -> ELSEIF . exp THEN block else_if
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 181
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 174

    (98) else -> ELSE block . END

    END             shift and go to state 182


state 175

    (100) struct_for -> FOR NAME ATRIB exp COMMA . exp DO block END
    (101) struct_for -> FOR NAME ATRIB exp COMMA . exp COMMA exp DO block END
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 183
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 176

    (102) struct_for_in -> FOR list_names IN list_exps DO . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 184
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 177

    (73) body_function -> LPAREN list_pars RPAREN . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 185
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 178

    (75) list_pars -> list_names COMMA . VARARGS

    VARARGS         shift and go to state 186


state 179

    (85) field -> LCOLCH exp RCOLCH ATRIB . exp
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 187
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 180

    (95) if -> IF exp THEN block else_if else .

    SEMICOLON       reduce using rule 95 (if -> IF exp THEN block else_if else .)
    BREAK           reduce using rule 95 (if -> IF exp THEN block else_if else .)
    DO              reduce using rule 95 (if -> IF exp THEN block else_if else .)
    DUALCOLON       reduce using rule 95 (if -> IF exp THEN block else_if else .)
    WHILE           reduce using rule 95 (if -> IF exp THEN block else_if else .)
    REPEAT          reduce using rule 95 (if -> IF exp THEN block else_if else .)
    IF              reduce using rule 95 (if -> IF exp THEN block else_if else .)
    FOR             reduce using rule 95 (if -> IF exp THEN block else_if else .)
    LOCAL           reduce using rule 95 (if -> IF exp THEN block else_if else .)
    RETURN          reduce using rule 95 (if -> IF exp THEN block else_if else .)
    NAME            reduce using rule 95 (if -> IF exp THEN block else_if else .)
    LPAREN          reduce using rule 95 (if -> IF exp THEN block else_if else .)
    FUNCTION        reduce using rule 95 (if -> IF exp THEN block else_if else .)
    $end            reduce using rule 95 (if -> IF exp THEN block else_if else .)
    END             reduce using rule 95 (if -> IF exp THEN block else_if else .)
    UNTIL           reduce using rule 95 (if -> IF exp THEN block else_if else .)
    ELSEIF          reduce using rule 95 (if -> IF exp THEN block else_if else .)
    ELSE            reduce using rule 95 (if -> IF exp THEN block else_if else .)


state 181

    (96) else_if -> ELSEIF exp . THEN block
    (97) else_if -> ELSEIF exp . THEN block else_if
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    THEN            shift and go to state 188
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 182

    (98) else -> ELSE block END .

    SEMICOLON       reduce using rule 98 (else -> ELSE block END .)
    BREAK           reduce using rule 98 (else -> ELSE block END .)
    DO              reduce using rule 98 (else -> ELSE block END .)
    DUALCOLON       reduce using rule 98 (else -> ELSE block END .)
    WHILE           reduce using rule 98 (else -> ELSE block END .)
    REPEAT          reduce using rule 98 (else -> ELSE block END .)
    IF              reduce using rule 98 (else -> ELSE block END .)
    FOR             reduce using rule 98 (else -> ELSE block END .)
    LOCAL           reduce using rule 98 (else -> ELSE block END .)
    RETURN          reduce using rule 98 (else -> ELSE block END .)
    NAME            reduce using rule 98 (else -> ELSE block END .)
    LPAREN          reduce using rule 98 (else -> ELSE block END .)
    FUNCTION        reduce using rule 98 (else -> ELSE block END .)
    $end            reduce using rule 98 (else -> ELSE block END .)
    END             reduce using rule 98 (else -> ELSE block END .)
    UNTIL           reduce using rule 98 (else -> ELSE block END .)
    ELSEIF          reduce using rule 98 (else -> ELSE block END .)
    ELSE            reduce using rule 98 (else -> ELSE block END .)


state 183

    (100) struct_for -> FOR NAME ATRIB exp COMMA exp . DO block END
    (101) struct_for -> FOR NAME ATRIB exp COMMA exp . COMMA exp DO block END
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              shift and go to state 190
    COMMA           shift and go to state 189
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 184

    (102) struct_for_in -> FOR list_names IN list_exps DO block . END

    END             shift and go to state 191


state 185

    (73) body_function -> LPAREN list_pars RPAREN block . END

    END             shift and go to state 192


state 186

    (75) list_pars -> list_names COMMA VARARGS .

    RPAREN          reduce using rule 75 (list_pars -> list_names COMMA VARARGS .)


state 187

    (85) field -> LCOLCH exp RCOLCH ATRIB exp .
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    COMMA           reduce using rule 85 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    SEMICOLON       reduce using rule 85 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    RBRACE          reduce using rule 85 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 188

    (96) else_if -> ELSEIF exp THEN . block
    (97) else_if -> ELSEIF exp THEN . block else_if
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 193
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 189

    (101) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA . exp DO block END
    (37) exp -> . var
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . TAG exp
    (48) exp -> . MINUS exp
    (49) exp -> . NOT exp
    (50) exp -> . exp PLUS exp
    (51) exp -> . exp MINUS exp
    (52) exp -> . exp TIMES exp
    (53) exp -> . exp DIVIDE exp
    (54) exp -> . exp EXPO exp
    (55) exp -> . exp PERCENTUAL exp
    (56) exp -> . exp CONCAT exp
    (57) exp -> . exp LT exp
    (58) exp -> . exp LTEQUALS exp
    (59) exp -> . exp GT exp
    (60) exp -> . exp GTEQUALS exp
    (61) exp -> . exp EQUALS exp
    (62) exp -> . exp DIF exp
    (63) exp -> . exp AND exp
    (64) exp -> . exp OR exp
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (71) def_function -> . function
    (72) def_function -> . local_function
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (77) construct_table -> . LBRACE list_fields RBRACE
    (78) construct_table -> . LBRACE RBRACE
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (67) call_function -> . exp_prefix args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    TAG             shift and go to state 53
    MINUS           shift and go to state 54
    NOT             shift and go to state 55
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    LBRACE          shift and go to state 40
    FUNCTION        shift and go to state 32
    LOCAL           shift and go to state 57

    exp                            shift and go to state 194
    var                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    prefix_exp                     shift and go to state 30
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    call_function                  shift and go to state 56

state 190

    (100) struct_for -> FOR NAME ATRIB exp COMMA exp DO . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 195
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 191

    (102) struct_for_in -> FOR list_names IN list_exps DO block END .

    SEMICOLON       reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    BREAK           reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    DO              reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    DUALCOLON       reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    WHILE           reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    REPEAT          reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    IF              reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    FOR             reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    LOCAL           reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    RETURN          reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    NAME            reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    LPAREN          reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    FUNCTION        reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    $end            reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    END             reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    UNTIL           reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    ELSEIF          reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    ELSE            reduce using rule 102 (struct_for_in -> FOR list_names IN list_exps DO block END .)


state 192

    (73) body_function -> LPAREN list_pars RPAREN block END .

    SEMICOLON       reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    BREAK           reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    DO              reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    DUALCOLON       reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    WHILE           reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    REPEAT          reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    IF              reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    FOR             reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    LOCAL           reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    RETURN          reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    NAME            reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    LPAREN          reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    FUNCTION        reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    $end            reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    END             reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    UNTIL           reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    ELSEIF          reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    ELSE            reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    PLUS            reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    MINUS           reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    TIMES           reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    DIVIDE          reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    EXPO            reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    PERCENTUAL      reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    CONCAT          reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    LT              reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    LTEQUALS        reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    GT              reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    GTEQUALS        reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    EQUALS          reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    DIF             reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    AND             reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    OR              reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    THEN            reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    COMMA           reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    RPAREN          reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    RCOLCH          reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)
    RBRACE          reduce using rule 73 (body_function -> LPAREN list_pars RPAREN block END .)


state 193

    (96) else_if -> ELSEIF exp THEN block .
    (97) else_if -> ELSEIF exp THEN block . else_if
    (96) else_if -> . ELSEIF exp THEN block
    (97) else_if -> . ELSEIF exp THEN block else_if

    ELSE            reduce using rule 96 (else_if -> ELSEIF exp THEN block .)
    ELSEIF          shift and go to state 173

    else_if                        shift and go to state 196

state 194

    (101) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp . DO block END
    (50) exp -> exp . PLUS exp
    (51) exp -> exp . MINUS exp
    (52) exp -> exp . TIMES exp
    (53) exp -> exp . DIVIDE exp
    (54) exp -> exp . EXPO exp
    (55) exp -> exp . PERCENTUAL exp
    (56) exp -> exp . CONCAT exp
    (57) exp -> exp . LT exp
    (58) exp -> exp . LTEQUALS exp
    (59) exp -> exp . GT exp
    (60) exp -> exp . GTEQUALS exp
    (61) exp -> exp . EQUALS exp
    (62) exp -> exp . DIF exp
    (63) exp -> exp . AND exp
    (64) exp -> exp . OR exp

    DO              shift and go to state 197
    PLUS            shift and go to state 87
    MINUS           shift and go to state 88
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90
    EXPO            shift and go to state 91
    PERCENTUAL      shift and go to state 92
    CONCAT          shift and go to state 93
    LT              shift and go to state 94
    LTEQUALS        shift and go to state 95
    GT              shift and go to state 96
    GTEQUALS        shift and go to state 97
    EQUALS          shift and go to state 98
    DIF             shift and go to state 99
    AND             shift and go to state 100
    OR              shift and go to state 101


state 195

    (100) struct_for -> FOR NAME ATRIB exp COMMA exp DO block . END

    END             shift and go to state 198


state 196

    (97) else_if -> ELSEIF exp THEN block else_if .

    ELSE            reduce using rule 97 (else_if -> ELSEIF exp THEN block else_if .)


state 197

    (101) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO . block END
    (2) block -> . command
    (3) block -> . command block
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (17) command -> . command_ret
    (25) list_vars -> . var
    (26) list_vars -> . var COMMA list_vars
    (67) call_function -> . exp_prefix args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (99) struct_while -> . WHILE exp DO block END
    (103) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (95) if -> . IF exp THEN block else_if else
    (100) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (101) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (102) struct_for_in -> . FOR list_names IN list_exps DO block END
    (71) def_function -> . function
    (72) def_function -> . local_function
    (89) local_var -> . LOCAL list_names ATRIB list_exps
    (90) local_var -> . LOCAL list_names
    (91) local_var -> . LOCAL NAME ATRIB exp
    (18) command_ret -> . RETURN
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (27) var -> . NAME
    (28) var -> . prefix_exp LCOLCH exp RCOLCH
    (29) var -> . prefix_exp DOT NAME
    (65) exp_prefix -> . var
    (66) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION name_function body_function
    (104) local_function -> . LOCAL FUNCTION NAME body_function
    (30) prefix_exp -> . var
    (31) prefix_exp -> . call_function
    (32) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    LOCAL           shift and go to state 28
    RETURN          shift and go to state 29
    NAME            shift and go to state 21
    LPAREN          shift and go to state 31
    FUNCTION        shift and go to state 32

    block                          shift and go to state 199
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    exp_prefix                     shift and go to state 19
    function                       shift and go to state 26
    local_function                 shift and go to state 27
    prefix_exp                     shift and go to state 30

state 198

    (100) struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .

    SEMICOLON       reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    BREAK           reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    DO              reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    DUALCOLON       reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    WHILE           reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    REPEAT          reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    IF              reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    FOR             reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    LOCAL           reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    RETURN          reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    NAME            reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    LPAREN          reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    FUNCTION        reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    $end            reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    END             reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    UNTIL           reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    ELSEIF          reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    ELSE            reduce using rule 100 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)


state 199

    (101) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block . END

    END             shift and go to state 200


state 200

    (101) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .

    SEMICOLON       reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    BREAK           reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    DO              reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    DUALCOLON       reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    WHILE           reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    REPEAT          reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    IF              reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    FOR             reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    LOCAL           reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    RETURN          reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    NAME            reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    LPAREN          reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    FUNCTION        reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    $end            reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    END             reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    UNTIL           reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    ELSEIF          reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    ELSE            reduce using rule 101 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NAME in state 29 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 29 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 29 resolved as shift
WARNING: shift/reduce conflict for LOCAL in state 29 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 51 resolved as shift
WARNING: shift/reduce conflict for ATRIB in state 63 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 65 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 152 resolved as shift
WARNING: reduce/reduce conflict in state 43 resolved using rule (exp -> var)
WARNING: rejected rule (exp_prefix -> var) in state 43
