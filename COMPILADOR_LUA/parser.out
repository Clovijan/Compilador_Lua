Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELSEIF

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     block -> command
Rule 3     block -> command command_ret
Rule 4     command -> SEMICOLON
Rule 5     command -> list_vars ATRIB list_exps
Rule 6     command -> call_function
Rule 7     command -> rotulo
Rule 8     command -> BREAK
Rule 9     command -> DO block END
Rule 10    command -> struct_while
Rule 11    command -> struct_repeat
Rule 12    command -> if
Rule 13    command -> struct_for
Rule 14    command -> struct_for_in
Rule 15    command -> def_function
Rule 16    command -> local_var
Rule 17    list_command -> command list_command
Rule 18    list_command -> command
Rule 19    command_ret -> RETURN
Rule 20    command_ret -> RETURN list_exps
Rule 21    command_ret -> RETURN list_exps SEMICOLON
Rule 22    rotulo -> DUALCOLON NAME DUALCOLON
Rule 23    name_function -> NAME
Rule 24    name_function -> NAME DOT NAME
Rule 25    name_function -> NAME COLON NAME
Rule 26    list_vars -> var
Rule 27    list_vars -> var COMMA list_vars
Rule 28    var -> NAME
Rule 29    var -> prefix_exp LCOLCH exp RCOLCH
Rule 30    var -> prefix_exp DOT NAME
Rule 31    prefix_exp -> var
Rule 32    prefix_exp -> call_function
Rule 33    prefix_exp -> LPAREN exp RPAREN
Rule 34    list_names -> NAME COMMA list_names
Rule 35    list_names -> NAME
Rule 36    list_exps -> exp COMMA list_exps
Rule 37    list_exps -> exp
Rule 38    exp -> NIL
Rule 39    exp -> FALSE
Rule 40    exp -> TRUE
Rule 41    exp -> NUMBER
Rule 42    exp -> STRING
Rule 43    exp -> VARARGS
Rule 44    exp -> def_function
Rule 45    exp -> exp_prefix
Rule 46    exp -> construct_table
Rule 47    exp -> exp op_unary exp
Rule 48    exp -> exp PLUS exp
Rule 49    exp -> exp MINUS exp
Rule 50    exp -> exp TIMES exp
Rule 51    exp -> exp DIVIDE exp
Rule 52    exp -> exp EXPO exp
Rule 53    exp -> exp PERCENTUAL exp
Rule 54    exp -> exp CONCAT exp
Rule 55    exp -> exp LT exp
Rule 56    exp -> exp LTEQUALS exp
Rule 57    exp -> exp GT exp
Rule 58    exp -> exp GTEQUALS exp
Rule 59    exp -> exp EQUALS exp
Rule 60    exp -> exp DIF exp
Rule 61    exp -> exp AND exp
Rule 62    exp -> exp OR exp
Rule 63    exp_prefix -> VAR
Rule 64    exp_prefix -> call_function
Rule 65    exp_prefix -> LPAREN exp RPAREN
Rule 66    call_function -> exp_prefix args
Rule 67    call_function -> exp_prefix COLON NAME args
Rule 68    args -> LPAREN list_exps RPAREN
Rule 69    args -> construct_table
Rule 70    def_function -> function
Rule 71    def_function -> local_function
Rule 72    body_function -> LPAREN list_pars RPAREN block END
Rule 73    list_pars -> list_names COMMA VARARGS
Rule 74    list_pars -> VARARGS
Rule 75    construct_table -> LBRACE list_fields RBRACE
Rule 76    construct_table -> LBRACE RBRACE
Rule 77    list_fields -> field
Rule 78    list_fields -> field separator_fields list_fields
Rule 79    list_fields -> field_empty
Rule 80    list_fields -> field_empty separator_fields list_fields
Rule 81    field_empty -> LCOLCH exp RCOLCH
Rule 82    field_empty -> NAME
Rule 83    field -> LCOLCH exp RCOLCH ATRIB exp
Rule 84    field -> NAME ATRIB exp
Rule 85    separator_fields -> COMMA
Rule 86    separator_fields -> SEMICOLON
Rule 87    local_var -> LOCAL list_names ATRIB list_exps
Rule 88    local_var -> LOCAL NAME ATRIB exp
Rule 89    op_unary -> MINUS
Rule 90    op_unary -> NOT
Rule 91    op_unary -> TAG
Rule 92    function -> FUNCTION body_function
Rule 93    if -> IF exp THEN block END
Rule 94    if -> IF exp THEN else
Rule 95    else -> ELSE block END
Rule 96    struct_while -> WHILE exp DO block END
Rule 97    struct_for -> FOR NAME ATRIB exp COMMA exp DO block END
Rule 98    struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
Rule 99    struct_for_in -> FOR list_names IN list_exps DO block END
Rule 100   struct_repeat -> REPEAT block UNTIL exp
Rule 101   local_function -> LOCAL FUNCTION name_function body_function

Terminals, with rules where they appear

AND                  : 61
ATRIB                : 5 83 84 87 88 97 98
BREAK                : 8
COLON                : 25 67
COMMA                : 27 34 36 73 85 97 98 98
CONCAT               : 54
DIF                  : 60
DIVIDE               : 51
DO                   : 9 96 97 98 99
DOT                  : 24 30
DUALCOLON            : 22 22
ELSE                 : 95
ELSEIF               : 
END                  : 9 72 93 95 96 97 98 99
EQUALS               : 59
EXPO                 : 52
FALSE                : 39
FOR                  : 97 98 99
FUNCTION             : 92 101
GT                   : 57
GTEQUALS             : 58
IF                   : 93 94
IN                   : 99
LBRACE               : 75 76
LCOLCH               : 29 81 83
LOCAL                : 87 88 101
LPAREN               : 33 65 68 72
LT                   : 55
LTEQUALS             : 56
MINUS                : 49 89
NAME                 : 22 23 24 24 25 25 28 30 34 35 67 82 84 88 97 98
NIL                  : 38
NOT                  : 90
NUMBER               : 41
OR                   : 62
PERCENTUAL           : 53
PLUS                 : 48
RBRACE               : 75 76
RCOLCH               : 29 81 83
REPEAT               : 100
RETURN               : 19 20 21
RPAREN               : 33 65 68 72
SEMICOLON            : 4 21 86
STRING               : 42
TAG                  : 91
THEN                 : 93 94
TIMES                : 50
TRUE                 : 40
UNTIL                : 100
VAR                  : 63
VARARGS              : 43 73 74
WHILE                : 96
error                : 

Nonterminals, with rules where they appear

args                 : 66 67
block                : 1 9 72 93 95 96 97 98 99 100
body_function        : 92 101
call_function        : 6 32 64
command              : 2 3 17 18
command_ret          : 3
construct_table      : 46 69
def_function         : 15 44
else                 : 94
exp                  : 29 33 36 37 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 65 81 83 83 84 88 93 94 96 97 97 98 98 98 100
exp_prefix           : 45 66 67
field                : 77 78
field_empty          : 79 80
function             : 70
if                   : 12
list_command         : 17
list_exps            : 5 20 21 36 68 87 99
list_fields          : 75 78 80
list_names           : 34 73 87 99
list_pars            : 72
list_vars            : 5 27
local_function       : 71
local_var            : 16
name_function        : 101
op_unary             : 47
prefix_exp           : 29 30
program              : 0
rotulo               : 7
separator_fields     : 78 80
struct_for           : 13
struct_for_in        : 14
struct_repeat        : 11
struct_while         : 10
var                  : 26 27 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (70) def_function -> . function
    (71) def_function -> . local_function
    (87) local_var -> . LOCAL list_names ATRIB list_exps
    (88) local_var -> . LOCAL NAME ATRIB exp
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 21
    REPEAT          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    LOCAL           shift and go to state 27
    NAME            shift and go to state 19
    VAR             shift and go to state 29
    LPAREN          shift and go to state 30
    FUNCTION        shift and go to state 31

    program                        shift and go to state 1
    block                          shift and go to state 2
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    var                            shift and go to state 17
    exp_prefix                     shift and go to state 18
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    prefix_exp                     shift and go to state 28

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> command .
    (3) block -> command . command_ret
    (19) command_ret -> . RETURN
    (20) command_ret -> . RETURN list_exps
    (21) command_ret -> . RETURN list_exps SEMICOLON

    $end            reduce using rule 2 (block -> command .)
    END             reduce using rule 2 (block -> command .)
    UNTIL           reduce using rule 2 (block -> command .)
    RETURN          shift and go to state 33

    command_ret                    shift and go to state 32

state 4

    (4) command -> SEMICOLON .

    RETURN          reduce using rule 4 (command -> SEMICOLON .)
    $end            reduce using rule 4 (command -> SEMICOLON .)
    END             reduce using rule 4 (command -> SEMICOLON .)
    UNTIL           reduce using rule 4 (command -> SEMICOLON .)


state 5

    (5) command -> list_vars . ATRIB list_exps

    ATRIB           shift and go to state 34


state 6

    (6) command -> call_function .
    (64) exp_prefix -> call_function .
    (32) prefix_exp -> call_function .

    RETURN          reduce using rule 6 (command -> call_function .)
    $end            reduce using rule 6 (command -> call_function .)
    END             reduce using rule 6 (command -> call_function .)
    UNTIL           reduce using rule 6 (command -> call_function .)
    COLON           reduce using rule 64 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 64 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 64 (exp_prefix -> call_function .)
    LCOLCH          reduce using rule 32 (prefix_exp -> call_function .)
    DOT             reduce using rule 32 (prefix_exp -> call_function .)


state 7

    (7) command -> rotulo .

    RETURN          reduce using rule 7 (command -> rotulo .)
    $end            reduce using rule 7 (command -> rotulo .)
    END             reduce using rule 7 (command -> rotulo .)
    UNTIL           reduce using rule 7 (command -> rotulo .)


state 8

    (8) command -> BREAK .

    RETURN          reduce using rule 8 (command -> BREAK .)
    $end            reduce using rule 8 (command -> BREAK .)
    END             reduce using rule 8 (command -> BREAK .)
    UNTIL           reduce using rule 8 (command -> BREAK .)


state 9

    (9) command -> DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (70) def_function -> . function
    (71) def_function -> . local_function
    (87) local_var -> . LOCAL list_names ATRIB list_exps
    (88) local_var -> . LOCAL NAME ATRIB exp
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 21
    REPEAT          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    LOCAL           shift and go to state 27
    NAME            shift and go to state 19
    VAR             shift and go to state 29
    LPAREN          shift and go to state 30
    FUNCTION        shift and go to state 31

    block                          shift and go to state 35
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    var                            shift and go to state 17
    exp_prefix                     shift and go to state 18
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    prefix_exp                     shift and go to state 28

state 10

    (10) command -> struct_while .

    RETURN          reduce using rule 10 (command -> struct_while .)
    $end            reduce using rule 10 (command -> struct_while .)
    END             reduce using rule 10 (command -> struct_while .)
    UNTIL           reduce using rule 10 (command -> struct_while .)


state 11

    (11) command -> struct_repeat .

    RETURN          reduce using rule 11 (command -> struct_repeat .)
    $end            reduce using rule 11 (command -> struct_repeat .)
    END             reduce using rule 11 (command -> struct_repeat .)
    UNTIL           reduce using rule 11 (command -> struct_repeat .)


state 12

    (12) command -> if .

    RETURN          reduce using rule 12 (command -> if .)
    $end            reduce using rule 12 (command -> if .)
    END             reduce using rule 12 (command -> if .)
    UNTIL           reduce using rule 12 (command -> if .)


state 13

    (13) command -> struct_for .

    RETURN          reduce using rule 13 (command -> struct_for .)
    $end            reduce using rule 13 (command -> struct_for .)
    END             reduce using rule 13 (command -> struct_for .)
    UNTIL           reduce using rule 13 (command -> struct_for .)


state 14

    (14) command -> struct_for_in .

    RETURN          reduce using rule 14 (command -> struct_for_in .)
    $end            reduce using rule 14 (command -> struct_for_in .)
    END             reduce using rule 14 (command -> struct_for_in .)
    UNTIL           reduce using rule 14 (command -> struct_for_in .)


state 15

    (15) command -> def_function .

    RETURN          reduce using rule 15 (command -> def_function .)
    $end            reduce using rule 15 (command -> def_function .)
    END             reduce using rule 15 (command -> def_function .)
    UNTIL           reduce using rule 15 (command -> def_function .)


state 16

    (16) command -> local_var .

    RETURN          reduce using rule 16 (command -> local_var .)
    $end            reduce using rule 16 (command -> local_var .)
    END             reduce using rule 16 (command -> local_var .)
    UNTIL           reduce using rule 16 (command -> local_var .)


state 17

    (26) list_vars -> var .
    (27) list_vars -> var . COMMA list_vars
    (31) prefix_exp -> var .

    ATRIB           reduce using rule 26 (list_vars -> var .)
    COMMA           shift and go to state 36
    LCOLCH          reduce using rule 31 (prefix_exp -> var .)
    DOT             reduce using rule 31 (prefix_exp -> var .)


state 18

    (66) call_function -> exp_prefix . args
    (67) call_function -> exp_prefix . COLON NAME args
    (68) args -> . LPAREN list_exps RPAREN
    (69) args -> . construct_table
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE

    COLON           shift and go to state 38
    LPAREN          shift and go to state 39
    LBRACE          shift and go to state 41

    args                           shift and go to state 37
    construct_table                shift and go to state 40

state 19

    (28) var -> NAME .

    COMMA           reduce using rule 28 (var -> NAME .)
    ATRIB           reduce using rule 28 (var -> NAME .)
    LCOLCH          reduce using rule 28 (var -> NAME .)
    DOT             reduce using rule 28 (var -> NAME .)


state 20

    (22) rotulo -> DUALCOLON . NAME DUALCOLON

    NAME            shift and go to state 42


state 21

    (96) struct_while -> WHILE . exp DO block END
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 43
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 22

    (100) struct_repeat -> REPEAT . block UNTIL exp
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (70) def_function -> . function
    (71) def_function -> . local_function
    (87) local_var -> . LOCAL list_names ATRIB list_exps
    (88) local_var -> . LOCAL NAME ATRIB exp
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 21
    REPEAT          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    LOCAL           shift and go to state 27
    NAME            shift and go to state 19
    VAR             shift and go to state 29
    LPAREN          shift and go to state 30
    FUNCTION        shift and go to state 31

    block                          shift and go to state 56
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    var                            shift and go to state 17
    exp_prefix                     shift and go to state 18
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    prefix_exp                     shift and go to state 28

state 23

    (93) if -> IF . exp THEN block END
    (94) if -> IF . exp THEN else
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 57
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 24

    (97) struct_for -> FOR . NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> FOR . NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> FOR . list_names IN list_exps DO block END
    (34) list_names -> . NAME COMMA list_names
    (35) list_names -> . NAME

    NAME            shift and go to state 58

    list_names                     shift and go to state 59

state 25

    (70) def_function -> function .

    RETURN          reduce using rule 70 (def_function -> function .)
    $end            reduce using rule 70 (def_function -> function .)
    END             reduce using rule 70 (def_function -> function .)
    DO              reduce using rule 70 (def_function -> function .)
    PLUS            reduce using rule 70 (def_function -> function .)
    MINUS           reduce using rule 70 (def_function -> function .)
    TIMES           reduce using rule 70 (def_function -> function .)
    DIVIDE          reduce using rule 70 (def_function -> function .)
    EXPO            reduce using rule 70 (def_function -> function .)
    PERCENTUAL      reduce using rule 70 (def_function -> function .)
    CONCAT          reduce using rule 70 (def_function -> function .)
    LT              reduce using rule 70 (def_function -> function .)
    LTEQUALS        reduce using rule 70 (def_function -> function .)
    GT              reduce using rule 70 (def_function -> function .)
    GTEQUALS        reduce using rule 70 (def_function -> function .)
    EQUALS          reduce using rule 70 (def_function -> function .)
    DIF             reduce using rule 70 (def_function -> function .)
    AND             reduce using rule 70 (def_function -> function .)
    OR              reduce using rule 70 (def_function -> function .)
    NOT             reduce using rule 70 (def_function -> function .)
    TAG             reduce using rule 70 (def_function -> function .)
    UNTIL           reduce using rule 70 (def_function -> function .)
    THEN            reduce using rule 70 (def_function -> function .)
    RPAREN          reduce using rule 70 (def_function -> function .)
    COMMA           reduce using rule 70 (def_function -> function .)
    SEMICOLON       reduce using rule 70 (def_function -> function .)
    RCOLCH          reduce using rule 70 (def_function -> function .)
    RBRACE          reduce using rule 70 (def_function -> function .)


state 26

    (71) def_function -> local_function .

    RETURN          reduce using rule 71 (def_function -> local_function .)
    $end            reduce using rule 71 (def_function -> local_function .)
    END             reduce using rule 71 (def_function -> local_function .)
    DO              reduce using rule 71 (def_function -> local_function .)
    PLUS            reduce using rule 71 (def_function -> local_function .)
    MINUS           reduce using rule 71 (def_function -> local_function .)
    TIMES           reduce using rule 71 (def_function -> local_function .)
    DIVIDE          reduce using rule 71 (def_function -> local_function .)
    EXPO            reduce using rule 71 (def_function -> local_function .)
    PERCENTUAL      reduce using rule 71 (def_function -> local_function .)
    CONCAT          reduce using rule 71 (def_function -> local_function .)
    LT              reduce using rule 71 (def_function -> local_function .)
    LTEQUALS        reduce using rule 71 (def_function -> local_function .)
    GT              reduce using rule 71 (def_function -> local_function .)
    GTEQUALS        reduce using rule 71 (def_function -> local_function .)
    EQUALS          reduce using rule 71 (def_function -> local_function .)
    DIF             reduce using rule 71 (def_function -> local_function .)
    AND             reduce using rule 71 (def_function -> local_function .)
    OR              reduce using rule 71 (def_function -> local_function .)
    NOT             reduce using rule 71 (def_function -> local_function .)
    TAG             reduce using rule 71 (def_function -> local_function .)
    UNTIL           reduce using rule 71 (def_function -> local_function .)
    THEN            reduce using rule 71 (def_function -> local_function .)
    RPAREN          reduce using rule 71 (def_function -> local_function .)
    COMMA           reduce using rule 71 (def_function -> local_function .)
    SEMICOLON       reduce using rule 71 (def_function -> local_function .)
    RCOLCH          reduce using rule 71 (def_function -> local_function .)
    RBRACE          reduce using rule 71 (def_function -> local_function .)


state 27

    (87) local_var -> LOCAL . list_names ATRIB list_exps
    (88) local_var -> LOCAL . NAME ATRIB exp
    (101) local_function -> LOCAL . FUNCTION name_function body_function
    (34) list_names -> . NAME COMMA list_names
    (35) list_names -> . NAME

    NAME            shift and go to state 61
    FUNCTION        shift and go to state 62

    list_names                     shift and go to state 60

state 28

    (29) var -> prefix_exp . LCOLCH exp RCOLCH
    (30) var -> prefix_exp . DOT NAME

    LCOLCH          shift and go to state 63
    DOT             shift and go to state 64


state 29

    (63) exp_prefix -> VAR .

    COLON           reduce using rule 63 (exp_prefix -> VAR .)
    LPAREN          reduce using rule 63 (exp_prefix -> VAR .)
    LBRACE          reduce using rule 63 (exp_prefix -> VAR .)
    DO              reduce using rule 63 (exp_prefix -> VAR .)
    PLUS            reduce using rule 63 (exp_prefix -> VAR .)
    MINUS           reduce using rule 63 (exp_prefix -> VAR .)
    TIMES           reduce using rule 63 (exp_prefix -> VAR .)
    DIVIDE          reduce using rule 63 (exp_prefix -> VAR .)
    EXPO            reduce using rule 63 (exp_prefix -> VAR .)
    PERCENTUAL      reduce using rule 63 (exp_prefix -> VAR .)
    CONCAT          reduce using rule 63 (exp_prefix -> VAR .)
    LT              reduce using rule 63 (exp_prefix -> VAR .)
    LTEQUALS        reduce using rule 63 (exp_prefix -> VAR .)
    GT              reduce using rule 63 (exp_prefix -> VAR .)
    GTEQUALS        reduce using rule 63 (exp_prefix -> VAR .)
    EQUALS          reduce using rule 63 (exp_prefix -> VAR .)
    DIF             reduce using rule 63 (exp_prefix -> VAR .)
    AND             reduce using rule 63 (exp_prefix -> VAR .)
    OR              reduce using rule 63 (exp_prefix -> VAR .)
    NOT             reduce using rule 63 (exp_prefix -> VAR .)
    TAG             reduce using rule 63 (exp_prefix -> VAR .)
    THEN            reduce using rule 63 (exp_prefix -> VAR .)
    RPAREN          reduce using rule 63 (exp_prefix -> VAR .)
    COMMA           reduce using rule 63 (exp_prefix -> VAR .)
    SEMICOLON       reduce using rule 63 (exp_prefix -> VAR .)
    $end            reduce using rule 63 (exp_prefix -> VAR .)
    END             reduce using rule 63 (exp_prefix -> VAR .)
    UNTIL           reduce using rule 63 (exp_prefix -> VAR .)
    RETURN          reduce using rule 63 (exp_prefix -> VAR .)
    RCOLCH          reduce using rule 63 (exp_prefix -> VAR .)
    RBRACE          reduce using rule 63 (exp_prefix -> VAR .)


state 30

    (65) exp_prefix -> LPAREN . exp RPAREN
    (33) prefix_exp -> LPAREN . exp RPAREN
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 65
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 31

    (92) function -> FUNCTION . body_function
    (72) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 67

    body_function                  shift and go to state 66

state 32

    (3) block -> command command_ret .

    $end            reduce using rule 3 (block -> command command_ret .)
    END             reduce using rule 3 (block -> command command_ret .)
    UNTIL           reduce using rule 3 (block -> command command_ret .)


state 33

    (19) command_ret -> RETURN .
    (20) command_ret -> RETURN . list_exps
    (21) command_ret -> RETURN . list_exps SEMICOLON
    (36) list_exps -> . exp COMMA list_exps
    (37) list_exps -> . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    $end            reduce using rule 19 (command_ret -> RETURN .)
    END             reduce using rule 19 (command_ret -> RETURN .)
    UNTIL           reduce using rule 19 (command_ret -> RETURN .)
    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    list_exps                      shift and go to state 68
    exp                            shift and go to state 69
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 34

    (5) command -> list_vars ATRIB . list_exps
    (36) list_exps -> . exp COMMA list_exps
    (37) list_exps -> . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    list_exps                      shift and go to state 70
    exp                            shift and go to state 69
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 35

    (9) command -> DO block . END

    END             shift and go to state 71


state 36

    (27) list_vars -> var COMMA . list_vars
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN

    NAME            shift and go to state 19
    LPAREN          shift and go to state 74
    VAR             shift and go to state 29

    var                            shift and go to state 17
    list_vars                      shift and go to state 72
    prefix_exp                     shift and go to state 28
    call_function                  shift and go to state 73
    exp_prefix                     shift and go to state 18

state 37

    (66) call_function -> exp_prefix args .

    RETURN          reduce using rule 66 (call_function -> exp_prefix args .)
    $end            reduce using rule 66 (call_function -> exp_prefix args .)
    COLON           reduce using rule 66 (call_function -> exp_prefix args .)
    LPAREN          reduce using rule 66 (call_function -> exp_prefix args .)
    LBRACE          reduce using rule 66 (call_function -> exp_prefix args .)
    LCOLCH          reduce using rule 66 (call_function -> exp_prefix args .)
    DOT             reduce using rule 66 (call_function -> exp_prefix args .)
    END             reduce using rule 66 (call_function -> exp_prefix args .)
    DO              reduce using rule 66 (call_function -> exp_prefix args .)
    PLUS            reduce using rule 66 (call_function -> exp_prefix args .)
    MINUS           reduce using rule 66 (call_function -> exp_prefix args .)
    TIMES           reduce using rule 66 (call_function -> exp_prefix args .)
    DIVIDE          reduce using rule 66 (call_function -> exp_prefix args .)
    EXPO            reduce using rule 66 (call_function -> exp_prefix args .)
    PERCENTUAL      reduce using rule 66 (call_function -> exp_prefix args .)
    CONCAT          reduce using rule 66 (call_function -> exp_prefix args .)
    LT              reduce using rule 66 (call_function -> exp_prefix args .)
    LTEQUALS        reduce using rule 66 (call_function -> exp_prefix args .)
    GT              reduce using rule 66 (call_function -> exp_prefix args .)
    GTEQUALS        reduce using rule 66 (call_function -> exp_prefix args .)
    EQUALS          reduce using rule 66 (call_function -> exp_prefix args .)
    DIF             reduce using rule 66 (call_function -> exp_prefix args .)
    AND             reduce using rule 66 (call_function -> exp_prefix args .)
    OR              reduce using rule 66 (call_function -> exp_prefix args .)
    NOT             reduce using rule 66 (call_function -> exp_prefix args .)
    TAG             reduce using rule 66 (call_function -> exp_prefix args .)
    UNTIL           reduce using rule 66 (call_function -> exp_prefix args .)
    THEN            reduce using rule 66 (call_function -> exp_prefix args .)
    RPAREN          reduce using rule 66 (call_function -> exp_prefix args .)
    COMMA           reduce using rule 66 (call_function -> exp_prefix args .)
    SEMICOLON       reduce using rule 66 (call_function -> exp_prefix args .)
    RCOLCH          reduce using rule 66 (call_function -> exp_prefix args .)
    RBRACE          reduce using rule 66 (call_function -> exp_prefix args .)


state 38

    (67) call_function -> exp_prefix COLON . NAME args

    NAME            shift and go to state 75


state 39

    (68) args -> LPAREN . list_exps RPAREN
    (36) list_exps -> . exp COMMA list_exps
    (37) list_exps -> . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    list_exps                      shift and go to state 76
    exp                            shift and go to state 69
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 40

    (69) args -> construct_table .

    RETURN          reduce using rule 69 (args -> construct_table .)
    $end            reduce using rule 69 (args -> construct_table .)
    COLON           reduce using rule 69 (args -> construct_table .)
    LPAREN          reduce using rule 69 (args -> construct_table .)
    LBRACE          reduce using rule 69 (args -> construct_table .)
    LCOLCH          reduce using rule 69 (args -> construct_table .)
    DOT             reduce using rule 69 (args -> construct_table .)
    END             reduce using rule 69 (args -> construct_table .)
    UNTIL           reduce using rule 69 (args -> construct_table .)
    DO              reduce using rule 69 (args -> construct_table .)
    PLUS            reduce using rule 69 (args -> construct_table .)
    MINUS           reduce using rule 69 (args -> construct_table .)
    TIMES           reduce using rule 69 (args -> construct_table .)
    DIVIDE          reduce using rule 69 (args -> construct_table .)
    EXPO            reduce using rule 69 (args -> construct_table .)
    PERCENTUAL      reduce using rule 69 (args -> construct_table .)
    CONCAT          reduce using rule 69 (args -> construct_table .)
    LT              reduce using rule 69 (args -> construct_table .)
    LTEQUALS        reduce using rule 69 (args -> construct_table .)
    GT              reduce using rule 69 (args -> construct_table .)
    GTEQUALS        reduce using rule 69 (args -> construct_table .)
    EQUALS          reduce using rule 69 (args -> construct_table .)
    DIF             reduce using rule 69 (args -> construct_table .)
    AND             reduce using rule 69 (args -> construct_table .)
    OR              reduce using rule 69 (args -> construct_table .)
    NOT             reduce using rule 69 (args -> construct_table .)
    TAG             reduce using rule 69 (args -> construct_table .)
    THEN            reduce using rule 69 (args -> construct_table .)
    RPAREN          reduce using rule 69 (args -> construct_table .)
    COMMA           reduce using rule 69 (args -> construct_table .)
    SEMICOLON       reduce using rule 69 (args -> construct_table .)
    RCOLCH          reduce using rule 69 (args -> construct_table .)
    RBRACE          reduce using rule 69 (args -> construct_table .)


state 41

    (75) construct_table -> LBRACE . list_fields RBRACE
    (76) construct_table -> LBRACE . RBRACE
    (77) list_fields -> . field
    (78) list_fields -> . field separator_fields list_fields
    (79) list_fields -> . field_empty
    (80) list_fields -> . field_empty separator_fields list_fields
    (83) field -> . LCOLCH exp RCOLCH ATRIB exp
    (84) field -> . NAME ATRIB exp
    (81) field_empty -> . LCOLCH exp RCOLCH
    (82) field_empty -> . NAME

    RBRACE          shift and go to state 78
    LCOLCH          shift and go to state 81
    NAME            shift and go to state 82

    list_fields                    shift and go to state 77
    field                          shift and go to state 79
    field_empty                    shift and go to state 80

state 42

    (22) rotulo -> DUALCOLON NAME . DUALCOLON

    DUALCOLON       shift and go to state 83


state 43

    (96) struct_while -> WHILE exp . DO block END
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              shift and go to state 84
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 44

    (38) exp -> NIL .

    DO              reduce using rule 38 (exp -> NIL .)
    PLUS            reduce using rule 38 (exp -> NIL .)
    MINUS           reduce using rule 38 (exp -> NIL .)
    TIMES           reduce using rule 38 (exp -> NIL .)
    DIVIDE          reduce using rule 38 (exp -> NIL .)
    EXPO            reduce using rule 38 (exp -> NIL .)
    PERCENTUAL      reduce using rule 38 (exp -> NIL .)
    CONCAT          reduce using rule 38 (exp -> NIL .)
    LT              reduce using rule 38 (exp -> NIL .)
    LTEQUALS        reduce using rule 38 (exp -> NIL .)
    GT              reduce using rule 38 (exp -> NIL .)
    GTEQUALS        reduce using rule 38 (exp -> NIL .)
    EQUALS          reduce using rule 38 (exp -> NIL .)
    DIF             reduce using rule 38 (exp -> NIL .)
    AND             reduce using rule 38 (exp -> NIL .)
    OR              reduce using rule 38 (exp -> NIL .)
    NOT             reduce using rule 38 (exp -> NIL .)
    TAG             reduce using rule 38 (exp -> NIL .)
    THEN            reduce using rule 38 (exp -> NIL .)
    RPAREN          reduce using rule 38 (exp -> NIL .)
    COMMA           reduce using rule 38 (exp -> NIL .)
    SEMICOLON       reduce using rule 38 (exp -> NIL .)
    $end            reduce using rule 38 (exp -> NIL .)
    END             reduce using rule 38 (exp -> NIL .)
    UNTIL           reduce using rule 38 (exp -> NIL .)
    RETURN          reduce using rule 38 (exp -> NIL .)
    RCOLCH          reduce using rule 38 (exp -> NIL .)
    RBRACE          reduce using rule 38 (exp -> NIL .)


state 45

    (39) exp -> FALSE .

    DO              reduce using rule 39 (exp -> FALSE .)
    PLUS            reduce using rule 39 (exp -> FALSE .)
    MINUS           reduce using rule 39 (exp -> FALSE .)
    TIMES           reduce using rule 39 (exp -> FALSE .)
    DIVIDE          reduce using rule 39 (exp -> FALSE .)
    EXPO            reduce using rule 39 (exp -> FALSE .)
    PERCENTUAL      reduce using rule 39 (exp -> FALSE .)
    CONCAT          reduce using rule 39 (exp -> FALSE .)
    LT              reduce using rule 39 (exp -> FALSE .)
    LTEQUALS        reduce using rule 39 (exp -> FALSE .)
    GT              reduce using rule 39 (exp -> FALSE .)
    GTEQUALS        reduce using rule 39 (exp -> FALSE .)
    EQUALS          reduce using rule 39 (exp -> FALSE .)
    DIF             reduce using rule 39 (exp -> FALSE .)
    AND             reduce using rule 39 (exp -> FALSE .)
    OR              reduce using rule 39 (exp -> FALSE .)
    NOT             reduce using rule 39 (exp -> FALSE .)
    TAG             reduce using rule 39 (exp -> FALSE .)
    THEN            reduce using rule 39 (exp -> FALSE .)
    RPAREN          reduce using rule 39 (exp -> FALSE .)
    COMMA           reduce using rule 39 (exp -> FALSE .)
    SEMICOLON       reduce using rule 39 (exp -> FALSE .)
    $end            reduce using rule 39 (exp -> FALSE .)
    END             reduce using rule 39 (exp -> FALSE .)
    UNTIL           reduce using rule 39 (exp -> FALSE .)
    RETURN          reduce using rule 39 (exp -> FALSE .)
    RCOLCH          reduce using rule 39 (exp -> FALSE .)
    RBRACE          reduce using rule 39 (exp -> FALSE .)


state 46

    (40) exp -> TRUE .

    DO              reduce using rule 40 (exp -> TRUE .)
    PLUS            reduce using rule 40 (exp -> TRUE .)
    MINUS           reduce using rule 40 (exp -> TRUE .)
    TIMES           reduce using rule 40 (exp -> TRUE .)
    DIVIDE          reduce using rule 40 (exp -> TRUE .)
    EXPO            reduce using rule 40 (exp -> TRUE .)
    PERCENTUAL      reduce using rule 40 (exp -> TRUE .)
    CONCAT          reduce using rule 40 (exp -> TRUE .)
    LT              reduce using rule 40 (exp -> TRUE .)
    LTEQUALS        reduce using rule 40 (exp -> TRUE .)
    GT              reduce using rule 40 (exp -> TRUE .)
    GTEQUALS        reduce using rule 40 (exp -> TRUE .)
    EQUALS          reduce using rule 40 (exp -> TRUE .)
    DIF             reduce using rule 40 (exp -> TRUE .)
    AND             reduce using rule 40 (exp -> TRUE .)
    OR              reduce using rule 40 (exp -> TRUE .)
    NOT             reduce using rule 40 (exp -> TRUE .)
    TAG             reduce using rule 40 (exp -> TRUE .)
    THEN            reduce using rule 40 (exp -> TRUE .)
    RPAREN          reduce using rule 40 (exp -> TRUE .)
    COMMA           reduce using rule 40 (exp -> TRUE .)
    SEMICOLON       reduce using rule 40 (exp -> TRUE .)
    $end            reduce using rule 40 (exp -> TRUE .)
    END             reduce using rule 40 (exp -> TRUE .)
    UNTIL           reduce using rule 40 (exp -> TRUE .)
    RETURN          reduce using rule 40 (exp -> TRUE .)
    RCOLCH          reduce using rule 40 (exp -> TRUE .)
    RBRACE          reduce using rule 40 (exp -> TRUE .)


state 47

    (41) exp -> NUMBER .

    DO              reduce using rule 41 (exp -> NUMBER .)
    PLUS            reduce using rule 41 (exp -> NUMBER .)
    MINUS           reduce using rule 41 (exp -> NUMBER .)
    TIMES           reduce using rule 41 (exp -> NUMBER .)
    DIVIDE          reduce using rule 41 (exp -> NUMBER .)
    EXPO            reduce using rule 41 (exp -> NUMBER .)
    PERCENTUAL      reduce using rule 41 (exp -> NUMBER .)
    CONCAT          reduce using rule 41 (exp -> NUMBER .)
    LT              reduce using rule 41 (exp -> NUMBER .)
    LTEQUALS        reduce using rule 41 (exp -> NUMBER .)
    GT              reduce using rule 41 (exp -> NUMBER .)
    GTEQUALS        reduce using rule 41 (exp -> NUMBER .)
    EQUALS          reduce using rule 41 (exp -> NUMBER .)
    DIF             reduce using rule 41 (exp -> NUMBER .)
    AND             reduce using rule 41 (exp -> NUMBER .)
    OR              reduce using rule 41 (exp -> NUMBER .)
    NOT             reduce using rule 41 (exp -> NUMBER .)
    TAG             reduce using rule 41 (exp -> NUMBER .)
    THEN            reduce using rule 41 (exp -> NUMBER .)
    RPAREN          reduce using rule 41 (exp -> NUMBER .)
    COMMA           reduce using rule 41 (exp -> NUMBER .)
    SEMICOLON       reduce using rule 41 (exp -> NUMBER .)
    $end            reduce using rule 41 (exp -> NUMBER .)
    END             reduce using rule 41 (exp -> NUMBER .)
    UNTIL           reduce using rule 41 (exp -> NUMBER .)
    RETURN          reduce using rule 41 (exp -> NUMBER .)
    RCOLCH          reduce using rule 41 (exp -> NUMBER .)
    RBRACE          reduce using rule 41 (exp -> NUMBER .)


state 48

    (42) exp -> STRING .

    DO              reduce using rule 42 (exp -> STRING .)
    PLUS            reduce using rule 42 (exp -> STRING .)
    MINUS           reduce using rule 42 (exp -> STRING .)
    TIMES           reduce using rule 42 (exp -> STRING .)
    DIVIDE          reduce using rule 42 (exp -> STRING .)
    EXPO            reduce using rule 42 (exp -> STRING .)
    PERCENTUAL      reduce using rule 42 (exp -> STRING .)
    CONCAT          reduce using rule 42 (exp -> STRING .)
    LT              reduce using rule 42 (exp -> STRING .)
    LTEQUALS        reduce using rule 42 (exp -> STRING .)
    GT              reduce using rule 42 (exp -> STRING .)
    GTEQUALS        reduce using rule 42 (exp -> STRING .)
    EQUALS          reduce using rule 42 (exp -> STRING .)
    DIF             reduce using rule 42 (exp -> STRING .)
    AND             reduce using rule 42 (exp -> STRING .)
    OR              reduce using rule 42 (exp -> STRING .)
    NOT             reduce using rule 42 (exp -> STRING .)
    TAG             reduce using rule 42 (exp -> STRING .)
    THEN            reduce using rule 42 (exp -> STRING .)
    RPAREN          reduce using rule 42 (exp -> STRING .)
    COMMA           reduce using rule 42 (exp -> STRING .)
    SEMICOLON       reduce using rule 42 (exp -> STRING .)
    $end            reduce using rule 42 (exp -> STRING .)
    END             reduce using rule 42 (exp -> STRING .)
    UNTIL           reduce using rule 42 (exp -> STRING .)
    RETURN          reduce using rule 42 (exp -> STRING .)
    RCOLCH          reduce using rule 42 (exp -> STRING .)
    RBRACE          reduce using rule 42 (exp -> STRING .)


state 49

    (43) exp -> VARARGS .

    DO              reduce using rule 43 (exp -> VARARGS .)
    PLUS            reduce using rule 43 (exp -> VARARGS .)
    MINUS           reduce using rule 43 (exp -> VARARGS .)
    TIMES           reduce using rule 43 (exp -> VARARGS .)
    DIVIDE          reduce using rule 43 (exp -> VARARGS .)
    EXPO            reduce using rule 43 (exp -> VARARGS .)
    PERCENTUAL      reduce using rule 43 (exp -> VARARGS .)
    CONCAT          reduce using rule 43 (exp -> VARARGS .)
    LT              reduce using rule 43 (exp -> VARARGS .)
    LTEQUALS        reduce using rule 43 (exp -> VARARGS .)
    GT              reduce using rule 43 (exp -> VARARGS .)
    GTEQUALS        reduce using rule 43 (exp -> VARARGS .)
    EQUALS          reduce using rule 43 (exp -> VARARGS .)
    DIF             reduce using rule 43 (exp -> VARARGS .)
    AND             reduce using rule 43 (exp -> VARARGS .)
    OR              reduce using rule 43 (exp -> VARARGS .)
    NOT             reduce using rule 43 (exp -> VARARGS .)
    TAG             reduce using rule 43 (exp -> VARARGS .)
    THEN            reduce using rule 43 (exp -> VARARGS .)
    RPAREN          reduce using rule 43 (exp -> VARARGS .)
    COMMA           reduce using rule 43 (exp -> VARARGS .)
    SEMICOLON       reduce using rule 43 (exp -> VARARGS .)
    $end            reduce using rule 43 (exp -> VARARGS .)
    END             reduce using rule 43 (exp -> VARARGS .)
    UNTIL           reduce using rule 43 (exp -> VARARGS .)
    RETURN          reduce using rule 43 (exp -> VARARGS .)
    RCOLCH          reduce using rule 43 (exp -> VARARGS .)
    RBRACE          reduce using rule 43 (exp -> VARARGS .)


state 50

    (44) exp -> def_function .

    DO              reduce using rule 44 (exp -> def_function .)
    PLUS            reduce using rule 44 (exp -> def_function .)
    MINUS           reduce using rule 44 (exp -> def_function .)
    TIMES           reduce using rule 44 (exp -> def_function .)
    DIVIDE          reduce using rule 44 (exp -> def_function .)
    EXPO            reduce using rule 44 (exp -> def_function .)
    PERCENTUAL      reduce using rule 44 (exp -> def_function .)
    CONCAT          reduce using rule 44 (exp -> def_function .)
    LT              reduce using rule 44 (exp -> def_function .)
    LTEQUALS        reduce using rule 44 (exp -> def_function .)
    GT              reduce using rule 44 (exp -> def_function .)
    GTEQUALS        reduce using rule 44 (exp -> def_function .)
    EQUALS          reduce using rule 44 (exp -> def_function .)
    DIF             reduce using rule 44 (exp -> def_function .)
    AND             reduce using rule 44 (exp -> def_function .)
    OR              reduce using rule 44 (exp -> def_function .)
    NOT             reduce using rule 44 (exp -> def_function .)
    TAG             reduce using rule 44 (exp -> def_function .)
    THEN            reduce using rule 44 (exp -> def_function .)
    RPAREN          reduce using rule 44 (exp -> def_function .)
    COMMA           reduce using rule 44 (exp -> def_function .)
    SEMICOLON       reduce using rule 44 (exp -> def_function .)
    $end            reduce using rule 44 (exp -> def_function .)
    END             reduce using rule 44 (exp -> def_function .)
    UNTIL           reduce using rule 44 (exp -> def_function .)
    RETURN          reduce using rule 44 (exp -> def_function .)
    RCOLCH          reduce using rule 44 (exp -> def_function .)
    RBRACE          reduce using rule 44 (exp -> def_function .)


state 51

    (45) exp -> exp_prefix .
    (66) call_function -> exp_prefix . args
    (67) call_function -> exp_prefix . COLON NAME args
    (68) args -> . LPAREN list_exps RPAREN
    (69) args -> . construct_table
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE

    DO              reduce using rule 45 (exp -> exp_prefix .)
    PLUS            reduce using rule 45 (exp -> exp_prefix .)
    MINUS           reduce using rule 45 (exp -> exp_prefix .)
    TIMES           reduce using rule 45 (exp -> exp_prefix .)
    DIVIDE          reduce using rule 45 (exp -> exp_prefix .)
    EXPO            reduce using rule 45 (exp -> exp_prefix .)
    PERCENTUAL      reduce using rule 45 (exp -> exp_prefix .)
    CONCAT          reduce using rule 45 (exp -> exp_prefix .)
    LT              reduce using rule 45 (exp -> exp_prefix .)
    LTEQUALS        reduce using rule 45 (exp -> exp_prefix .)
    GT              reduce using rule 45 (exp -> exp_prefix .)
    GTEQUALS        reduce using rule 45 (exp -> exp_prefix .)
    EQUALS          reduce using rule 45 (exp -> exp_prefix .)
    DIF             reduce using rule 45 (exp -> exp_prefix .)
    AND             reduce using rule 45 (exp -> exp_prefix .)
    OR              reduce using rule 45 (exp -> exp_prefix .)
    NOT             reduce using rule 45 (exp -> exp_prefix .)
    TAG             reduce using rule 45 (exp -> exp_prefix .)
    THEN            reduce using rule 45 (exp -> exp_prefix .)
    RPAREN          reduce using rule 45 (exp -> exp_prefix .)
    COMMA           reduce using rule 45 (exp -> exp_prefix .)
    SEMICOLON       reduce using rule 45 (exp -> exp_prefix .)
    $end            reduce using rule 45 (exp -> exp_prefix .)
    END             reduce using rule 45 (exp -> exp_prefix .)
    UNTIL           reduce using rule 45 (exp -> exp_prefix .)
    RETURN          reduce using rule 45 (exp -> exp_prefix .)
    RCOLCH          reduce using rule 45 (exp -> exp_prefix .)
    RBRACE          reduce using rule 45 (exp -> exp_prefix .)
    COLON           shift and go to state 38
    LPAREN          shift and go to state 39
    LBRACE          shift and go to state 41

    args                           shift and go to state 37
    construct_table                shift and go to state 40

state 52

    (46) exp -> construct_table .

    DO              reduce using rule 46 (exp -> construct_table .)
    PLUS            reduce using rule 46 (exp -> construct_table .)
    MINUS           reduce using rule 46 (exp -> construct_table .)
    TIMES           reduce using rule 46 (exp -> construct_table .)
    DIVIDE          reduce using rule 46 (exp -> construct_table .)
    EXPO            reduce using rule 46 (exp -> construct_table .)
    PERCENTUAL      reduce using rule 46 (exp -> construct_table .)
    CONCAT          reduce using rule 46 (exp -> construct_table .)
    LT              reduce using rule 46 (exp -> construct_table .)
    LTEQUALS        reduce using rule 46 (exp -> construct_table .)
    GT              reduce using rule 46 (exp -> construct_table .)
    GTEQUALS        reduce using rule 46 (exp -> construct_table .)
    EQUALS          reduce using rule 46 (exp -> construct_table .)
    DIF             reduce using rule 46 (exp -> construct_table .)
    AND             reduce using rule 46 (exp -> construct_table .)
    OR              reduce using rule 46 (exp -> construct_table .)
    NOT             reduce using rule 46 (exp -> construct_table .)
    TAG             reduce using rule 46 (exp -> construct_table .)
    THEN            reduce using rule 46 (exp -> construct_table .)
    RPAREN          reduce using rule 46 (exp -> construct_table .)
    COMMA           reduce using rule 46 (exp -> construct_table .)
    SEMICOLON       reduce using rule 46 (exp -> construct_table .)
    $end            reduce using rule 46 (exp -> construct_table .)
    END             reduce using rule 46 (exp -> construct_table .)
    UNTIL           reduce using rule 46 (exp -> construct_table .)
    RETURN          reduce using rule 46 (exp -> construct_table .)
    RCOLCH          reduce using rule 46 (exp -> construct_table .)
    RBRACE          reduce using rule 46 (exp -> construct_table .)


state 53

    (64) exp_prefix -> call_function .

    COLON           reduce using rule 64 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 64 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 64 (exp_prefix -> call_function .)
    DO              reduce using rule 64 (exp_prefix -> call_function .)
    PLUS            reduce using rule 64 (exp_prefix -> call_function .)
    MINUS           reduce using rule 64 (exp_prefix -> call_function .)
    TIMES           reduce using rule 64 (exp_prefix -> call_function .)
    DIVIDE          reduce using rule 64 (exp_prefix -> call_function .)
    EXPO            reduce using rule 64 (exp_prefix -> call_function .)
    PERCENTUAL      reduce using rule 64 (exp_prefix -> call_function .)
    CONCAT          reduce using rule 64 (exp_prefix -> call_function .)
    LT              reduce using rule 64 (exp_prefix -> call_function .)
    LTEQUALS        reduce using rule 64 (exp_prefix -> call_function .)
    GT              reduce using rule 64 (exp_prefix -> call_function .)
    GTEQUALS        reduce using rule 64 (exp_prefix -> call_function .)
    EQUALS          reduce using rule 64 (exp_prefix -> call_function .)
    DIF             reduce using rule 64 (exp_prefix -> call_function .)
    AND             reduce using rule 64 (exp_prefix -> call_function .)
    OR              reduce using rule 64 (exp_prefix -> call_function .)
    NOT             reduce using rule 64 (exp_prefix -> call_function .)
    TAG             reduce using rule 64 (exp_prefix -> call_function .)
    THEN            reduce using rule 64 (exp_prefix -> call_function .)
    RPAREN          reduce using rule 64 (exp_prefix -> call_function .)
    COMMA           reduce using rule 64 (exp_prefix -> call_function .)
    SEMICOLON       reduce using rule 64 (exp_prefix -> call_function .)
    $end            reduce using rule 64 (exp_prefix -> call_function .)
    END             reduce using rule 64 (exp_prefix -> call_function .)
    UNTIL           reduce using rule 64 (exp_prefix -> call_function .)
    RETURN          reduce using rule 64 (exp_prefix -> call_function .)
    RCOLCH          reduce using rule 64 (exp_prefix -> call_function .)
    RBRACE          reduce using rule 64 (exp_prefix -> call_function .)


state 54

    (65) exp_prefix -> LPAREN . exp RPAREN
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 103
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 55

    (101) local_function -> LOCAL . FUNCTION name_function body_function

    FUNCTION        shift and go to state 62


state 56

    (100) struct_repeat -> REPEAT block . UNTIL exp

    UNTIL           shift and go to state 104


state 57

    (93) if -> IF exp . THEN block END
    (94) if -> IF exp . THEN else
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    THEN            shift and go to state 105
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 58

    (97) struct_for -> FOR NAME . ATRIB exp COMMA exp DO block END
    (98) struct_for -> FOR NAME . ATRIB exp COMMA exp COMMA exp DO block END
    (34) list_names -> NAME . COMMA list_names
    (35) list_names -> NAME .

    ATRIB           shift and go to state 106
    COMMA           shift and go to state 107
    IN              reduce using rule 35 (list_names -> NAME .)


state 59

    (99) struct_for_in -> FOR list_names . IN list_exps DO block END

    IN              shift and go to state 108


state 60

    (87) local_var -> LOCAL list_names . ATRIB list_exps

    ATRIB           shift and go to state 109


state 61

    (88) local_var -> LOCAL NAME . ATRIB exp
    (34) list_names -> NAME . COMMA list_names
    (35) list_names -> NAME .

  ! shift/reduce conflict for ATRIB resolved as shift
    ATRIB           shift and go to state 110
    COMMA           shift and go to state 107

  ! ATRIB           [ reduce using rule 35 (list_names -> NAME .) ]


state 62

    (101) local_function -> LOCAL FUNCTION . name_function body_function
    (23) name_function -> . NAME
    (24) name_function -> . NAME DOT NAME
    (25) name_function -> . NAME COLON NAME

    NAME            shift and go to state 112

    name_function                  shift and go to state 111

state 63

    (29) var -> prefix_exp LCOLCH . exp RCOLCH
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 113
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 64

    (30) var -> prefix_exp DOT . NAME

    NAME            shift and go to state 114


state 65

    (65) exp_prefix -> LPAREN exp . RPAREN
    (33) prefix_exp -> LPAREN exp . RPAREN
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    RPAREN          shift and go to state 115
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 66

    (92) function -> FUNCTION body_function .

    RETURN          reduce using rule 92 (function -> FUNCTION body_function .)
    $end            reduce using rule 92 (function -> FUNCTION body_function .)
    END             reduce using rule 92 (function -> FUNCTION body_function .)
    DO              reduce using rule 92 (function -> FUNCTION body_function .)
    PLUS            reduce using rule 92 (function -> FUNCTION body_function .)
    MINUS           reduce using rule 92 (function -> FUNCTION body_function .)
    TIMES           reduce using rule 92 (function -> FUNCTION body_function .)
    DIVIDE          reduce using rule 92 (function -> FUNCTION body_function .)
    EXPO            reduce using rule 92 (function -> FUNCTION body_function .)
    PERCENTUAL      reduce using rule 92 (function -> FUNCTION body_function .)
    CONCAT          reduce using rule 92 (function -> FUNCTION body_function .)
    LT              reduce using rule 92 (function -> FUNCTION body_function .)
    LTEQUALS        reduce using rule 92 (function -> FUNCTION body_function .)
    GT              reduce using rule 92 (function -> FUNCTION body_function .)
    GTEQUALS        reduce using rule 92 (function -> FUNCTION body_function .)
    EQUALS          reduce using rule 92 (function -> FUNCTION body_function .)
    DIF             reduce using rule 92 (function -> FUNCTION body_function .)
    AND             reduce using rule 92 (function -> FUNCTION body_function .)
    OR              reduce using rule 92 (function -> FUNCTION body_function .)
    NOT             reduce using rule 92 (function -> FUNCTION body_function .)
    TAG             reduce using rule 92 (function -> FUNCTION body_function .)
    UNTIL           reduce using rule 92 (function -> FUNCTION body_function .)
    THEN            reduce using rule 92 (function -> FUNCTION body_function .)
    RPAREN          reduce using rule 92 (function -> FUNCTION body_function .)
    COMMA           reduce using rule 92 (function -> FUNCTION body_function .)
    SEMICOLON       reduce using rule 92 (function -> FUNCTION body_function .)
    RCOLCH          reduce using rule 92 (function -> FUNCTION body_function .)
    RBRACE          reduce using rule 92 (function -> FUNCTION body_function .)


state 67

    (72) body_function -> LPAREN . list_pars RPAREN block END
    (73) list_pars -> . list_names COMMA VARARGS
    (74) list_pars -> . VARARGS
    (34) list_names -> . NAME COMMA list_names
    (35) list_names -> . NAME

    VARARGS         shift and go to state 118
    NAME            shift and go to state 119

    list_pars                      shift and go to state 116
    list_names                     shift and go to state 117

state 68

    (20) command_ret -> RETURN list_exps .
    (21) command_ret -> RETURN list_exps . SEMICOLON

    $end            reduce using rule 20 (command_ret -> RETURN list_exps .)
    END             reduce using rule 20 (command_ret -> RETURN list_exps .)
    UNTIL           reduce using rule 20 (command_ret -> RETURN list_exps .)
    SEMICOLON       shift and go to state 120


state 69

    (36) list_exps -> exp . COMMA list_exps
    (37) list_exps -> exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    COMMA           shift and go to state 121
    SEMICOLON       reduce using rule 37 (list_exps -> exp .)
    $end            reduce using rule 37 (list_exps -> exp .)
    END             reduce using rule 37 (list_exps -> exp .)
    UNTIL           reduce using rule 37 (list_exps -> exp .)
    RETURN          reduce using rule 37 (list_exps -> exp .)
    RPAREN          reduce using rule 37 (list_exps -> exp .)
    DO              reduce using rule 37 (list_exps -> exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 70

    (5) command -> list_vars ATRIB list_exps .

    RETURN          reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    $end            reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    END             reduce using rule 5 (command -> list_vars ATRIB list_exps .)
    UNTIL           reduce using rule 5 (command -> list_vars ATRIB list_exps .)


state 71

    (9) command -> DO block END .

    RETURN          reduce using rule 9 (command -> DO block END .)
    $end            reduce using rule 9 (command -> DO block END .)
    END             reduce using rule 9 (command -> DO block END .)
    UNTIL           reduce using rule 9 (command -> DO block END .)


state 72

    (27) list_vars -> var COMMA list_vars .

    ATRIB           reduce using rule 27 (list_vars -> var COMMA list_vars .)


state 73

    (32) prefix_exp -> call_function .
    (64) exp_prefix -> call_function .

    LCOLCH          reduce using rule 32 (prefix_exp -> call_function .)
    DOT             reduce using rule 32 (prefix_exp -> call_function .)
    COLON           reduce using rule 64 (exp_prefix -> call_function .)
    LPAREN          reduce using rule 64 (exp_prefix -> call_function .)
    LBRACE          reduce using rule 64 (exp_prefix -> call_function .)


state 74

    (33) prefix_exp -> LPAREN . exp RPAREN
    (65) exp_prefix -> LPAREN . exp RPAREN
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 122
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 75

    (67) call_function -> exp_prefix COLON NAME . args
    (68) args -> . LPAREN list_exps RPAREN
    (69) args -> . construct_table
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE

    LPAREN          shift and go to state 39
    LBRACE          shift and go to state 41

    args                           shift and go to state 123
    construct_table                shift and go to state 40

state 76

    (68) args -> LPAREN list_exps . RPAREN

    RPAREN          shift and go to state 124


state 77

    (75) construct_table -> LBRACE list_fields . RBRACE

    RBRACE          shift and go to state 125


state 78

    (76) construct_table -> LBRACE RBRACE .

    RETURN          reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    $end            reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    COLON           reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    LPAREN          reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    LBRACE          reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    LCOLCH          reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    DOT             reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    END             reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    UNTIL           reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    DO              reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    PLUS            reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    MINUS           reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    TIMES           reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    EXPO            reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    PERCENTUAL      reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    CONCAT          reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    LT              reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    LTEQUALS        reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    GT              reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    GTEQUALS        reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    EQUALS          reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    DIF             reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    AND             reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    OR              reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    NOT             reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    TAG             reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    THEN            reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    RPAREN          reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    COMMA           reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    RCOLCH          reduce using rule 76 (construct_table -> LBRACE RBRACE .)
    RBRACE          reduce using rule 76 (construct_table -> LBRACE RBRACE .)


state 79

    (77) list_fields -> field .
    (78) list_fields -> field . separator_fields list_fields
    (85) separator_fields -> . COMMA
    (86) separator_fields -> . SEMICOLON

    RBRACE          reduce using rule 77 (list_fields -> field .)
    COMMA           shift and go to state 127
    SEMICOLON       shift and go to state 128

    separator_fields               shift and go to state 126

state 80

    (79) list_fields -> field_empty .
    (80) list_fields -> field_empty . separator_fields list_fields
    (85) separator_fields -> . COMMA
    (86) separator_fields -> . SEMICOLON

    RBRACE          reduce using rule 79 (list_fields -> field_empty .)
    COMMA           shift and go to state 127
    SEMICOLON       shift and go to state 128

    separator_fields               shift and go to state 129

state 81

    (83) field -> LCOLCH . exp RCOLCH ATRIB exp
    (81) field_empty -> LCOLCH . exp RCOLCH
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 130
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 82

    (84) field -> NAME . ATRIB exp
    (82) field_empty -> NAME .

    ATRIB           shift and go to state 131
    COMMA           reduce using rule 82 (field_empty -> NAME .)
    SEMICOLON       reduce using rule 82 (field_empty -> NAME .)
    RBRACE          reduce using rule 82 (field_empty -> NAME .)


state 83

    (22) rotulo -> DUALCOLON NAME DUALCOLON .

    RETURN          reduce using rule 22 (rotulo -> DUALCOLON NAME DUALCOLON .)
    $end            reduce using rule 22 (rotulo -> DUALCOLON NAME DUALCOLON .)
    END             reduce using rule 22 (rotulo -> DUALCOLON NAME DUALCOLON .)
    UNTIL           reduce using rule 22 (rotulo -> DUALCOLON NAME DUALCOLON .)


state 84

    (96) struct_while -> WHILE exp DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (70) def_function -> . function
    (71) def_function -> . local_function
    (87) local_var -> . LOCAL list_names ATRIB list_exps
    (88) local_var -> . LOCAL NAME ATRIB exp
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 21
    REPEAT          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    LOCAL           shift and go to state 27
    NAME            shift and go to state 19
    VAR             shift and go to state 29
    LPAREN          shift and go to state 30
    FUNCTION        shift and go to state 31

    block                          shift and go to state 132
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    var                            shift and go to state 17
    exp_prefix                     shift and go to state 18
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    prefix_exp                     shift and go to state 28

state 85

    (47) exp -> exp op_unary . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 133
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 86

    (48) exp -> exp PLUS . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 134
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 87

    (49) exp -> exp MINUS . exp
    (89) op_unary -> MINUS .
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             reduce using rule 89 (op_unary -> MINUS .)
    FALSE           reduce using rule 89 (op_unary -> MINUS .)
    TRUE            reduce using rule 89 (op_unary -> MINUS .)
    NUMBER          reduce using rule 89 (op_unary -> MINUS .)
    STRING          reduce using rule 89 (op_unary -> MINUS .)
    VARARGS         reduce using rule 89 (op_unary -> MINUS .)
    VAR             reduce using rule 89 (op_unary -> MINUS .)
    LPAREN          reduce using rule 89 (op_unary -> MINUS .)
    LBRACE          reduce using rule 89 (op_unary -> MINUS .)
    FUNCTION        reduce using rule 89 (op_unary -> MINUS .)
    LOCAL           reduce using rule 89 (op_unary -> MINUS .)

  ! NIL             [ shift and go to state 44 ]
  ! FALSE           [ shift and go to state 45 ]
  ! TRUE            [ shift and go to state 46 ]
  ! NUMBER          [ shift and go to state 47 ]
  ! STRING          [ shift and go to state 48 ]
  ! VARARGS         [ shift and go to state 49 ]
  ! VAR             [ shift and go to state 29 ]
  ! LPAREN          [ shift and go to state 54 ]
  ! LBRACE          [ shift and go to state 41 ]
  ! FUNCTION        [ shift and go to state 31 ]
  ! LOCAL           [ shift and go to state 55 ]

    exp                            shift and go to state 135
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 88

    (50) exp -> exp TIMES . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 136
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 89

    (51) exp -> exp DIVIDE . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 137
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 90

    (52) exp -> exp EXPO . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 138
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 91

    (53) exp -> exp PERCENTUAL . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 139
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 92

    (54) exp -> exp CONCAT . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 140
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 93

    (55) exp -> exp LT . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 141
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 94

    (56) exp -> exp LTEQUALS . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 142
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 95

    (57) exp -> exp GT . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 143
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 96

    (58) exp -> exp GTEQUALS . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 144
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 97

    (59) exp -> exp EQUALS . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 145
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 98

    (60) exp -> exp DIF . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 146
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 99

    (61) exp -> exp AND . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 147
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 100

    (62) exp -> exp OR . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 148
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 101

    (90) op_unary -> NOT .

    NIL             reduce using rule 90 (op_unary -> NOT .)
    FALSE           reduce using rule 90 (op_unary -> NOT .)
    TRUE            reduce using rule 90 (op_unary -> NOT .)
    NUMBER          reduce using rule 90 (op_unary -> NOT .)
    STRING          reduce using rule 90 (op_unary -> NOT .)
    VARARGS         reduce using rule 90 (op_unary -> NOT .)
    VAR             reduce using rule 90 (op_unary -> NOT .)
    LPAREN          reduce using rule 90 (op_unary -> NOT .)
    LBRACE          reduce using rule 90 (op_unary -> NOT .)
    FUNCTION        reduce using rule 90 (op_unary -> NOT .)
    LOCAL           reduce using rule 90 (op_unary -> NOT .)


state 102

    (91) op_unary -> TAG .

    NIL             reduce using rule 91 (op_unary -> TAG .)
    FALSE           reduce using rule 91 (op_unary -> TAG .)
    TRUE            reduce using rule 91 (op_unary -> TAG .)
    NUMBER          reduce using rule 91 (op_unary -> TAG .)
    STRING          reduce using rule 91 (op_unary -> TAG .)
    VARARGS         reduce using rule 91 (op_unary -> TAG .)
    VAR             reduce using rule 91 (op_unary -> TAG .)
    LPAREN          reduce using rule 91 (op_unary -> TAG .)
    LBRACE          reduce using rule 91 (op_unary -> TAG .)
    FUNCTION        reduce using rule 91 (op_unary -> TAG .)
    LOCAL           reduce using rule 91 (op_unary -> TAG .)


state 103

    (65) exp_prefix -> LPAREN exp . RPAREN
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    RPAREN          shift and go to state 149
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 104

    (100) struct_repeat -> REPEAT block UNTIL . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 150
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 105

    (93) if -> IF exp THEN . block END
    (94) if -> IF exp THEN . else
    (2) block -> . command
    (3) block -> . command command_ret
    (95) else -> . ELSE block END
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (70) def_function -> . function
    (71) def_function -> . local_function
    (87) local_var -> . LOCAL list_names ATRIB list_exps
    (88) local_var -> . LOCAL NAME ATRIB exp
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    ELSE            shift and go to state 153
    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 21
    REPEAT          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    LOCAL           shift and go to state 27
    NAME            shift and go to state 19
    VAR             shift and go to state 29
    LPAREN          shift and go to state 30
    FUNCTION        shift and go to state 31

    block                          shift and go to state 151
    else                           shift and go to state 152
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    var                            shift and go to state 17
    exp_prefix                     shift and go to state 18
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    prefix_exp                     shift and go to state 28

state 106

    (97) struct_for -> FOR NAME ATRIB . exp COMMA exp DO block END
    (98) struct_for -> FOR NAME ATRIB . exp COMMA exp COMMA exp DO block END
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 154
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 107

    (34) list_names -> NAME COMMA . list_names
    (34) list_names -> . NAME COMMA list_names
    (35) list_names -> . NAME

    NAME            shift and go to state 119

    list_names                     shift and go to state 155

state 108

    (99) struct_for_in -> FOR list_names IN . list_exps DO block END
    (36) list_exps -> . exp COMMA list_exps
    (37) list_exps -> . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    list_exps                      shift and go to state 156
    exp                            shift and go to state 69
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 109

    (87) local_var -> LOCAL list_names ATRIB . list_exps
    (36) list_exps -> . exp COMMA list_exps
    (37) list_exps -> . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    list_exps                      shift and go to state 157
    exp                            shift and go to state 69
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 110

    (88) local_var -> LOCAL NAME ATRIB . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 158
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 111

    (101) local_function -> LOCAL FUNCTION name_function . body_function
    (72) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 67

    body_function                  shift and go to state 159

state 112

    (23) name_function -> NAME .
    (24) name_function -> NAME . DOT NAME
    (25) name_function -> NAME . COLON NAME

    LPAREN          reduce using rule 23 (name_function -> NAME .)
    DOT             shift and go to state 160
    COLON           shift and go to state 161


state 113

    (29) var -> prefix_exp LCOLCH exp . RCOLCH
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    RCOLCH          shift and go to state 162
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 114

    (30) var -> prefix_exp DOT NAME .

    COMMA           reduce using rule 30 (var -> prefix_exp DOT NAME .)
    ATRIB           reduce using rule 30 (var -> prefix_exp DOT NAME .)
    LCOLCH          reduce using rule 30 (var -> prefix_exp DOT NAME .)
    DOT             reduce using rule 30 (var -> prefix_exp DOT NAME .)


state 115

    (65) exp_prefix -> LPAREN exp RPAREN .
    (33) prefix_exp -> LPAREN exp RPAREN .

    COLON           reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    LCOLCH          reduce using rule 33 (prefix_exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 33 (prefix_exp -> LPAREN exp RPAREN .)


state 116

    (72) body_function -> LPAREN list_pars . RPAREN block END

    RPAREN          shift and go to state 163


state 117

    (73) list_pars -> list_names . COMMA VARARGS

    COMMA           shift and go to state 164


state 118

    (74) list_pars -> VARARGS .

    RPAREN          reduce using rule 74 (list_pars -> VARARGS .)


state 119

    (34) list_names -> NAME . COMMA list_names
    (35) list_names -> NAME .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 107
    IN              reduce using rule 35 (list_names -> NAME .)
    ATRIB           reduce using rule 35 (list_names -> NAME .)

  ! COMMA           [ reduce using rule 35 (list_names -> NAME .) ]


state 120

    (21) command_ret -> RETURN list_exps SEMICOLON .

    $end            reduce using rule 21 (command_ret -> RETURN list_exps SEMICOLON .)
    END             reduce using rule 21 (command_ret -> RETURN list_exps SEMICOLON .)
    UNTIL           reduce using rule 21 (command_ret -> RETURN list_exps SEMICOLON .)


state 121

    (36) list_exps -> exp COMMA . list_exps
    (36) list_exps -> . exp COMMA list_exps
    (37) list_exps -> . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 69
    list_exps                      shift and go to state 165
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 122

    (33) prefix_exp -> LPAREN exp . RPAREN
    (65) exp_prefix -> LPAREN exp . RPAREN
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    RPAREN          shift and go to state 166
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 123

    (67) call_function -> exp_prefix COLON NAME args .

    RETURN          reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    $end            reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    COLON           reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    LPAREN          reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    LBRACE          reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    LCOLCH          reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    DOT             reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    END             reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    DO              reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    PLUS            reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    MINUS           reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    TIMES           reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    DIVIDE          reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    EXPO            reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    PERCENTUAL      reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    CONCAT          reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    LT              reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    LTEQUALS        reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    GT              reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    GTEQUALS        reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    EQUALS          reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    DIF             reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    AND             reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    OR              reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    NOT             reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    TAG             reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    UNTIL           reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    THEN            reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    RPAREN          reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    COMMA           reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    SEMICOLON       reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    RCOLCH          reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)
    RBRACE          reduce using rule 67 (call_function -> exp_prefix COLON NAME args .)


state 124

    (68) args -> LPAREN list_exps RPAREN .

    RETURN          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    $end            reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    COLON           reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    LPAREN          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    LBRACE          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    LCOLCH          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    DOT             reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    END             reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    UNTIL           reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    DO              reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    PLUS            reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    MINUS           reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    TIMES           reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    DIVIDE          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    EXPO            reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    PERCENTUAL      reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    CONCAT          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    LT              reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    LTEQUALS        reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    GT              reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    GTEQUALS        reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    EQUALS          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    DIF             reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    AND             reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    OR              reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    NOT             reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    TAG             reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    THEN            reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    RPAREN          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    COMMA           reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    SEMICOLON       reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    RCOLCH          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)
    RBRACE          reduce using rule 68 (args -> LPAREN list_exps RPAREN .)


state 125

    (75) construct_table -> LBRACE list_fields RBRACE .

    RETURN          reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    $end            reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    COLON           reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    LPAREN          reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    LBRACE          reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    LCOLCH          reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    DOT             reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    END             reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    UNTIL           reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    DO              reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    PLUS            reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    MINUS           reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    TIMES           reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    DIVIDE          reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    EXPO            reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    PERCENTUAL      reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    CONCAT          reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    LT              reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    LTEQUALS        reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    GT              reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    GTEQUALS        reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    EQUALS          reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    DIF             reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    AND             reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    OR              reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    NOT             reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    TAG             reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    THEN            reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    RPAREN          reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    COMMA           reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    SEMICOLON       reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    RCOLCH          reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)
    RBRACE          reduce using rule 75 (construct_table -> LBRACE list_fields RBRACE .)


state 126

    (78) list_fields -> field separator_fields . list_fields
    (77) list_fields -> . field
    (78) list_fields -> . field separator_fields list_fields
    (79) list_fields -> . field_empty
    (80) list_fields -> . field_empty separator_fields list_fields
    (83) field -> . LCOLCH exp RCOLCH ATRIB exp
    (84) field -> . NAME ATRIB exp
    (81) field_empty -> . LCOLCH exp RCOLCH
    (82) field_empty -> . NAME

    LCOLCH          shift and go to state 81
    NAME            shift and go to state 82

    field                          shift and go to state 79
    list_fields                    shift and go to state 167
    field_empty                    shift and go to state 80

state 127

    (85) separator_fields -> COMMA .

    LCOLCH          reduce using rule 85 (separator_fields -> COMMA .)
    NAME            reduce using rule 85 (separator_fields -> COMMA .)


state 128

    (86) separator_fields -> SEMICOLON .

    LCOLCH          reduce using rule 86 (separator_fields -> SEMICOLON .)
    NAME            reduce using rule 86 (separator_fields -> SEMICOLON .)


state 129

    (80) list_fields -> field_empty separator_fields . list_fields
    (77) list_fields -> . field
    (78) list_fields -> . field separator_fields list_fields
    (79) list_fields -> . field_empty
    (80) list_fields -> . field_empty separator_fields list_fields
    (83) field -> . LCOLCH exp RCOLCH ATRIB exp
    (84) field -> . NAME ATRIB exp
    (81) field_empty -> . LCOLCH exp RCOLCH
    (82) field_empty -> . NAME

    LCOLCH          shift and go to state 81
    NAME            shift and go to state 82

    field_empty                    shift and go to state 80
    list_fields                    shift and go to state 168
    field                          shift and go to state 79

state 130

    (83) field -> LCOLCH exp . RCOLCH ATRIB exp
    (81) field_empty -> LCOLCH exp . RCOLCH
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    RCOLCH          shift and go to state 169
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 131

    (84) field -> NAME ATRIB . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 170
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 132

    (96) struct_while -> WHILE exp DO block . END

    END             shift and go to state 171


state 133

    (47) exp -> exp op_unary exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for EXPO resolved as shift
  ! shift/reduce conflict for PERCENTUAL resolved as shift
  ! shift/reduce conflict for CONCAT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LTEQUALS resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GTEQUALS resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for DIF resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for TAG resolved as shift
    DO              reduce using rule 47 (exp -> exp op_unary exp .)
    THEN            reduce using rule 47 (exp -> exp op_unary exp .)
    RPAREN          reduce using rule 47 (exp -> exp op_unary exp .)
    COMMA           reduce using rule 47 (exp -> exp op_unary exp .)
    SEMICOLON       reduce using rule 47 (exp -> exp op_unary exp .)
    $end            reduce using rule 47 (exp -> exp op_unary exp .)
    END             reduce using rule 47 (exp -> exp op_unary exp .)
    UNTIL           reduce using rule 47 (exp -> exp op_unary exp .)
    RETURN          reduce using rule 47 (exp -> exp op_unary exp .)
    RCOLCH          reduce using rule 47 (exp -> exp op_unary exp .)
    RBRACE          reduce using rule 47 (exp -> exp op_unary exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! PLUS            [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! MINUS           [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! TIMES           [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! DIVIDE          [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! EXPO            [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! PERCENTUAL      [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! CONCAT          [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! LT              [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! LTEQUALS        [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! GT              [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! GTEQUALS        [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! EQUALS          [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! DIF             [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! AND             [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! OR              [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! NOT             [ reduce using rule 47 (exp -> exp op_unary exp .) ]
  ! TAG             [ reduce using rule 47 (exp -> exp op_unary exp .) ]

    op_unary                       shift and go to state 85

state 134

    (48) exp -> exp PLUS exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 48 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 48 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 48 (exp -> exp PLUS exp .)
    CONCAT          reduce using rule 48 (exp -> exp PLUS exp .)
    LT              reduce using rule 48 (exp -> exp PLUS exp .)
    LTEQUALS        reduce using rule 48 (exp -> exp PLUS exp .)
    GT              reduce using rule 48 (exp -> exp PLUS exp .)
    GTEQUALS        reduce using rule 48 (exp -> exp PLUS exp .)
    EQUALS          reduce using rule 48 (exp -> exp PLUS exp .)
    DIF             reduce using rule 48 (exp -> exp PLUS exp .)
    AND             reduce using rule 48 (exp -> exp PLUS exp .)
    OR              reduce using rule 48 (exp -> exp PLUS exp .)
    THEN            reduce using rule 48 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 48 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 48 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 48 (exp -> exp PLUS exp .)
    $end            reduce using rule 48 (exp -> exp PLUS exp .)
    END             reduce using rule 48 (exp -> exp PLUS exp .)
    UNTIL           reduce using rule 48 (exp -> exp PLUS exp .)
    RETURN          reduce using rule 48 (exp -> exp PLUS exp .)
    RCOLCH          reduce using rule 48 (exp -> exp PLUS exp .)
    RBRACE          reduce using rule 48 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! TIMES           [ reduce using rule 48 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> exp PLUS exp .) ]
  ! EXPO            [ reduce using rule 48 (exp -> exp PLUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 48 (exp -> exp PLUS exp .) ]
  ! NOT             [ reduce using rule 48 (exp -> exp PLUS exp .) ]
  ! TAG             [ reduce using rule 48 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! CONCAT          [ shift and go to state 92 ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 135

    (49) exp -> exp MINUS exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 49 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 49 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 49 (exp -> exp MINUS exp .)
    CONCAT          reduce using rule 49 (exp -> exp MINUS exp .)
    LT              reduce using rule 49 (exp -> exp MINUS exp .)
    LTEQUALS        reduce using rule 49 (exp -> exp MINUS exp .)
    GT              reduce using rule 49 (exp -> exp MINUS exp .)
    GTEQUALS        reduce using rule 49 (exp -> exp MINUS exp .)
    EQUALS          reduce using rule 49 (exp -> exp MINUS exp .)
    DIF             reduce using rule 49 (exp -> exp MINUS exp .)
    AND             reduce using rule 49 (exp -> exp MINUS exp .)
    OR              reduce using rule 49 (exp -> exp MINUS exp .)
    THEN            reduce using rule 49 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 49 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 49 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 49 (exp -> exp MINUS exp .)
    $end            reduce using rule 49 (exp -> exp MINUS exp .)
    END             reduce using rule 49 (exp -> exp MINUS exp .)
    UNTIL           reduce using rule 49 (exp -> exp MINUS exp .)
    RETURN          reduce using rule 49 (exp -> exp MINUS exp .)
    RCOLCH          reduce using rule 49 (exp -> exp MINUS exp .)
    RBRACE          reduce using rule 49 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! TIMES           [ reduce using rule 49 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 49 (exp -> exp MINUS exp .) ]
  ! EXPO            [ reduce using rule 49 (exp -> exp MINUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 49 (exp -> exp MINUS exp .) ]
  ! NOT             [ reduce using rule 49 (exp -> exp MINUS exp .) ]
  ! TAG             [ reduce using rule 49 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! CONCAT          [ shift and go to state 92 ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 136

    (50) exp -> exp TIMES exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 50 (exp -> exp TIMES exp .)
    PLUS            reduce using rule 50 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 50 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 50 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 50 (exp -> exp TIMES exp .)
    PERCENTUAL      reduce using rule 50 (exp -> exp TIMES exp .)
    CONCAT          reduce using rule 50 (exp -> exp TIMES exp .)
    LT              reduce using rule 50 (exp -> exp TIMES exp .)
    LTEQUALS        reduce using rule 50 (exp -> exp TIMES exp .)
    GT              reduce using rule 50 (exp -> exp TIMES exp .)
    GTEQUALS        reduce using rule 50 (exp -> exp TIMES exp .)
    EQUALS          reduce using rule 50 (exp -> exp TIMES exp .)
    DIF             reduce using rule 50 (exp -> exp TIMES exp .)
    AND             reduce using rule 50 (exp -> exp TIMES exp .)
    OR              reduce using rule 50 (exp -> exp TIMES exp .)
    THEN            reduce using rule 50 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 50 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 50 (exp -> exp TIMES exp .)
    SEMICOLON       reduce using rule 50 (exp -> exp TIMES exp .)
    $end            reduce using rule 50 (exp -> exp TIMES exp .)
    END             reduce using rule 50 (exp -> exp TIMES exp .)
    UNTIL           reduce using rule 50 (exp -> exp TIMES exp .)
    RETURN          reduce using rule 50 (exp -> exp TIMES exp .)
    RCOLCH          reduce using rule 50 (exp -> exp TIMES exp .)
    RBRACE          reduce using rule 50 (exp -> exp TIMES exp .)
    EXPO            shift and go to state 90
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! EXPO            [ reduce using rule 50 (exp -> exp TIMES exp .) ]
  ! NOT             [ reduce using rule 50 (exp -> exp TIMES exp .) ]
  ! TAG             [ reduce using rule 50 (exp -> exp TIMES exp .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 88 ]
  ! DIVIDE          [ shift and go to state 89 ]
  ! PERCENTUAL      [ shift and go to state 91 ]
  ! CONCAT          [ shift and go to state 92 ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 137

    (51) exp -> exp DIVIDE exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 51 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 51 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 51 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 51 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 51 (exp -> exp DIVIDE exp .)
    PERCENTUAL      reduce using rule 51 (exp -> exp DIVIDE exp .)
    CONCAT          reduce using rule 51 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 51 (exp -> exp DIVIDE exp .)
    LTEQUALS        reduce using rule 51 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 51 (exp -> exp DIVIDE exp .)
    GTEQUALS        reduce using rule 51 (exp -> exp DIVIDE exp .)
    EQUALS          reduce using rule 51 (exp -> exp DIVIDE exp .)
    DIF             reduce using rule 51 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 51 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 51 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 51 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 51 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 51 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp DIVIDE exp .)
    $end            reduce using rule 51 (exp -> exp DIVIDE exp .)
    END             reduce using rule 51 (exp -> exp DIVIDE exp .)
    UNTIL           reduce using rule 51 (exp -> exp DIVIDE exp .)
    RETURN          reduce using rule 51 (exp -> exp DIVIDE exp .)
    RCOLCH          reduce using rule 51 (exp -> exp DIVIDE exp .)
    RBRACE          reduce using rule 51 (exp -> exp DIVIDE exp .)
    EXPO            shift and go to state 90
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! EXPO            [ reduce using rule 51 (exp -> exp DIVIDE exp .) ]
  ! NOT             [ reduce using rule 51 (exp -> exp DIVIDE exp .) ]
  ! TAG             [ reduce using rule 51 (exp -> exp DIVIDE exp .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 88 ]
  ! DIVIDE          [ shift and go to state 89 ]
  ! PERCENTUAL      [ shift and go to state 91 ]
  ! CONCAT          [ shift and go to state 92 ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 138

    (52) exp -> exp EXPO exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 52 (exp -> exp EXPO exp .)
    PLUS            reduce using rule 52 (exp -> exp EXPO exp .)
    MINUS           reduce using rule 52 (exp -> exp EXPO exp .)
    TIMES           reduce using rule 52 (exp -> exp EXPO exp .)
    DIVIDE          reduce using rule 52 (exp -> exp EXPO exp .)
    EXPO            reduce using rule 52 (exp -> exp EXPO exp .)
    PERCENTUAL      reduce using rule 52 (exp -> exp EXPO exp .)
    CONCAT          reduce using rule 52 (exp -> exp EXPO exp .)
    LT              reduce using rule 52 (exp -> exp EXPO exp .)
    LTEQUALS        reduce using rule 52 (exp -> exp EXPO exp .)
    GT              reduce using rule 52 (exp -> exp EXPO exp .)
    GTEQUALS        reduce using rule 52 (exp -> exp EXPO exp .)
    EQUALS          reduce using rule 52 (exp -> exp EXPO exp .)
    DIF             reduce using rule 52 (exp -> exp EXPO exp .)
    AND             reduce using rule 52 (exp -> exp EXPO exp .)
    OR              reduce using rule 52 (exp -> exp EXPO exp .)
    NOT             reduce using rule 52 (exp -> exp EXPO exp .)
    TAG             reduce using rule 52 (exp -> exp EXPO exp .)
    THEN            reduce using rule 52 (exp -> exp EXPO exp .)
    RPAREN          reduce using rule 52 (exp -> exp EXPO exp .)
    COMMA           reduce using rule 52 (exp -> exp EXPO exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp EXPO exp .)
    $end            reduce using rule 52 (exp -> exp EXPO exp .)
    END             reduce using rule 52 (exp -> exp EXPO exp .)
    UNTIL           reduce using rule 52 (exp -> exp EXPO exp .)
    RETURN          reduce using rule 52 (exp -> exp EXPO exp .)
    RCOLCH          reduce using rule 52 (exp -> exp EXPO exp .)
    RBRACE          reduce using rule 52 (exp -> exp EXPO exp .)

  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 88 ]
  ! DIVIDE          [ shift and go to state 89 ]
  ! EXPO            [ shift and go to state 90 ]
  ! PERCENTUAL      [ shift and go to state 91 ]
  ! CONCAT          [ shift and go to state 92 ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]
  ! NOT             [ shift and go to state 101 ]
  ! TAG             [ shift and go to state 102 ]

    op_unary                       shift and go to state 85

state 139

    (53) exp -> exp PERCENTUAL exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    PLUS            reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    MINUS           reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    TIMES           reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    DIVIDE          reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    PERCENTUAL      reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    CONCAT          reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    LT              reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    LTEQUALS        reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    GT              reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    GTEQUALS        reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    EQUALS          reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    DIF             reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    AND             reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    OR              reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    THEN            reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    RPAREN          reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    COMMA           reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    SEMICOLON       reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    $end            reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    END             reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    UNTIL           reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    RETURN          reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    RCOLCH          reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    RBRACE          reduce using rule 53 (exp -> exp PERCENTUAL exp .)
    EXPO            shift and go to state 90
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! EXPO            [ reduce using rule 53 (exp -> exp PERCENTUAL exp .) ]
  ! NOT             [ reduce using rule 53 (exp -> exp PERCENTUAL exp .) ]
  ! TAG             [ reduce using rule 53 (exp -> exp PERCENTUAL exp .) ]
  ! PLUS            [ shift and go to state 86 ]
  ! MINUS           [ shift and go to state 87 ]
  ! TIMES           [ shift and go to state 88 ]
  ! DIVIDE          [ shift and go to state 89 ]
  ! PERCENTUAL      [ shift and go to state 91 ]
  ! CONCAT          [ shift and go to state 92 ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 140

    (54) exp -> exp CONCAT exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 54 (exp -> exp CONCAT exp .)
    CONCAT          reduce using rule 54 (exp -> exp CONCAT exp .)
    LT              reduce using rule 54 (exp -> exp CONCAT exp .)
    LTEQUALS        reduce using rule 54 (exp -> exp CONCAT exp .)
    GT              reduce using rule 54 (exp -> exp CONCAT exp .)
    GTEQUALS        reduce using rule 54 (exp -> exp CONCAT exp .)
    EQUALS          reduce using rule 54 (exp -> exp CONCAT exp .)
    DIF             reduce using rule 54 (exp -> exp CONCAT exp .)
    AND             reduce using rule 54 (exp -> exp CONCAT exp .)
    OR              reduce using rule 54 (exp -> exp CONCAT exp .)
    THEN            reduce using rule 54 (exp -> exp CONCAT exp .)
    RPAREN          reduce using rule 54 (exp -> exp CONCAT exp .)
    COMMA           reduce using rule 54 (exp -> exp CONCAT exp .)
    SEMICOLON       reduce using rule 54 (exp -> exp CONCAT exp .)
    $end            reduce using rule 54 (exp -> exp CONCAT exp .)
    END             reduce using rule 54 (exp -> exp CONCAT exp .)
    UNTIL           reduce using rule 54 (exp -> exp CONCAT exp .)
    RETURN          reduce using rule 54 (exp -> exp CONCAT exp .)
    RCOLCH          reduce using rule 54 (exp -> exp CONCAT exp .)
    RBRACE          reduce using rule 54 (exp -> exp CONCAT exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! PLUS            [ reduce using rule 54 (exp -> exp CONCAT exp .) ]
  ! MINUS           [ reduce using rule 54 (exp -> exp CONCAT exp .) ]
  ! TIMES           [ reduce using rule 54 (exp -> exp CONCAT exp .) ]
  ! DIVIDE          [ reduce using rule 54 (exp -> exp CONCAT exp .) ]
  ! EXPO            [ reduce using rule 54 (exp -> exp CONCAT exp .) ]
  ! PERCENTUAL      [ reduce using rule 54 (exp -> exp CONCAT exp .) ]
  ! NOT             [ reduce using rule 54 (exp -> exp CONCAT exp .) ]
  ! TAG             [ reduce using rule 54 (exp -> exp CONCAT exp .) ]
  ! CONCAT          [ shift and go to state 92 ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 141

    (55) exp -> exp LT exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 55 (exp -> exp LT exp .)
    LT              reduce using rule 55 (exp -> exp LT exp .)
    LTEQUALS        reduce using rule 55 (exp -> exp LT exp .)
    GT              reduce using rule 55 (exp -> exp LT exp .)
    GTEQUALS        reduce using rule 55 (exp -> exp LT exp .)
    EQUALS          reduce using rule 55 (exp -> exp LT exp .)
    DIF             reduce using rule 55 (exp -> exp LT exp .)
    AND             reduce using rule 55 (exp -> exp LT exp .)
    OR              reduce using rule 55 (exp -> exp LT exp .)
    THEN            reduce using rule 55 (exp -> exp LT exp .)
    RPAREN          reduce using rule 55 (exp -> exp LT exp .)
    COMMA           reduce using rule 55 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 55 (exp -> exp LT exp .)
    $end            reduce using rule 55 (exp -> exp LT exp .)
    END             reduce using rule 55 (exp -> exp LT exp .)
    UNTIL           reduce using rule 55 (exp -> exp LT exp .)
    RETURN          reduce using rule 55 (exp -> exp LT exp .)
    RCOLCH          reduce using rule 55 (exp -> exp LT exp .)
    RBRACE          reduce using rule 55 (exp -> exp LT exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! PLUS            [ reduce using rule 55 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 55 (exp -> exp LT exp .) ]
  ! TIMES           [ reduce using rule 55 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 55 (exp -> exp LT exp .) ]
  ! EXPO            [ reduce using rule 55 (exp -> exp LT exp .) ]
  ! PERCENTUAL      [ reduce using rule 55 (exp -> exp LT exp .) ]
  ! CONCAT          [ reduce using rule 55 (exp -> exp LT exp .) ]
  ! NOT             [ reduce using rule 55 (exp -> exp LT exp .) ]
  ! TAG             [ reduce using rule 55 (exp -> exp LT exp .) ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 142

    (56) exp -> exp LTEQUALS exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 56 (exp -> exp LTEQUALS exp .)
    LT              reduce using rule 56 (exp -> exp LTEQUALS exp .)
    LTEQUALS        reduce using rule 56 (exp -> exp LTEQUALS exp .)
    GT              reduce using rule 56 (exp -> exp LTEQUALS exp .)
    GTEQUALS        reduce using rule 56 (exp -> exp LTEQUALS exp .)
    EQUALS          reduce using rule 56 (exp -> exp LTEQUALS exp .)
    DIF             reduce using rule 56 (exp -> exp LTEQUALS exp .)
    AND             reduce using rule 56 (exp -> exp LTEQUALS exp .)
    OR              reduce using rule 56 (exp -> exp LTEQUALS exp .)
    THEN            reduce using rule 56 (exp -> exp LTEQUALS exp .)
    RPAREN          reduce using rule 56 (exp -> exp LTEQUALS exp .)
    COMMA           reduce using rule 56 (exp -> exp LTEQUALS exp .)
    SEMICOLON       reduce using rule 56 (exp -> exp LTEQUALS exp .)
    $end            reduce using rule 56 (exp -> exp LTEQUALS exp .)
    END             reduce using rule 56 (exp -> exp LTEQUALS exp .)
    UNTIL           reduce using rule 56 (exp -> exp LTEQUALS exp .)
    RETURN          reduce using rule 56 (exp -> exp LTEQUALS exp .)
    RCOLCH          reduce using rule 56 (exp -> exp LTEQUALS exp .)
    RBRACE          reduce using rule 56 (exp -> exp LTEQUALS exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! PLUS            [ reduce using rule 56 (exp -> exp LTEQUALS exp .) ]
  ! MINUS           [ reduce using rule 56 (exp -> exp LTEQUALS exp .) ]
  ! TIMES           [ reduce using rule 56 (exp -> exp LTEQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 56 (exp -> exp LTEQUALS exp .) ]
  ! EXPO            [ reduce using rule 56 (exp -> exp LTEQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 56 (exp -> exp LTEQUALS exp .) ]
  ! CONCAT          [ reduce using rule 56 (exp -> exp LTEQUALS exp .) ]
  ! NOT             [ reduce using rule 56 (exp -> exp LTEQUALS exp .) ]
  ! TAG             [ reduce using rule 56 (exp -> exp LTEQUALS exp .) ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 143

    (57) exp -> exp GT exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 57 (exp -> exp GT exp .)
    LT              reduce using rule 57 (exp -> exp GT exp .)
    LTEQUALS        reduce using rule 57 (exp -> exp GT exp .)
    GT              reduce using rule 57 (exp -> exp GT exp .)
    GTEQUALS        reduce using rule 57 (exp -> exp GT exp .)
    EQUALS          reduce using rule 57 (exp -> exp GT exp .)
    DIF             reduce using rule 57 (exp -> exp GT exp .)
    AND             reduce using rule 57 (exp -> exp GT exp .)
    OR              reduce using rule 57 (exp -> exp GT exp .)
    THEN            reduce using rule 57 (exp -> exp GT exp .)
    RPAREN          reduce using rule 57 (exp -> exp GT exp .)
    COMMA           reduce using rule 57 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 57 (exp -> exp GT exp .)
    $end            reduce using rule 57 (exp -> exp GT exp .)
    END             reduce using rule 57 (exp -> exp GT exp .)
    UNTIL           reduce using rule 57 (exp -> exp GT exp .)
    RETURN          reduce using rule 57 (exp -> exp GT exp .)
    RCOLCH          reduce using rule 57 (exp -> exp GT exp .)
    RBRACE          reduce using rule 57 (exp -> exp GT exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! PLUS            [ reduce using rule 57 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 57 (exp -> exp GT exp .) ]
  ! TIMES           [ reduce using rule 57 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 57 (exp -> exp GT exp .) ]
  ! EXPO            [ reduce using rule 57 (exp -> exp GT exp .) ]
  ! PERCENTUAL      [ reduce using rule 57 (exp -> exp GT exp .) ]
  ! CONCAT          [ reduce using rule 57 (exp -> exp GT exp .) ]
  ! NOT             [ reduce using rule 57 (exp -> exp GT exp .) ]
  ! TAG             [ reduce using rule 57 (exp -> exp GT exp .) ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 144

    (58) exp -> exp GTEQUALS exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 58 (exp -> exp GTEQUALS exp .)
    LT              reduce using rule 58 (exp -> exp GTEQUALS exp .)
    LTEQUALS        reduce using rule 58 (exp -> exp GTEQUALS exp .)
    GT              reduce using rule 58 (exp -> exp GTEQUALS exp .)
    GTEQUALS        reduce using rule 58 (exp -> exp GTEQUALS exp .)
    EQUALS          reduce using rule 58 (exp -> exp GTEQUALS exp .)
    DIF             reduce using rule 58 (exp -> exp GTEQUALS exp .)
    AND             reduce using rule 58 (exp -> exp GTEQUALS exp .)
    OR              reduce using rule 58 (exp -> exp GTEQUALS exp .)
    THEN            reduce using rule 58 (exp -> exp GTEQUALS exp .)
    RPAREN          reduce using rule 58 (exp -> exp GTEQUALS exp .)
    COMMA           reduce using rule 58 (exp -> exp GTEQUALS exp .)
    SEMICOLON       reduce using rule 58 (exp -> exp GTEQUALS exp .)
    $end            reduce using rule 58 (exp -> exp GTEQUALS exp .)
    END             reduce using rule 58 (exp -> exp GTEQUALS exp .)
    UNTIL           reduce using rule 58 (exp -> exp GTEQUALS exp .)
    RETURN          reduce using rule 58 (exp -> exp GTEQUALS exp .)
    RCOLCH          reduce using rule 58 (exp -> exp GTEQUALS exp .)
    RBRACE          reduce using rule 58 (exp -> exp GTEQUALS exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! PLUS            [ reduce using rule 58 (exp -> exp GTEQUALS exp .) ]
  ! MINUS           [ reduce using rule 58 (exp -> exp GTEQUALS exp .) ]
  ! TIMES           [ reduce using rule 58 (exp -> exp GTEQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 58 (exp -> exp GTEQUALS exp .) ]
  ! EXPO            [ reduce using rule 58 (exp -> exp GTEQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 58 (exp -> exp GTEQUALS exp .) ]
  ! CONCAT          [ reduce using rule 58 (exp -> exp GTEQUALS exp .) ]
  ! NOT             [ reduce using rule 58 (exp -> exp GTEQUALS exp .) ]
  ! TAG             [ reduce using rule 58 (exp -> exp GTEQUALS exp .) ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 145

    (59) exp -> exp EQUALS exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 59 (exp -> exp EQUALS exp .)
    LT              reduce using rule 59 (exp -> exp EQUALS exp .)
    LTEQUALS        reduce using rule 59 (exp -> exp EQUALS exp .)
    GT              reduce using rule 59 (exp -> exp EQUALS exp .)
    GTEQUALS        reduce using rule 59 (exp -> exp EQUALS exp .)
    EQUALS          reduce using rule 59 (exp -> exp EQUALS exp .)
    DIF             reduce using rule 59 (exp -> exp EQUALS exp .)
    AND             reduce using rule 59 (exp -> exp EQUALS exp .)
    OR              reduce using rule 59 (exp -> exp EQUALS exp .)
    THEN            reduce using rule 59 (exp -> exp EQUALS exp .)
    RPAREN          reduce using rule 59 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 59 (exp -> exp EQUALS exp .)
    SEMICOLON       reduce using rule 59 (exp -> exp EQUALS exp .)
    $end            reduce using rule 59 (exp -> exp EQUALS exp .)
    END             reduce using rule 59 (exp -> exp EQUALS exp .)
    UNTIL           reduce using rule 59 (exp -> exp EQUALS exp .)
    RETURN          reduce using rule 59 (exp -> exp EQUALS exp .)
    RCOLCH          reduce using rule 59 (exp -> exp EQUALS exp .)
    RBRACE          reduce using rule 59 (exp -> exp EQUALS exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! PLUS            [ reduce using rule 59 (exp -> exp EQUALS exp .) ]
  ! MINUS           [ reduce using rule 59 (exp -> exp EQUALS exp .) ]
  ! TIMES           [ reduce using rule 59 (exp -> exp EQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 59 (exp -> exp EQUALS exp .) ]
  ! EXPO            [ reduce using rule 59 (exp -> exp EQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 59 (exp -> exp EQUALS exp .) ]
  ! CONCAT          [ reduce using rule 59 (exp -> exp EQUALS exp .) ]
  ! NOT             [ reduce using rule 59 (exp -> exp EQUALS exp .) ]
  ! TAG             [ reduce using rule 59 (exp -> exp EQUALS exp .) ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 146

    (60) exp -> exp DIF exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 60 (exp -> exp DIF exp .)
    LT              reduce using rule 60 (exp -> exp DIF exp .)
    LTEQUALS        reduce using rule 60 (exp -> exp DIF exp .)
    GT              reduce using rule 60 (exp -> exp DIF exp .)
    GTEQUALS        reduce using rule 60 (exp -> exp DIF exp .)
    EQUALS          reduce using rule 60 (exp -> exp DIF exp .)
    DIF             reduce using rule 60 (exp -> exp DIF exp .)
    AND             reduce using rule 60 (exp -> exp DIF exp .)
    OR              reduce using rule 60 (exp -> exp DIF exp .)
    THEN            reduce using rule 60 (exp -> exp DIF exp .)
    RPAREN          reduce using rule 60 (exp -> exp DIF exp .)
    COMMA           reduce using rule 60 (exp -> exp DIF exp .)
    SEMICOLON       reduce using rule 60 (exp -> exp DIF exp .)
    $end            reduce using rule 60 (exp -> exp DIF exp .)
    END             reduce using rule 60 (exp -> exp DIF exp .)
    UNTIL           reduce using rule 60 (exp -> exp DIF exp .)
    RETURN          reduce using rule 60 (exp -> exp DIF exp .)
    RCOLCH          reduce using rule 60 (exp -> exp DIF exp .)
    RBRACE          reduce using rule 60 (exp -> exp DIF exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! PLUS            [ reduce using rule 60 (exp -> exp DIF exp .) ]
  ! MINUS           [ reduce using rule 60 (exp -> exp DIF exp .) ]
  ! TIMES           [ reduce using rule 60 (exp -> exp DIF exp .) ]
  ! DIVIDE          [ reduce using rule 60 (exp -> exp DIF exp .) ]
  ! EXPO            [ reduce using rule 60 (exp -> exp DIF exp .) ]
  ! PERCENTUAL      [ reduce using rule 60 (exp -> exp DIF exp .) ]
  ! CONCAT          [ reduce using rule 60 (exp -> exp DIF exp .) ]
  ! NOT             [ reduce using rule 60 (exp -> exp DIF exp .) ]
  ! TAG             [ reduce using rule 60 (exp -> exp DIF exp .) ]
  ! LT              [ shift and go to state 93 ]
  ! LTEQUALS        [ shift and go to state 94 ]
  ! GT              [ shift and go to state 95 ]
  ! GTEQUALS        [ shift and go to state 96 ]
  ! EQUALS          [ shift and go to state 97 ]
  ! DIF             [ shift and go to state 98 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 147

    (61) exp -> exp AND exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 61 (exp -> exp AND exp .)
    AND             reduce using rule 61 (exp -> exp AND exp .)
    OR              reduce using rule 61 (exp -> exp AND exp .)
    THEN            reduce using rule 61 (exp -> exp AND exp .)
    RPAREN          reduce using rule 61 (exp -> exp AND exp .)
    COMMA           reduce using rule 61 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 61 (exp -> exp AND exp .)
    $end            reduce using rule 61 (exp -> exp AND exp .)
    END             reduce using rule 61 (exp -> exp AND exp .)
    UNTIL           reduce using rule 61 (exp -> exp AND exp .)
    RETURN          reduce using rule 61 (exp -> exp AND exp .)
    RCOLCH          reduce using rule 61 (exp -> exp AND exp .)
    RBRACE          reduce using rule 61 (exp -> exp AND exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! PLUS            [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! TIMES           [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! EXPO            [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! PERCENTUAL      [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! CONCAT          [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! LTEQUALS        [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! GTEQUALS        [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! EQUALS          [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! DIF             [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! NOT             [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! TAG             [ reduce using rule 61 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 148

    (62) exp -> exp OR exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              reduce using rule 62 (exp -> exp OR exp .)
    OR              reduce using rule 62 (exp -> exp OR exp .)
    THEN            reduce using rule 62 (exp -> exp OR exp .)
    RPAREN          reduce using rule 62 (exp -> exp OR exp .)
    COMMA           reduce using rule 62 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 62 (exp -> exp OR exp .)
    $end            reduce using rule 62 (exp -> exp OR exp .)
    END             reduce using rule 62 (exp -> exp OR exp .)
    UNTIL           reduce using rule 62 (exp -> exp OR exp .)
    RETURN          reduce using rule 62 (exp -> exp OR exp .)
    RCOLCH          reduce using rule 62 (exp -> exp OR exp .)
    RBRACE          reduce using rule 62 (exp -> exp OR exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    NOT             shift and go to state 101
    TAG             shift and go to state 102

  ! PLUS            [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! TIMES           [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! EXPO            [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! PERCENTUAL      [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! CONCAT          [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! LTEQUALS        [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! GTEQUALS        [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! EQUALS          [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! DIF             [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! NOT             [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! TAG             [ reduce using rule 62 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 100 ]

    op_unary                       shift and go to state 85

state 149

    (65) exp_prefix -> LPAREN exp RPAREN .

    COLON           reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    DO              reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    TIMES           reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    EXPO            reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    PERCENTUAL      reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    CONCAT          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    LT              reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    LTEQUALS        reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    GT              reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    GTEQUALS        reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    EQUALS          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    DIF             reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    AND             reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    OR              reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    NOT             reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    TAG             reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    THEN            reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    $end            reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    END             reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    UNTIL           reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    RCOLCH          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    RBRACE          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)


state 150

    (100) struct_repeat -> REPEAT block UNTIL exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    RETURN          reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    $end            reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    END             reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    UNTIL           reduce using rule 100 (struct_repeat -> REPEAT block UNTIL exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 151

    (93) if -> IF exp THEN block . END

    END             shift and go to state 172


state 152

    (94) if -> IF exp THEN else .

    RETURN          reduce using rule 94 (if -> IF exp THEN else .)
    $end            reduce using rule 94 (if -> IF exp THEN else .)
    END             reduce using rule 94 (if -> IF exp THEN else .)
    UNTIL           reduce using rule 94 (if -> IF exp THEN else .)


state 153

    (95) else -> ELSE . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (70) def_function -> . function
    (71) def_function -> . local_function
    (87) local_var -> . LOCAL list_names ATRIB list_exps
    (88) local_var -> . LOCAL NAME ATRIB exp
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 21
    REPEAT          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    LOCAL           shift and go to state 27
    NAME            shift and go to state 19
    VAR             shift and go to state 29
    LPAREN          shift and go to state 30
    FUNCTION        shift and go to state 31

    block                          shift and go to state 173
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    var                            shift and go to state 17
    exp_prefix                     shift and go to state 18
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    prefix_exp                     shift and go to state 28

state 154

    (97) struct_for -> FOR NAME ATRIB exp . COMMA exp DO block END
    (98) struct_for -> FOR NAME ATRIB exp . COMMA exp COMMA exp DO block END
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    COMMA           shift and go to state 174
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 155

    (34) list_names -> NAME COMMA list_names .

    IN              reduce using rule 34 (list_names -> NAME COMMA list_names .)
    ATRIB           reduce using rule 34 (list_names -> NAME COMMA list_names .)
    COMMA           reduce using rule 34 (list_names -> NAME COMMA list_names .)


state 156

    (99) struct_for_in -> FOR list_names IN list_exps . DO block END

    DO              shift and go to state 175


state 157

    (87) local_var -> LOCAL list_names ATRIB list_exps .

    RETURN          reduce using rule 87 (local_var -> LOCAL list_names ATRIB list_exps .)
    $end            reduce using rule 87 (local_var -> LOCAL list_names ATRIB list_exps .)
    END             reduce using rule 87 (local_var -> LOCAL list_names ATRIB list_exps .)
    UNTIL           reduce using rule 87 (local_var -> LOCAL list_names ATRIB list_exps .)


state 158

    (88) local_var -> LOCAL NAME ATRIB exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    RETURN          reduce using rule 88 (local_var -> LOCAL NAME ATRIB exp .)
    $end            reduce using rule 88 (local_var -> LOCAL NAME ATRIB exp .)
    END             reduce using rule 88 (local_var -> LOCAL NAME ATRIB exp .)
    UNTIL           reduce using rule 88 (local_var -> LOCAL NAME ATRIB exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 159

    (101) local_function -> LOCAL FUNCTION name_function body_function .

    RETURN          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    $end            reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    END             reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    DO              reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    PLUS            reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    MINUS           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    TIMES           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    DIVIDE          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    EXPO            reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    PERCENTUAL      reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    CONCAT          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    LT              reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    LTEQUALS        reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    GT              reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    GTEQUALS        reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    EQUALS          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    DIF             reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    AND             reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    OR              reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    NOT             reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    TAG             reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    UNTIL           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    THEN            reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    RPAREN          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    COMMA           reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    SEMICOLON       reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    RCOLCH          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)
    RBRACE          reduce using rule 101 (local_function -> LOCAL FUNCTION name_function body_function .)


state 160

    (24) name_function -> NAME DOT . NAME

    NAME            shift and go to state 176


state 161

    (25) name_function -> NAME COLON . NAME

    NAME            shift and go to state 177


state 162

    (29) var -> prefix_exp LCOLCH exp RCOLCH .

    COMMA           reduce using rule 29 (var -> prefix_exp LCOLCH exp RCOLCH .)
    ATRIB           reduce using rule 29 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LCOLCH          reduce using rule 29 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DOT             reduce using rule 29 (var -> prefix_exp LCOLCH exp RCOLCH .)


state 163

    (72) body_function -> LPAREN list_pars RPAREN . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (70) def_function -> . function
    (71) def_function -> . local_function
    (87) local_var -> . LOCAL list_names ATRIB list_exps
    (88) local_var -> . LOCAL NAME ATRIB exp
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 21
    REPEAT          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    LOCAL           shift and go to state 27
    NAME            shift and go to state 19
    VAR             shift and go to state 29
    LPAREN          shift and go to state 30
    FUNCTION        shift and go to state 31

    block                          shift and go to state 178
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    var                            shift and go to state 17
    exp_prefix                     shift and go to state 18
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    prefix_exp                     shift and go to state 28

state 164

    (73) list_pars -> list_names COMMA . VARARGS

    VARARGS         shift and go to state 179


state 165

    (36) list_exps -> exp COMMA list_exps .

    SEMICOLON       reduce using rule 36 (list_exps -> exp COMMA list_exps .)
    $end            reduce using rule 36 (list_exps -> exp COMMA list_exps .)
    END             reduce using rule 36 (list_exps -> exp COMMA list_exps .)
    UNTIL           reduce using rule 36 (list_exps -> exp COMMA list_exps .)
    RETURN          reduce using rule 36 (list_exps -> exp COMMA list_exps .)
    RPAREN          reduce using rule 36 (list_exps -> exp COMMA list_exps .)
    DO              reduce using rule 36 (list_exps -> exp COMMA list_exps .)


state 166

    (33) prefix_exp -> LPAREN exp RPAREN .
    (65) exp_prefix -> LPAREN exp RPAREN .

    LCOLCH          reduce using rule 33 (prefix_exp -> LPAREN exp RPAREN .)
    DOT             reduce using rule 33 (prefix_exp -> LPAREN exp RPAREN .)
    COLON           reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)
    LBRACE          reduce using rule 65 (exp_prefix -> LPAREN exp RPAREN .)


state 167

    (78) list_fields -> field separator_fields list_fields .

    RBRACE          reduce using rule 78 (list_fields -> field separator_fields list_fields .)


state 168

    (80) list_fields -> field_empty separator_fields list_fields .

    RBRACE          reduce using rule 80 (list_fields -> field_empty separator_fields list_fields .)


state 169

    (83) field -> LCOLCH exp RCOLCH . ATRIB exp
    (81) field_empty -> LCOLCH exp RCOLCH .

    ATRIB           shift and go to state 180
    COMMA           reduce using rule 81 (field_empty -> LCOLCH exp RCOLCH .)
    SEMICOLON       reduce using rule 81 (field_empty -> LCOLCH exp RCOLCH .)
    RBRACE          reduce using rule 81 (field_empty -> LCOLCH exp RCOLCH .)


state 170

    (84) field -> NAME ATRIB exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    COMMA           reduce using rule 84 (field -> NAME ATRIB exp .)
    SEMICOLON       reduce using rule 84 (field -> NAME ATRIB exp .)
    RBRACE          reduce using rule 84 (field -> NAME ATRIB exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 171

    (96) struct_while -> WHILE exp DO block END .

    RETURN          reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    $end            reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    END             reduce using rule 96 (struct_while -> WHILE exp DO block END .)
    UNTIL           reduce using rule 96 (struct_while -> WHILE exp DO block END .)


state 172

    (93) if -> IF exp THEN block END .

    RETURN          reduce using rule 93 (if -> IF exp THEN block END .)
    $end            reduce using rule 93 (if -> IF exp THEN block END .)
    END             reduce using rule 93 (if -> IF exp THEN block END .)
    UNTIL           reduce using rule 93 (if -> IF exp THEN block END .)


state 173

    (95) else -> ELSE block . END

    END             shift and go to state 181


state 174

    (97) struct_for -> FOR NAME ATRIB exp COMMA . exp DO block END
    (98) struct_for -> FOR NAME ATRIB exp COMMA . exp COMMA exp DO block END
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 182
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 175

    (99) struct_for_in -> FOR list_names IN list_exps DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (70) def_function -> . function
    (71) def_function -> . local_function
    (87) local_var -> . LOCAL list_names ATRIB list_exps
    (88) local_var -> . LOCAL NAME ATRIB exp
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 21
    REPEAT          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    LOCAL           shift and go to state 27
    NAME            shift and go to state 19
    VAR             shift and go to state 29
    LPAREN          shift and go to state 30
    FUNCTION        shift and go to state 31

    block                          shift and go to state 183
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    var                            shift and go to state 17
    exp_prefix                     shift and go to state 18
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    prefix_exp                     shift and go to state 28

state 176

    (24) name_function -> NAME DOT NAME .

    LPAREN          reduce using rule 24 (name_function -> NAME DOT NAME .)


state 177

    (25) name_function -> NAME COLON NAME .

    LPAREN          reduce using rule 25 (name_function -> NAME COLON NAME .)


state 178

    (72) body_function -> LPAREN list_pars RPAREN block . END

    END             shift and go to state 184


state 179

    (73) list_pars -> list_names COMMA VARARGS .

    RPAREN          reduce using rule 73 (list_pars -> list_names COMMA VARARGS .)


state 180

    (83) field -> LCOLCH exp RCOLCH ATRIB . exp
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 185
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 181

    (95) else -> ELSE block END .

    RETURN          reduce using rule 95 (else -> ELSE block END .)
    $end            reduce using rule 95 (else -> ELSE block END .)
    END             reduce using rule 95 (else -> ELSE block END .)
    UNTIL           reduce using rule 95 (else -> ELSE block END .)


state 182

    (97) struct_for -> FOR NAME ATRIB exp COMMA exp . DO block END
    (98) struct_for -> FOR NAME ATRIB exp COMMA exp . COMMA exp DO block END
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              shift and go to state 187
    COMMA           shift and go to state 186
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 183

    (99) struct_for_in -> FOR list_names IN list_exps DO block . END

    END             shift and go to state 188


state 184

    (72) body_function -> LPAREN list_pars RPAREN block END .

    RETURN          reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    $end            reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    END             reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    DO              reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    PLUS            reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    MINUS           reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    TIMES           reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    DIVIDE          reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    EXPO            reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    PERCENTUAL      reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    CONCAT          reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    LT              reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    LTEQUALS        reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    GT              reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    GTEQUALS        reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    EQUALS          reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    DIF             reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    AND             reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    OR              reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    NOT             reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    TAG             reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    UNTIL           reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    THEN            reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    RPAREN          reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    COMMA           reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    SEMICOLON       reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    RCOLCH          reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)
    RBRACE          reduce using rule 72 (body_function -> LPAREN list_pars RPAREN block END .)


state 185

    (83) field -> LCOLCH exp RCOLCH ATRIB exp .
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    COMMA           reduce using rule 83 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    SEMICOLON       reduce using rule 83 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    RBRACE          reduce using rule 83 (field -> LCOLCH exp RCOLCH ATRIB exp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 186

    (98) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA . exp DO block END
    (38) exp -> . NIL
    (39) exp -> . FALSE
    (40) exp -> . TRUE
    (41) exp -> . NUMBER
    (42) exp -> . STRING
    (43) exp -> . VARARGS
    (44) exp -> . def_function
    (45) exp -> . exp_prefix
    (46) exp -> . construct_table
    (47) exp -> . exp op_unary exp
    (48) exp -> . exp PLUS exp
    (49) exp -> . exp MINUS exp
    (50) exp -> . exp TIMES exp
    (51) exp -> . exp DIVIDE exp
    (52) exp -> . exp EXPO exp
    (53) exp -> . exp PERCENTUAL exp
    (54) exp -> . exp CONCAT exp
    (55) exp -> . exp LT exp
    (56) exp -> . exp LTEQUALS exp
    (57) exp -> . exp GT exp
    (58) exp -> . exp GTEQUALS exp
    (59) exp -> . exp EQUALS exp
    (60) exp -> . exp DIF exp
    (61) exp -> . exp AND exp
    (62) exp -> . exp OR exp
    (70) def_function -> . function
    (71) def_function -> . local_function
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (75) construct_table -> . LBRACE list_fields RBRACE
    (76) construct_table -> . LBRACE RBRACE
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args

    NIL             shift and go to state 44
    FALSE           shift and go to state 45
    TRUE            shift and go to state 46
    NUMBER          shift and go to state 47
    STRING          shift and go to state 48
    VARARGS         shift and go to state 49
    VAR             shift and go to state 29
    LPAREN          shift and go to state 54
    LBRACE          shift and go to state 41
    FUNCTION        shift and go to state 31
    LOCAL           shift and go to state 55

    exp                            shift and go to state 189
    def_function                   shift and go to state 50
    exp_prefix                     shift and go to state 51
    construct_table                shift and go to state 52
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    call_function                  shift and go to state 53

state 187

    (97) struct_for -> FOR NAME ATRIB exp COMMA exp DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (70) def_function -> . function
    (71) def_function -> . local_function
    (87) local_var -> . LOCAL list_names ATRIB list_exps
    (88) local_var -> . LOCAL NAME ATRIB exp
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 21
    REPEAT          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    LOCAL           shift and go to state 27
    NAME            shift and go to state 19
    VAR             shift and go to state 29
    LPAREN          shift and go to state 30
    FUNCTION        shift and go to state 31

    block                          shift and go to state 190
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    var                            shift and go to state 17
    exp_prefix                     shift and go to state 18
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    prefix_exp                     shift and go to state 28

state 188

    (99) struct_for_in -> FOR list_names IN list_exps DO block END .

    RETURN          reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    $end            reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    END             reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    UNTIL           reduce using rule 99 (struct_for_in -> FOR list_names IN list_exps DO block END .)


state 189

    (98) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp . DO block END
    (47) exp -> exp . op_unary exp
    (48) exp -> exp . PLUS exp
    (49) exp -> exp . MINUS exp
    (50) exp -> exp . TIMES exp
    (51) exp -> exp . DIVIDE exp
    (52) exp -> exp . EXPO exp
    (53) exp -> exp . PERCENTUAL exp
    (54) exp -> exp . CONCAT exp
    (55) exp -> exp . LT exp
    (56) exp -> exp . LTEQUALS exp
    (57) exp -> exp . GT exp
    (58) exp -> exp . GTEQUALS exp
    (59) exp -> exp . EQUALS exp
    (60) exp -> exp . DIF exp
    (61) exp -> exp . AND exp
    (62) exp -> exp . OR exp
    (89) op_unary -> . MINUS
    (90) op_unary -> . NOT
    (91) op_unary -> . TAG

    DO              shift and go to state 191
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    TIMES           shift and go to state 88
    DIVIDE          shift and go to state 89
    EXPO            shift and go to state 90
    PERCENTUAL      shift and go to state 91
    CONCAT          shift and go to state 92
    LT              shift and go to state 93
    LTEQUALS        shift and go to state 94
    GT              shift and go to state 95
    GTEQUALS        shift and go to state 96
    EQUALS          shift and go to state 97
    DIF             shift and go to state 98
    AND             shift and go to state 99
    OR              shift and go to state 100
    NOT             shift and go to state 101
    TAG             shift and go to state 102

    op_unary                       shift and go to state 85

state 190

    (97) struct_for -> FOR NAME ATRIB exp COMMA exp DO block . END

    END             shift and go to state 192


state 191

    (98) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO . block END
    (2) block -> . command
    (3) block -> . command command_ret
    (4) command -> . SEMICOLON
    (5) command -> . list_vars ATRIB list_exps
    (6) command -> . call_function
    (7) command -> . rotulo
    (8) command -> . BREAK
    (9) command -> . DO block END
    (10) command -> . struct_while
    (11) command -> . struct_repeat
    (12) command -> . if
    (13) command -> . struct_for
    (14) command -> . struct_for_in
    (15) command -> . def_function
    (16) command -> . local_var
    (26) list_vars -> . var
    (27) list_vars -> . var COMMA list_vars
    (66) call_function -> . exp_prefix args
    (67) call_function -> . exp_prefix COLON NAME args
    (22) rotulo -> . DUALCOLON NAME DUALCOLON
    (96) struct_while -> . WHILE exp DO block END
    (100) struct_repeat -> . REPEAT block UNTIL exp
    (93) if -> . IF exp THEN block END
    (94) if -> . IF exp THEN else
    (97) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (98) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (99) struct_for_in -> . FOR list_names IN list_exps DO block END
    (70) def_function -> . function
    (71) def_function -> . local_function
    (87) local_var -> . LOCAL list_names ATRIB list_exps
    (88) local_var -> . LOCAL NAME ATRIB exp
    (28) var -> . NAME
    (29) var -> . prefix_exp LCOLCH exp RCOLCH
    (30) var -> . prefix_exp DOT NAME
    (63) exp_prefix -> . VAR
    (64) exp_prefix -> . call_function
    (65) exp_prefix -> . LPAREN exp RPAREN
    (92) function -> . FUNCTION body_function
    (101) local_function -> . LOCAL FUNCTION name_function body_function
    (31) prefix_exp -> . var
    (32) prefix_exp -> . call_function
    (33) prefix_exp -> . LPAREN exp RPAREN

    SEMICOLON       shift and go to state 4
    BREAK           shift and go to state 8
    DO              shift and go to state 9
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 21
    REPEAT          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    LOCAL           shift and go to state 27
    NAME            shift and go to state 19
    VAR             shift and go to state 29
    LPAREN          shift and go to state 30
    FUNCTION        shift and go to state 31

    block                          shift and go to state 193
    command                        shift and go to state 3
    list_vars                      shift and go to state 5
    call_function                  shift and go to state 6
    rotulo                         shift and go to state 7
    struct_while                   shift and go to state 10
    struct_repeat                  shift and go to state 11
    if                             shift and go to state 12
    struct_for                     shift and go to state 13
    struct_for_in                  shift and go to state 14
    def_function                   shift and go to state 15
    local_var                      shift and go to state 16
    var                            shift and go to state 17
    exp_prefix                     shift and go to state 18
    function                       shift and go to state 25
    local_function                 shift and go to state 26
    prefix_exp                     shift and go to state 28

state 192

    (97) struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .

    RETURN          reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    $end            reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    END             reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    UNTIL           reduce using rule 97 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)


state 193

    (98) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block . END

    END             shift and go to state 194


state 194

    (98) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .

    RETURN          reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    $end            reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    END             reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    UNTIL           reduce using rule 98 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ATRIB in state 61 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 133 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 133 resolved as shift
WARNING: shift/reduce conflict for EXPO in state 133 resolved as shift
WARNING: shift/reduce conflict for PERCENTUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for CONCAT in state 133 resolved as shift
WARNING: shift/reduce conflict for LT in state 133 resolved as shift
WARNING: shift/reduce conflict for LTEQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for GT in state 133 resolved as shift
WARNING: shift/reduce conflict for GTEQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 133 resolved as shift
WARNING: shift/reduce conflict for DIF in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for NOT in state 133 resolved as shift
WARNING: shift/reduce conflict for TAG in state 133 resolved as shift
