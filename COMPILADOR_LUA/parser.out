Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    LBRACE
    RBRACE

Grammar

Rule 0     S' -> program
Rule 1     program -> block
Rule 2     program -> function
Rule 3     program -> function program
Rule 4     block -> command
Rule 5     block -> command block
Rule 6     command -> list_vars ATRIB list_exps
Rule 7     command -> call_function
Rule 8     command -> rotulo
Rule 9     command -> BREAK
Rule 10    command -> DO block END
Rule 11    command -> struct_while
Rule 12    command -> struct_repeat
Rule 13    command -> if
Rule 14    command -> struct_for
Rule 15    command -> struct_for_in
Rule 16    command -> LOCAL list_vars ATRIB list_exps
Rule 17    command -> command_ret
Rule 18    command_ret -> RETURN SEMICOLON
Rule 19    command_ret -> RETURN list_exps
Rule 20    command_ret -> RETURN list_exps SEMICOLON
Rule 21    rotulo -> DUALCOLON NAME DUALCOLON
Rule 22    name_function -> NAME
Rule 23    name_function -> NAME COLON NAME
Rule 24    list_vars -> var
Rule 25    list_vars -> var COMMA list_vars
Rule 26    var -> NAME
Rule 27    var -> prefix_exp LCOLCH exp RCOLCH
Rule 28    prefix_exp -> var
Rule 29    prefix_exp -> call_function
Rule 30    list_names -> NAME COMMA list_names
Rule 31    list_names -> NAME
Rule 32    list_names2 -> list_names2 COMMA NAME
Rule 33    list_names2 -> NAME
Rule 34    list_exps -> exp COMMA list_exps
Rule 35    list_exps -> exp
Rule 36    exp -> NIL
Rule 37    exp -> FALSE
Rule 38    exp -> TRUE
Rule 39    exp -> NUMBER
Rule 40    exp -> STRING
Rule 41    exp -> VARARGS
Rule 42    exp -> def_function
Rule 43    exp -> prefix_exp
Rule 44    exp -> TAG exp
Rule 45    exp -> MINUS exp
Rule 46    exp -> NOT exp
Rule 47    exp -> exp PLUS exp
Rule 48    exp -> exp MINUS exp
Rule 49    exp -> exp TIMES exp
Rule 50    exp -> exp DIVIDE exp
Rule 51    exp -> exp EXPO exp
Rule 52    exp -> exp PERCENTUAL exp
Rule 53    exp -> exp CONCAT exp
Rule 54    exp -> exp LT exp
Rule 55    exp -> exp LTEQUALS exp
Rule 56    exp -> exp GT exp
Rule 57    exp -> exp GTEQUALS exp
Rule 58    exp -> exp EQUALS exp
Rule 59    exp -> exp DIF exp
Rule 60    exp -> exp AND exp
Rule 61    exp -> exp OR exp
Rule 62    call_function -> prefix_exp args
Rule 63    args -> LPAREN list_exps RPAREN
Rule 64    args -> LPAREN RPAREN
Rule 65    def_function -> function
Rule 66    body_function -> LPAREN list_pars RPAREN block END
Rule 67    list_pars -> list_names2
Rule 68    list_pars -> list_names2 COMMA VARARGS
Rule 69    list_pars -> VARARGS
Rule 70    list_fields -> field
Rule 71    list_fields -> field separator_fields list_fields
Rule 72    list_fields -> field_empty
Rule 73    list_fields -> field_empty separator_fields list_fields
Rule 74    field_empty -> LCOLCH exp RCOLCH
Rule 75    field_empty -> NAME
Rule 76    field -> LCOLCH exp RCOLCH ATRIB exp
Rule 77    field -> NAME ATRIB exp
Rule 78    separator_fields -> COMMA
Rule 79    separator_fields -> SEMICOLON
Rule 80    local_var -> LOCAL list_names ATRIB list_exps
Rule 81    local_var -> LOCAL list_names
Rule 82    local_var -> LOCAL NAME ATRIB exp
Rule 83    function -> FUNCTION name_function body_function
Rule 84    if -> IF exp THEN block END
Rule 85    if -> IF exp THEN block else
Rule 86    if -> IF exp THEN block else_if else
Rule 87    else_if -> ELSEIF exp THEN block
Rule 88    else_if -> ELSEIF exp THEN block else_if
Rule 89    else -> ELSE block END
Rule 90    struct_while -> WHILE exp DO block END
Rule 91    struct_for -> FOR NAME ATRIB exp COMMA exp DO block END
Rule 92    struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
Rule 93    struct_for_in -> FOR list_names IN list_exps DO block END
Rule 94    struct_repeat -> REPEAT block UNTIL exp

Terminals, with rules where they appear

AND                  : 60
ATRIB                : 6 16 76 77 80 82 91 92
BREAK                : 9
COLON                : 23
COMMA                : 25 30 32 34 68 78 91 92 92
CONCAT               : 53
DIF                  : 59
DIVIDE               : 50
DO                   : 10 90 91 92 93
DOT                  : 
DUALCOLON            : 21 21
ELSE                 : 89
ELSEIF               : 87 88
END                  : 10 66 84 89 90 91 92 93
EQUALS               : 58
EXPO                 : 51
FALSE                : 37
FOR                  : 91 92 93
FUNCTION             : 83
GT                   : 56
GTEQUALS             : 57
IF                   : 84 85 86
IN                   : 93
LBRACE               : 
LCOLCH               : 27 74 76
LOCAL                : 16 80 81 82
LPAREN               : 63 64 66
LT                   : 54
LTEQUALS             : 55
MINUS                : 45 48
NAME                 : 21 22 23 23 26 30 31 32 33 75 77 82 91 92
NIL                  : 36
NOT                  : 46
NUMBER               : 39
OR                   : 61
PERCENTUAL           : 52
PLUS                 : 47
RBRACE               : 
RCOLCH               : 27 74 76
REPEAT               : 94
RETURN               : 18 19 20
RPAREN               : 63 64 66
SEMICOLON            : 18 20 79
STRING               : 40
TAG                  : 44
THEN                 : 84 85 86 87 88
TIMES                : 49
TRUE                 : 38
UNTIL                : 94
VARARGS              : 41 68 69
WHILE                : 90
error                : 

Nonterminals, with rules where they appear

args                 : 62
block                : 1 5 10 66 84 85 86 87 88 89 90 91 92 93 94
body_function        : 83
call_function        : 7 29
command              : 4 5
command_ret          : 17
def_function         : 42
else                 : 85 86
else_if              : 86 88
exp                  : 27 34 35 44 45 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 74 76 76 77 82 84 85 86 87 88 90 91 91 92 92 92 94
field                : 70 71
field_empty          : 72 73
function             : 2 3 65
if                   : 13
list_exps            : 6 16 19 20 34 63 80 93
list_fields          : 71 73
list_names           : 30 80 81 93
list_names2          : 32 67 68
list_pars            : 66
list_vars            : 6 16 25
local_var            : 
name_function        : 83
prefix_exp           : 27 43 62
program              : 3 0
rotulo               : 8
separator_fields     : 71 73
struct_for           : 14
struct_for_in        : 15
struct_repeat        : 12
struct_while         : 11
var                  : 24 25 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) program -> . function
    (3) program -> . function program
    (4) block -> . command
    (5) block -> . command block
    (83) function -> . FUNCTION name_function body_function
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    FUNCTION        shift and go to state 5
    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    program                        shift and go to state 1
    block                          shift and go to state 2
    function                       shift and go to state 3
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) program -> function .
    (3) program -> function . program
    (1) program -> . block
    (2) program -> . function
    (3) program -> . function program
    (4) block -> . command
    (5) block -> . command block
    (83) function -> . FUNCTION name_function body_function
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    $end            reduce using rule 2 (program -> function .)
    FUNCTION        shift and go to state 5
    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    function                       shift and go to state 3
    program                        shift and go to state 27
    block                          shift and go to state 2
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 4

    (4) block -> command .
    (5) block -> command . block
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    $end            reduce using rule 4 (block -> command .)
    END             reduce using rule 4 (block -> command .)
    UNTIL           reduce using rule 4 (block -> command .)
    ELSE            reduce using rule 4 (block -> command .)
    ELSEIF          reduce using rule 4 (block -> command .)
    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    command                        shift and go to state 4
    block                          shift and go to state 28
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 5

    (83) function -> FUNCTION . name_function body_function
    (22) name_function -> . NAME
    (23) name_function -> . NAME COLON NAME

    NAME            shift and go to state 30

    name_function                  shift and go to state 29

state 6

    (6) command -> list_vars . ATRIB list_exps

    ATRIB           shift and go to state 31


state 7

    (7) command -> call_function .
    (29) prefix_exp -> call_function .

    BREAK           reduce using rule 7 (command -> call_function .)
    DO              reduce using rule 7 (command -> call_function .)
    LOCAL           reduce using rule 7 (command -> call_function .)
    DUALCOLON       reduce using rule 7 (command -> call_function .)
    WHILE           reduce using rule 7 (command -> call_function .)
    REPEAT          reduce using rule 7 (command -> call_function .)
    IF              reduce using rule 7 (command -> call_function .)
    FOR             reduce using rule 7 (command -> call_function .)
    RETURN          reduce using rule 7 (command -> call_function .)
    NAME            reduce using rule 7 (command -> call_function .)
    $end            reduce using rule 7 (command -> call_function .)
    END             reduce using rule 7 (command -> call_function .)
    UNTIL           reduce using rule 7 (command -> call_function .)
    ELSE            reduce using rule 7 (command -> call_function .)
    ELSEIF          reduce using rule 7 (command -> call_function .)
    LCOLCH          reduce using rule 29 (prefix_exp -> call_function .)
    LPAREN          reduce using rule 29 (prefix_exp -> call_function .)


state 8

    (8) command -> rotulo .

    BREAK           reduce using rule 8 (command -> rotulo .)
    DO              reduce using rule 8 (command -> rotulo .)
    LOCAL           reduce using rule 8 (command -> rotulo .)
    DUALCOLON       reduce using rule 8 (command -> rotulo .)
    WHILE           reduce using rule 8 (command -> rotulo .)
    REPEAT          reduce using rule 8 (command -> rotulo .)
    IF              reduce using rule 8 (command -> rotulo .)
    FOR             reduce using rule 8 (command -> rotulo .)
    RETURN          reduce using rule 8 (command -> rotulo .)
    NAME            reduce using rule 8 (command -> rotulo .)
    $end            reduce using rule 8 (command -> rotulo .)
    END             reduce using rule 8 (command -> rotulo .)
    UNTIL           reduce using rule 8 (command -> rotulo .)
    ELSE            reduce using rule 8 (command -> rotulo .)
    ELSEIF          reduce using rule 8 (command -> rotulo .)


state 9

    (9) command -> BREAK .

    BREAK           reduce using rule 9 (command -> BREAK .)
    DO              reduce using rule 9 (command -> BREAK .)
    LOCAL           reduce using rule 9 (command -> BREAK .)
    DUALCOLON       reduce using rule 9 (command -> BREAK .)
    WHILE           reduce using rule 9 (command -> BREAK .)
    REPEAT          reduce using rule 9 (command -> BREAK .)
    IF              reduce using rule 9 (command -> BREAK .)
    FOR             reduce using rule 9 (command -> BREAK .)
    RETURN          reduce using rule 9 (command -> BREAK .)
    NAME            reduce using rule 9 (command -> BREAK .)
    $end            reduce using rule 9 (command -> BREAK .)
    END             reduce using rule 9 (command -> BREAK .)
    UNTIL           reduce using rule 9 (command -> BREAK .)
    ELSE            reduce using rule 9 (command -> BREAK .)
    ELSEIF          reduce using rule 9 (command -> BREAK .)


state 10

    (10) command -> DO . block END
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    block                          shift and go to state 32
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 11

    (11) command -> struct_while .

    BREAK           reduce using rule 11 (command -> struct_while .)
    DO              reduce using rule 11 (command -> struct_while .)
    LOCAL           reduce using rule 11 (command -> struct_while .)
    DUALCOLON       reduce using rule 11 (command -> struct_while .)
    WHILE           reduce using rule 11 (command -> struct_while .)
    REPEAT          reduce using rule 11 (command -> struct_while .)
    IF              reduce using rule 11 (command -> struct_while .)
    FOR             reduce using rule 11 (command -> struct_while .)
    RETURN          reduce using rule 11 (command -> struct_while .)
    NAME            reduce using rule 11 (command -> struct_while .)
    $end            reduce using rule 11 (command -> struct_while .)
    END             reduce using rule 11 (command -> struct_while .)
    UNTIL           reduce using rule 11 (command -> struct_while .)
    ELSE            reduce using rule 11 (command -> struct_while .)
    ELSEIF          reduce using rule 11 (command -> struct_while .)


state 12

    (12) command -> struct_repeat .

    BREAK           reduce using rule 12 (command -> struct_repeat .)
    DO              reduce using rule 12 (command -> struct_repeat .)
    LOCAL           reduce using rule 12 (command -> struct_repeat .)
    DUALCOLON       reduce using rule 12 (command -> struct_repeat .)
    WHILE           reduce using rule 12 (command -> struct_repeat .)
    REPEAT          reduce using rule 12 (command -> struct_repeat .)
    IF              reduce using rule 12 (command -> struct_repeat .)
    FOR             reduce using rule 12 (command -> struct_repeat .)
    RETURN          reduce using rule 12 (command -> struct_repeat .)
    NAME            reduce using rule 12 (command -> struct_repeat .)
    $end            reduce using rule 12 (command -> struct_repeat .)
    END             reduce using rule 12 (command -> struct_repeat .)
    UNTIL           reduce using rule 12 (command -> struct_repeat .)
    ELSE            reduce using rule 12 (command -> struct_repeat .)
    ELSEIF          reduce using rule 12 (command -> struct_repeat .)


state 13

    (13) command -> if .

    BREAK           reduce using rule 13 (command -> if .)
    DO              reduce using rule 13 (command -> if .)
    LOCAL           reduce using rule 13 (command -> if .)
    DUALCOLON       reduce using rule 13 (command -> if .)
    WHILE           reduce using rule 13 (command -> if .)
    REPEAT          reduce using rule 13 (command -> if .)
    IF              reduce using rule 13 (command -> if .)
    FOR             reduce using rule 13 (command -> if .)
    RETURN          reduce using rule 13 (command -> if .)
    NAME            reduce using rule 13 (command -> if .)
    $end            reduce using rule 13 (command -> if .)
    END             reduce using rule 13 (command -> if .)
    UNTIL           reduce using rule 13 (command -> if .)
    ELSE            reduce using rule 13 (command -> if .)
    ELSEIF          reduce using rule 13 (command -> if .)


state 14

    (14) command -> struct_for .

    BREAK           reduce using rule 14 (command -> struct_for .)
    DO              reduce using rule 14 (command -> struct_for .)
    LOCAL           reduce using rule 14 (command -> struct_for .)
    DUALCOLON       reduce using rule 14 (command -> struct_for .)
    WHILE           reduce using rule 14 (command -> struct_for .)
    REPEAT          reduce using rule 14 (command -> struct_for .)
    IF              reduce using rule 14 (command -> struct_for .)
    FOR             reduce using rule 14 (command -> struct_for .)
    RETURN          reduce using rule 14 (command -> struct_for .)
    NAME            reduce using rule 14 (command -> struct_for .)
    $end            reduce using rule 14 (command -> struct_for .)
    END             reduce using rule 14 (command -> struct_for .)
    UNTIL           reduce using rule 14 (command -> struct_for .)
    ELSE            reduce using rule 14 (command -> struct_for .)
    ELSEIF          reduce using rule 14 (command -> struct_for .)


state 15

    (15) command -> struct_for_in .

    BREAK           reduce using rule 15 (command -> struct_for_in .)
    DO              reduce using rule 15 (command -> struct_for_in .)
    LOCAL           reduce using rule 15 (command -> struct_for_in .)
    DUALCOLON       reduce using rule 15 (command -> struct_for_in .)
    WHILE           reduce using rule 15 (command -> struct_for_in .)
    REPEAT          reduce using rule 15 (command -> struct_for_in .)
    IF              reduce using rule 15 (command -> struct_for_in .)
    FOR             reduce using rule 15 (command -> struct_for_in .)
    RETURN          reduce using rule 15 (command -> struct_for_in .)
    NAME            reduce using rule 15 (command -> struct_for_in .)
    $end            reduce using rule 15 (command -> struct_for_in .)
    END             reduce using rule 15 (command -> struct_for_in .)
    UNTIL           reduce using rule 15 (command -> struct_for_in .)
    ELSE            reduce using rule 15 (command -> struct_for_in .)
    ELSEIF          reduce using rule 15 (command -> struct_for_in .)


state 16

    (16) command -> LOCAL . list_vars ATRIB list_exps
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (62) call_function -> . prefix_exp args

    NAME            shift and go to state 21

    list_vars                      shift and go to state 33
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 34
    call_function                  shift and go to state 35

state 17

    (17) command -> command_ret .

    BREAK           reduce using rule 17 (command -> command_ret .)
    DO              reduce using rule 17 (command -> command_ret .)
    LOCAL           reduce using rule 17 (command -> command_ret .)
    DUALCOLON       reduce using rule 17 (command -> command_ret .)
    WHILE           reduce using rule 17 (command -> command_ret .)
    REPEAT          reduce using rule 17 (command -> command_ret .)
    IF              reduce using rule 17 (command -> command_ret .)
    FOR             reduce using rule 17 (command -> command_ret .)
    RETURN          reduce using rule 17 (command -> command_ret .)
    NAME            reduce using rule 17 (command -> command_ret .)
    $end            reduce using rule 17 (command -> command_ret .)
    END             reduce using rule 17 (command -> command_ret .)
    UNTIL           reduce using rule 17 (command -> command_ret .)
    ELSE            reduce using rule 17 (command -> command_ret .)
    ELSEIF          reduce using rule 17 (command -> command_ret .)


state 18

    (24) list_vars -> var .
    (25) list_vars -> var . COMMA list_vars
    (28) prefix_exp -> var .

    ATRIB           reduce using rule 24 (list_vars -> var .)
    COMMA           shift and go to state 36
    LCOLCH          reduce using rule 28 (prefix_exp -> var .)
    LPAREN          reduce using rule 28 (prefix_exp -> var .)


state 19

    (62) call_function -> prefix_exp . args
    (27) var -> prefix_exp . LCOLCH exp RCOLCH
    (63) args -> . LPAREN list_exps RPAREN
    (64) args -> . LPAREN RPAREN

    LCOLCH          shift and go to state 38
    LPAREN          shift and go to state 39

    args                           shift and go to state 37

state 20

    (21) rotulo -> DUALCOLON . NAME DUALCOLON

    NAME            shift and go to state 40


state 21

    (26) var -> NAME .

    COMMA           reduce using rule 26 (var -> NAME .)
    ATRIB           reduce using rule 26 (var -> NAME .)
    LCOLCH          reduce using rule 26 (var -> NAME .)
    LPAREN          reduce using rule 26 (var -> NAME .)
    DO              reduce using rule 26 (var -> NAME .)
    PLUS            reduce using rule 26 (var -> NAME .)
    MINUS           reduce using rule 26 (var -> NAME .)
    TIMES           reduce using rule 26 (var -> NAME .)
    DIVIDE          reduce using rule 26 (var -> NAME .)
    EXPO            reduce using rule 26 (var -> NAME .)
    PERCENTUAL      reduce using rule 26 (var -> NAME .)
    CONCAT          reduce using rule 26 (var -> NAME .)
    LT              reduce using rule 26 (var -> NAME .)
    LTEQUALS        reduce using rule 26 (var -> NAME .)
    GT              reduce using rule 26 (var -> NAME .)
    GTEQUALS        reduce using rule 26 (var -> NAME .)
    EQUALS          reduce using rule 26 (var -> NAME .)
    DIF             reduce using rule 26 (var -> NAME .)
    AND             reduce using rule 26 (var -> NAME .)
    OR              reduce using rule 26 (var -> NAME .)
    THEN            reduce using rule 26 (var -> NAME .)
    SEMICOLON       reduce using rule 26 (var -> NAME .)
    BREAK           reduce using rule 26 (var -> NAME .)
    LOCAL           reduce using rule 26 (var -> NAME .)
    DUALCOLON       reduce using rule 26 (var -> NAME .)
    WHILE           reduce using rule 26 (var -> NAME .)
    REPEAT          reduce using rule 26 (var -> NAME .)
    IF              reduce using rule 26 (var -> NAME .)
    FOR             reduce using rule 26 (var -> NAME .)
    RETURN          reduce using rule 26 (var -> NAME .)
    NAME            reduce using rule 26 (var -> NAME .)
    $end            reduce using rule 26 (var -> NAME .)
    END             reduce using rule 26 (var -> NAME .)
    UNTIL           reduce using rule 26 (var -> NAME .)
    ELSE            reduce using rule 26 (var -> NAME .)
    ELSEIF          reduce using rule 26 (var -> NAME .)
    RCOLCH          reduce using rule 26 (var -> NAME .)
    RPAREN          reduce using rule 26 (var -> NAME .)


state 22

    (90) struct_while -> WHILE . exp DO block END
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 41
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 23

    (94) struct_repeat -> REPEAT . block UNTIL exp
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    block                          shift and go to state 55
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 24

    (84) if -> IF . exp THEN block END
    (85) if -> IF . exp THEN block else
    (86) if -> IF . exp THEN block else_if else
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 56
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 25

    (91) struct_for -> FOR . NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> FOR . NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> FOR . list_names IN list_exps DO block END
    (30) list_names -> . NAME COMMA list_names
    (31) list_names -> . NAME

    NAME            shift and go to state 57

    list_names                     shift and go to state 58

state 26

    (18) command_ret -> RETURN . SEMICOLON
    (19) command_ret -> RETURN . list_exps
    (20) command_ret -> RETURN . list_exps SEMICOLON
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    SEMICOLON       shift and go to state 59
    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    list_exps                      shift and go to state 60
    exp                            shift and go to state 61
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 27

    (3) program -> function program .

    $end            reduce using rule 3 (program -> function program .)


state 28

    (5) block -> command block .

    $end            reduce using rule 5 (block -> command block .)
    END             reduce using rule 5 (block -> command block .)
    UNTIL           reduce using rule 5 (block -> command block .)
    ELSE            reduce using rule 5 (block -> command block .)
    ELSEIF          reduce using rule 5 (block -> command block .)


state 29

    (83) function -> FUNCTION name_function . body_function
    (66) body_function -> . LPAREN list_pars RPAREN block END

    LPAREN          shift and go to state 63

    body_function                  shift and go to state 62

state 30

    (22) name_function -> NAME .
    (23) name_function -> NAME . COLON NAME

    LPAREN          reduce using rule 22 (name_function -> NAME .)
    COLON           shift and go to state 64


state 31

    (6) command -> list_vars ATRIB . list_exps
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    list_exps                      shift and go to state 65
    exp                            shift and go to state 61
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 32

    (10) command -> DO block . END

    END             shift and go to state 66


state 33

    (16) command -> LOCAL list_vars . ATRIB list_exps

    ATRIB           shift and go to state 67


state 34

    (27) var -> prefix_exp . LCOLCH exp RCOLCH
    (62) call_function -> prefix_exp . args
    (63) args -> . LPAREN list_exps RPAREN
    (64) args -> . LPAREN RPAREN

    LCOLCH          shift and go to state 38
    LPAREN          shift and go to state 39

    args                           shift and go to state 37

state 35

    (29) prefix_exp -> call_function .

    LCOLCH          reduce using rule 29 (prefix_exp -> call_function .)
    LPAREN          reduce using rule 29 (prefix_exp -> call_function .)
    DO              reduce using rule 29 (prefix_exp -> call_function .)
    PLUS            reduce using rule 29 (prefix_exp -> call_function .)
    MINUS           reduce using rule 29 (prefix_exp -> call_function .)
    TIMES           reduce using rule 29 (prefix_exp -> call_function .)
    DIVIDE          reduce using rule 29 (prefix_exp -> call_function .)
    EXPO            reduce using rule 29 (prefix_exp -> call_function .)
    PERCENTUAL      reduce using rule 29 (prefix_exp -> call_function .)
    CONCAT          reduce using rule 29 (prefix_exp -> call_function .)
    LT              reduce using rule 29 (prefix_exp -> call_function .)
    LTEQUALS        reduce using rule 29 (prefix_exp -> call_function .)
    GT              reduce using rule 29 (prefix_exp -> call_function .)
    GTEQUALS        reduce using rule 29 (prefix_exp -> call_function .)
    EQUALS          reduce using rule 29 (prefix_exp -> call_function .)
    DIF             reduce using rule 29 (prefix_exp -> call_function .)
    AND             reduce using rule 29 (prefix_exp -> call_function .)
    OR              reduce using rule 29 (prefix_exp -> call_function .)
    THEN            reduce using rule 29 (prefix_exp -> call_function .)
    COMMA           reduce using rule 29 (prefix_exp -> call_function .)
    SEMICOLON       reduce using rule 29 (prefix_exp -> call_function .)
    BREAK           reduce using rule 29 (prefix_exp -> call_function .)
    LOCAL           reduce using rule 29 (prefix_exp -> call_function .)
    DUALCOLON       reduce using rule 29 (prefix_exp -> call_function .)
    WHILE           reduce using rule 29 (prefix_exp -> call_function .)
    REPEAT          reduce using rule 29 (prefix_exp -> call_function .)
    IF              reduce using rule 29 (prefix_exp -> call_function .)
    FOR             reduce using rule 29 (prefix_exp -> call_function .)
    RETURN          reduce using rule 29 (prefix_exp -> call_function .)
    NAME            reduce using rule 29 (prefix_exp -> call_function .)
    $end            reduce using rule 29 (prefix_exp -> call_function .)
    END             reduce using rule 29 (prefix_exp -> call_function .)
    UNTIL           reduce using rule 29 (prefix_exp -> call_function .)
    ELSE            reduce using rule 29 (prefix_exp -> call_function .)
    ELSEIF          reduce using rule 29 (prefix_exp -> call_function .)
    RCOLCH          reduce using rule 29 (prefix_exp -> call_function .)
    RPAREN          reduce using rule 29 (prefix_exp -> call_function .)


state 36

    (25) list_vars -> var COMMA . list_vars
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (62) call_function -> . prefix_exp args

    NAME            shift and go to state 21

    var                            shift and go to state 18
    list_vars                      shift and go to state 68
    prefix_exp                     shift and go to state 34
    call_function                  shift and go to state 35

state 37

    (62) call_function -> prefix_exp args .

    BREAK           reduce using rule 62 (call_function -> prefix_exp args .)
    DO              reduce using rule 62 (call_function -> prefix_exp args .)
    LOCAL           reduce using rule 62 (call_function -> prefix_exp args .)
    DUALCOLON       reduce using rule 62 (call_function -> prefix_exp args .)
    WHILE           reduce using rule 62 (call_function -> prefix_exp args .)
    REPEAT          reduce using rule 62 (call_function -> prefix_exp args .)
    IF              reduce using rule 62 (call_function -> prefix_exp args .)
    FOR             reduce using rule 62 (call_function -> prefix_exp args .)
    RETURN          reduce using rule 62 (call_function -> prefix_exp args .)
    NAME            reduce using rule 62 (call_function -> prefix_exp args .)
    $end            reduce using rule 62 (call_function -> prefix_exp args .)
    LCOLCH          reduce using rule 62 (call_function -> prefix_exp args .)
    LPAREN          reduce using rule 62 (call_function -> prefix_exp args .)
    END             reduce using rule 62 (call_function -> prefix_exp args .)
    UNTIL           reduce using rule 62 (call_function -> prefix_exp args .)
    ELSE            reduce using rule 62 (call_function -> prefix_exp args .)
    ELSEIF          reduce using rule 62 (call_function -> prefix_exp args .)
    PLUS            reduce using rule 62 (call_function -> prefix_exp args .)
    MINUS           reduce using rule 62 (call_function -> prefix_exp args .)
    TIMES           reduce using rule 62 (call_function -> prefix_exp args .)
    DIVIDE          reduce using rule 62 (call_function -> prefix_exp args .)
    EXPO            reduce using rule 62 (call_function -> prefix_exp args .)
    PERCENTUAL      reduce using rule 62 (call_function -> prefix_exp args .)
    CONCAT          reduce using rule 62 (call_function -> prefix_exp args .)
    LT              reduce using rule 62 (call_function -> prefix_exp args .)
    LTEQUALS        reduce using rule 62 (call_function -> prefix_exp args .)
    GT              reduce using rule 62 (call_function -> prefix_exp args .)
    GTEQUALS        reduce using rule 62 (call_function -> prefix_exp args .)
    EQUALS          reduce using rule 62 (call_function -> prefix_exp args .)
    DIF             reduce using rule 62 (call_function -> prefix_exp args .)
    AND             reduce using rule 62 (call_function -> prefix_exp args .)
    OR              reduce using rule 62 (call_function -> prefix_exp args .)
    THEN            reduce using rule 62 (call_function -> prefix_exp args .)
    COMMA           reduce using rule 62 (call_function -> prefix_exp args .)
    SEMICOLON       reduce using rule 62 (call_function -> prefix_exp args .)
    RCOLCH          reduce using rule 62 (call_function -> prefix_exp args .)
    RPAREN          reduce using rule 62 (call_function -> prefix_exp args .)


state 38

    (27) var -> prefix_exp LCOLCH . exp RCOLCH
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    prefix_exp                     shift and go to state 49
    exp                            shift and go to state 69
    def_function                   shift and go to state 48
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 39

    (63) args -> LPAREN . list_exps RPAREN
    (64) args -> LPAREN . RPAREN
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    RPAREN          shift and go to state 71
    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    list_exps                      shift and go to state 70
    exp                            shift and go to state 61
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 40

    (21) rotulo -> DUALCOLON NAME . DUALCOLON

    DUALCOLON       shift and go to state 72


state 41

    (90) struct_while -> WHILE exp . DO block END
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              shift and go to state 73
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 42

    (36) exp -> NIL .

    DO              reduce using rule 36 (exp -> NIL .)
    PLUS            reduce using rule 36 (exp -> NIL .)
    MINUS           reduce using rule 36 (exp -> NIL .)
    TIMES           reduce using rule 36 (exp -> NIL .)
    DIVIDE          reduce using rule 36 (exp -> NIL .)
    EXPO            reduce using rule 36 (exp -> NIL .)
    PERCENTUAL      reduce using rule 36 (exp -> NIL .)
    CONCAT          reduce using rule 36 (exp -> NIL .)
    LT              reduce using rule 36 (exp -> NIL .)
    LTEQUALS        reduce using rule 36 (exp -> NIL .)
    GT              reduce using rule 36 (exp -> NIL .)
    GTEQUALS        reduce using rule 36 (exp -> NIL .)
    EQUALS          reduce using rule 36 (exp -> NIL .)
    DIF             reduce using rule 36 (exp -> NIL .)
    AND             reduce using rule 36 (exp -> NIL .)
    OR              reduce using rule 36 (exp -> NIL .)
    THEN            reduce using rule 36 (exp -> NIL .)
    COMMA           reduce using rule 36 (exp -> NIL .)
    SEMICOLON       reduce using rule 36 (exp -> NIL .)
    BREAK           reduce using rule 36 (exp -> NIL .)
    LOCAL           reduce using rule 36 (exp -> NIL .)
    DUALCOLON       reduce using rule 36 (exp -> NIL .)
    WHILE           reduce using rule 36 (exp -> NIL .)
    REPEAT          reduce using rule 36 (exp -> NIL .)
    IF              reduce using rule 36 (exp -> NIL .)
    FOR             reduce using rule 36 (exp -> NIL .)
    RETURN          reduce using rule 36 (exp -> NIL .)
    NAME            reduce using rule 36 (exp -> NIL .)
    $end            reduce using rule 36 (exp -> NIL .)
    END             reduce using rule 36 (exp -> NIL .)
    UNTIL           reduce using rule 36 (exp -> NIL .)
    ELSE            reduce using rule 36 (exp -> NIL .)
    ELSEIF          reduce using rule 36 (exp -> NIL .)
    RCOLCH          reduce using rule 36 (exp -> NIL .)
    RPAREN          reduce using rule 36 (exp -> NIL .)


state 43

    (37) exp -> FALSE .

    DO              reduce using rule 37 (exp -> FALSE .)
    PLUS            reduce using rule 37 (exp -> FALSE .)
    MINUS           reduce using rule 37 (exp -> FALSE .)
    TIMES           reduce using rule 37 (exp -> FALSE .)
    DIVIDE          reduce using rule 37 (exp -> FALSE .)
    EXPO            reduce using rule 37 (exp -> FALSE .)
    PERCENTUAL      reduce using rule 37 (exp -> FALSE .)
    CONCAT          reduce using rule 37 (exp -> FALSE .)
    LT              reduce using rule 37 (exp -> FALSE .)
    LTEQUALS        reduce using rule 37 (exp -> FALSE .)
    GT              reduce using rule 37 (exp -> FALSE .)
    GTEQUALS        reduce using rule 37 (exp -> FALSE .)
    EQUALS          reduce using rule 37 (exp -> FALSE .)
    DIF             reduce using rule 37 (exp -> FALSE .)
    AND             reduce using rule 37 (exp -> FALSE .)
    OR              reduce using rule 37 (exp -> FALSE .)
    THEN            reduce using rule 37 (exp -> FALSE .)
    COMMA           reduce using rule 37 (exp -> FALSE .)
    SEMICOLON       reduce using rule 37 (exp -> FALSE .)
    BREAK           reduce using rule 37 (exp -> FALSE .)
    LOCAL           reduce using rule 37 (exp -> FALSE .)
    DUALCOLON       reduce using rule 37 (exp -> FALSE .)
    WHILE           reduce using rule 37 (exp -> FALSE .)
    REPEAT          reduce using rule 37 (exp -> FALSE .)
    IF              reduce using rule 37 (exp -> FALSE .)
    FOR             reduce using rule 37 (exp -> FALSE .)
    RETURN          reduce using rule 37 (exp -> FALSE .)
    NAME            reduce using rule 37 (exp -> FALSE .)
    $end            reduce using rule 37 (exp -> FALSE .)
    END             reduce using rule 37 (exp -> FALSE .)
    UNTIL           reduce using rule 37 (exp -> FALSE .)
    ELSE            reduce using rule 37 (exp -> FALSE .)
    ELSEIF          reduce using rule 37 (exp -> FALSE .)
    RCOLCH          reduce using rule 37 (exp -> FALSE .)
    RPAREN          reduce using rule 37 (exp -> FALSE .)


state 44

    (38) exp -> TRUE .

    DO              reduce using rule 38 (exp -> TRUE .)
    PLUS            reduce using rule 38 (exp -> TRUE .)
    MINUS           reduce using rule 38 (exp -> TRUE .)
    TIMES           reduce using rule 38 (exp -> TRUE .)
    DIVIDE          reduce using rule 38 (exp -> TRUE .)
    EXPO            reduce using rule 38 (exp -> TRUE .)
    PERCENTUAL      reduce using rule 38 (exp -> TRUE .)
    CONCAT          reduce using rule 38 (exp -> TRUE .)
    LT              reduce using rule 38 (exp -> TRUE .)
    LTEQUALS        reduce using rule 38 (exp -> TRUE .)
    GT              reduce using rule 38 (exp -> TRUE .)
    GTEQUALS        reduce using rule 38 (exp -> TRUE .)
    EQUALS          reduce using rule 38 (exp -> TRUE .)
    DIF             reduce using rule 38 (exp -> TRUE .)
    AND             reduce using rule 38 (exp -> TRUE .)
    OR              reduce using rule 38 (exp -> TRUE .)
    THEN            reduce using rule 38 (exp -> TRUE .)
    COMMA           reduce using rule 38 (exp -> TRUE .)
    SEMICOLON       reduce using rule 38 (exp -> TRUE .)
    BREAK           reduce using rule 38 (exp -> TRUE .)
    LOCAL           reduce using rule 38 (exp -> TRUE .)
    DUALCOLON       reduce using rule 38 (exp -> TRUE .)
    WHILE           reduce using rule 38 (exp -> TRUE .)
    REPEAT          reduce using rule 38 (exp -> TRUE .)
    IF              reduce using rule 38 (exp -> TRUE .)
    FOR             reduce using rule 38 (exp -> TRUE .)
    RETURN          reduce using rule 38 (exp -> TRUE .)
    NAME            reduce using rule 38 (exp -> TRUE .)
    $end            reduce using rule 38 (exp -> TRUE .)
    END             reduce using rule 38 (exp -> TRUE .)
    UNTIL           reduce using rule 38 (exp -> TRUE .)
    ELSE            reduce using rule 38 (exp -> TRUE .)
    ELSEIF          reduce using rule 38 (exp -> TRUE .)
    RCOLCH          reduce using rule 38 (exp -> TRUE .)
    RPAREN          reduce using rule 38 (exp -> TRUE .)


state 45

    (39) exp -> NUMBER .

    DO              reduce using rule 39 (exp -> NUMBER .)
    PLUS            reduce using rule 39 (exp -> NUMBER .)
    MINUS           reduce using rule 39 (exp -> NUMBER .)
    TIMES           reduce using rule 39 (exp -> NUMBER .)
    DIVIDE          reduce using rule 39 (exp -> NUMBER .)
    EXPO            reduce using rule 39 (exp -> NUMBER .)
    PERCENTUAL      reduce using rule 39 (exp -> NUMBER .)
    CONCAT          reduce using rule 39 (exp -> NUMBER .)
    LT              reduce using rule 39 (exp -> NUMBER .)
    LTEQUALS        reduce using rule 39 (exp -> NUMBER .)
    GT              reduce using rule 39 (exp -> NUMBER .)
    GTEQUALS        reduce using rule 39 (exp -> NUMBER .)
    EQUALS          reduce using rule 39 (exp -> NUMBER .)
    DIF             reduce using rule 39 (exp -> NUMBER .)
    AND             reduce using rule 39 (exp -> NUMBER .)
    OR              reduce using rule 39 (exp -> NUMBER .)
    THEN            reduce using rule 39 (exp -> NUMBER .)
    COMMA           reduce using rule 39 (exp -> NUMBER .)
    SEMICOLON       reduce using rule 39 (exp -> NUMBER .)
    BREAK           reduce using rule 39 (exp -> NUMBER .)
    LOCAL           reduce using rule 39 (exp -> NUMBER .)
    DUALCOLON       reduce using rule 39 (exp -> NUMBER .)
    WHILE           reduce using rule 39 (exp -> NUMBER .)
    REPEAT          reduce using rule 39 (exp -> NUMBER .)
    IF              reduce using rule 39 (exp -> NUMBER .)
    FOR             reduce using rule 39 (exp -> NUMBER .)
    RETURN          reduce using rule 39 (exp -> NUMBER .)
    NAME            reduce using rule 39 (exp -> NUMBER .)
    $end            reduce using rule 39 (exp -> NUMBER .)
    END             reduce using rule 39 (exp -> NUMBER .)
    UNTIL           reduce using rule 39 (exp -> NUMBER .)
    ELSE            reduce using rule 39 (exp -> NUMBER .)
    ELSEIF          reduce using rule 39 (exp -> NUMBER .)
    RCOLCH          reduce using rule 39 (exp -> NUMBER .)
    RPAREN          reduce using rule 39 (exp -> NUMBER .)


state 46

    (40) exp -> STRING .

    DO              reduce using rule 40 (exp -> STRING .)
    PLUS            reduce using rule 40 (exp -> STRING .)
    MINUS           reduce using rule 40 (exp -> STRING .)
    TIMES           reduce using rule 40 (exp -> STRING .)
    DIVIDE          reduce using rule 40 (exp -> STRING .)
    EXPO            reduce using rule 40 (exp -> STRING .)
    PERCENTUAL      reduce using rule 40 (exp -> STRING .)
    CONCAT          reduce using rule 40 (exp -> STRING .)
    LT              reduce using rule 40 (exp -> STRING .)
    LTEQUALS        reduce using rule 40 (exp -> STRING .)
    GT              reduce using rule 40 (exp -> STRING .)
    GTEQUALS        reduce using rule 40 (exp -> STRING .)
    EQUALS          reduce using rule 40 (exp -> STRING .)
    DIF             reduce using rule 40 (exp -> STRING .)
    AND             reduce using rule 40 (exp -> STRING .)
    OR              reduce using rule 40 (exp -> STRING .)
    THEN            reduce using rule 40 (exp -> STRING .)
    COMMA           reduce using rule 40 (exp -> STRING .)
    SEMICOLON       reduce using rule 40 (exp -> STRING .)
    BREAK           reduce using rule 40 (exp -> STRING .)
    LOCAL           reduce using rule 40 (exp -> STRING .)
    DUALCOLON       reduce using rule 40 (exp -> STRING .)
    WHILE           reduce using rule 40 (exp -> STRING .)
    REPEAT          reduce using rule 40 (exp -> STRING .)
    IF              reduce using rule 40 (exp -> STRING .)
    FOR             reduce using rule 40 (exp -> STRING .)
    RETURN          reduce using rule 40 (exp -> STRING .)
    NAME            reduce using rule 40 (exp -> STRING .)
    $end            reduce using rule 40 (exp -> STRING .)
    END             reduce using rule 40 (exp -> STRING .)
    UNTIL           reduce using rule 40 (exp -> STRING .)
    ELSE            reduce using rule 40 (exp -> STRING .)
    ELSEIF          reduce using rule 40 (exp -> STRING .)
    RCOLCH          reduce using rule 40 (exp -> STRING .)
    RPAREN          reduce using rule 40 (exp -> STRING .)


state 47

    (41) exp -> VARARGS .

    DO              reduce using rule 41 (exp -> VARARGS .)
    PLUS            reduce using rule 41 (exp -> VARARGS .)
    MINUS           reduce using rule 41 (exp -> VARARGS .)
    TIMES           reduce using rule 41 (exp -> VARARGS .)
    DIVIDE          reduce using rule 41 (exp -> VARARGS .)
    EXPO            reduce using rule 41 (exp -> VARARGS .)
    PERCENTUAL      reduce using rule 41 (exp -> VARARGS .)
    CONCAT          reduce using rule 41 (exp -> VARARGS .)
    LT              reduce using rule 41 (exp -> VARARGS .)
    LTEQUALS        reduce using rule 41 (exp -> VARARGS .)
    GT              reduce using rule 41 (exp -> VARARGS .)
    GTEQUALS        reduce using rule 41 (exp -> VARARGS .)
    EQUALS          reduce using rule 41 (exp -> VARARGS .)
    DIF             reduce using rule 41 (exp -> VARARGS .)
    AND             reduce using rule 41 (exp -> VARARGS .)
    OR              reduce using rule 41 (exp -> VARARGS .)
    THEN            reduce using rule 41 (exp -> VARARGS .)
    COMMA           reduce using rule 41 (exp -> VARARGS .)
    SEMICOLON       reduce using rule 41 (exp -> VARARGS .)
    BREAK           reduce using rule 41 (exp -> VARARGS .)
    LOCAL           reduce using rule 41 (exp -> VARARGS .)
    DUALCOLON       reduce using rule 41 (exp -> VARARGS .)
    WHILE           reduce using rule 41 (exp -> VARARGS .)
    REPEAT          reduce using rule 41 (exp -> VARARGS .)
    IF              reduce using rule 41 (exp -> VARARGS .)
    FOR             reduce using rule 41 (exp -> VARARGS .)
    RETURN          reduce using rule 41 (exp -> VARARGS .)
    NAME            reduce using rule 41 (exp -> VARARGS .)
    $end            reduce using rule 41 (exp -> VARARGS .)
    END             reduce using rule 41 (exp -> VARARGS .)
    UNTIL           reduce using rule 41 (exp -> VARARGS .)
    ELSE            reduce using rule 41 (exp -> VARARGS .)
    ELSEIF          reduce using rule 41 (exp -> VARARGS .)
    RCOLCH          reduce using rule 41 (exp -> VARARGS .)
    RPAREN          reduce using rule 41 (exp -> VARARGS .)


state 48

    (42) exp -> def_function .

    DO              reduce using rule 42 (exp -> def_function .)
    PLUS            reduce using rule 42 (exp -> def_function .)
    MINUS           reduce using rule 42 (exp -> def_function .)
    TIMES           reduce using rule 42 (exp -> def_function .)
    DIVIDE          reduce using rule 42 (exp -> def_function .)
    EXPO            reduce using rule 42 (exp -> def_function .)
    PERCENTUAL      reduce using rule 42 (exp -> def_function .)
    CONCAT          reduce using rule 42 (exp -> def_function .)
    LT              reduce using rule 42 (exp -> def_function .)
    LTEQUALS        reduce using rule 42 (exp -> def_function .)
    GT              reduce using rule 42 (exp -> def_function .)
    GTEQUALS        reduce using rule 42 (exp -> def_function .)
    EQUALS          reduce using rule 42 (exp -> def_function .)
    DIF             reduce using rule 42 (exp -> def_function .)
    AND             reduce using rule 42 (exp -> def_function .)
    OR              reduce using rule 42 (exp -> def_function .)
    THEN            reduce using rule 42 (exp -> def_function .)
    COMMA           reduce using rule 42 (exp -> def_function .)
    SEMICOLON       reduce using rule 42 (exp -> def_function .)
    BREAK           reduce using rule 42 (exp -> def_function .)
    LOCAL           reduce using rule 42 (exp -> def_function .)
    DUALCOLON       reduce using rule 42 (exp -> def_function .)
    WHILE           reduce using rule 42 (exp -> def_function .)
    REPEAT          reduce using rule 42 (exp -> def_function .)
    IF              reduce using rule 42 (exp -> def_function .)
    FOR             reduce using rule 42 (exp -> def_function .)
    RETURN          reduce using rule 42 (exp -> def_function .)
    NAME            reduce using rule 42 (exp -> def_function .)
    $end            reduce using rule 42 (exp -> def_function .)
    END             reduce using rule 42 (exp -> def_function .)
    UNTIL           reduce using rule 42 (exp -> def_function .)
    ELSE            reduce using rule 42 (exp -> def_function .)
    ELSEIF          reduce using rule 42 (exp -> def_function .)
    RCOLCH          reduce using rule 42 (exp -> def_function .)
    RPAREN          reduce using rule 42 (exp -> def_function .)


state 49

    (43) exp -> prefix_exp .
    (27) var -> prefix_exp . LCOLCH exp RCOLCH
    (62) call_function -> prefix_exp . args
    (63) args -> . LPAREN list_exps RPAREN
    (64) args -> . LPAREN RPAREN

    DO              reduce using rule 43 (exp -> prefix_exp .)
    PLUS            reduce using rule 43 (exp -> prefix_exp .)
    MINUS           reduce using rule 43 (exp -> prefix_exp .)
    TIMES           reduce using rule 43 (exp -> prefix_exp .)
    DIVIDE          reduce using rule 43 (exp -> prefix_exp .)
    EXPO            reduce using rule 43 (exp -> prefix_exp .)
    PERCENTUAL      reduce using rule 43 (exp -> prefix_exp .)
    CONCAT          reduce using rule 43 (exp -> prefix_exp .)
    LT              reduce using rule 43 (exp -> prefix_exp .)
    LTEQUALS        reduce using rule 43 (exp -> prefix_exp .)
    GT              reduce using rule 43 (exp -> prefix_exp .)
    GTEQUALS        reduce using rule 43 (exp -> prefix_exp .)
    EQUALS          reduce using rule 43 (exp -> prefix_exp .)
    DIF             reduce using rule 43 (exp -> prefix_exp .)
    AND             reduce using rule 43 (exp -> prefix_exp .)
    OR              reduce using rule 43 (exp -> prefix_exp .)
    THEN            reduce using rule 43 (exp -> prefix_exp .)
    COMMA           reduce using rule 43 (exp -> prefix_exp .)
    SEMICOLON       reduce using rule 43 (exp -> prefix_exp .)
    BREAK           reduce using rule 43 (exp -> prefix_exp .)
    LOCAL           reduce using rule 43 (exp -> prefix_exp .)
    DUALCOLON       reduce using rule 43 (exp -> prefix_exp .)
    WHILE           reduce using rule 43 (exp -> prefix_exp .)
    REPEAT          reduce using rule 43 (exp -> prefix_exp .)
    IF              reduce using rule 43 (exp -> prefix_exp .)
    FOR             reduce using rule 43 (exp -> prefix_exp .)
    RETURN          reduce using rule 43 (exp -> prefix_exp .)
    NAME            reduce using rule 43 (exp -> prefix_exp .)
    $end            reduce using rule 43 (exp -> prefix_exp .)
    END             reduce using rule 43 (exp -> prefix_exp .)
    UNTIL           reduce using rule 43 (exp -> prefix_exp .)
    ELSE            reduce using rule 43 (exp -> prefix_exp .)
    ELSEIF          reduce using rule 43 (exp -> prefix_exp .)
    RCOLCH          reduce using rule 43 (exp -> prefix_exp .)
    RPAREN          reduce using rule 43 (exp -> prefix_exp .)
    LCOLCH          shift and go to state 38
    LPAREN          shift and go to state 39

    args                           shift and go to state 37

state 50

    (44) exp -> TAG . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 89
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 51

    (45) exp -> MINUS . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 90
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 52

    (46) exp -> NOT . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 91
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 53

    (65) def_function -> function .

    DO              reduce using rule 65 (def_function -> function .)
    PLUS            reduce using rule 65 (def_function -> function .)
    MINUS           reduce using rule 65 (def_function -> function .)
    TIMES           reduce using rule 65 (def_function -> function .)
    DIVIDE          reduce using rule 65 (def_function -> function .)
    EXPO            reduce using rule 65 (def_function -> function .)
    PERCENTUAL      reduce using rule 65 (def_function -> function .)
    CONCAT          reduce using rule 65 (def_function -> function .)
    LT              reduce using rule 65 (def_function -> function .)
    LTEQUALS        reduce using rule 65 (def_function -> function .)
    GT              reduce using rule 65 (def_function -> function .)
    GTEQUALS        reduce using rule 65 (def_function -> function .)
    EQUALS          reduce using rule 65 (def_function -> function .)
    DIF             reduce using rule 65 (def_function -> function .)
    AND             reduce using rule 65 (def_function -> function .)
    OR              reduce using rule 65 (def_function -> function .)
    THEN            reduce using rule 65 (def_function -> function .)
    COMMA           reduce using rule 65 (def_function -> function .)
    SEMICOLON       reduce using rule 65 (def_function -> function .)
    BREAK           reduce using rule 65 (def_function -> function .)
    LOCAL           reduce using rule 65 (def_function -> function .)
    DUALCOLON       reduce using rule 65 (def_function -> function .)
    WHILE           reduce using rule 65 (def_function -> function .)
    REPEAT          reduce using rule 65 (def_function -> function .)
    IF              reduce using rule 65 (def_function -> function .)
    FOR             reduce using rule 65 (def_function -> function .)
    RETURN          reduce using rule 65 (def_function -> function .)
    NAME            reduce using rule 65 (def_function -> function .)
    $end            reduce using rule 65 (def_function -> function .)
    END             reduce using rule 65 (def_function -> function .)
    UNTIL           reduce using rule 65 (def_function -> function .)
    ELSE            reduce using rule 65 (def_function -> function .)
    ELSEIF          reduce using rule 65 (def_function -> function .)
    RCOLCH          reduce using rule 65 (def_function -> function .)
    RPAREN          reduce using rule 65 (def_function -> function .)


state 54

    (28) prefix_exp -> var .

    LCOLCH          reduce using rule 28 (prefix_exp -> var .)
    LPAREN          reduce using rule 28 (prefix_exp -> var .)
    DO              reduce using rule 28 (prefix_exp -> var .)
    PLUS            reduce using rule 28 (prefix_exp -> var .)
    MINUS           reduce using rule 28 (prefix_exp -> var .)
    TIMES           reduce using rule 28 (prefix_exp -> var .)
    DIVIDE          reduce using rule 28 (prefix_exp -> var .)
    EXPO            reduce using rule 28 (prefix_exp -> var .)
    PERCENTUAL      reduce using rule 28 (prefix_exp -> var .)
    CONCAT          reduce using rule 28 (prefix_exp -> var .)
    LT              reduce using rule 28 (prefix_exp -> var .)
    LTEQUALS        reduce using rule 28 (prefix_exp -> var .)
    GT              reduce using rule 28 (prefix_exp -> var .)
    GTEQUALS        reduce using rule 28 (prefix_exp -> var .)
    EQUALS          reduce using rule 28 (prefix_exp -> var .)
    DIF             reduce using rule 28 (prefix_exp -> var .)
    AND             reduce using rule 28 (prefix_exp -> var .)
    OR              reduce using rule 28 (prefix_exp -> var .)
    THEN            reduce using rule 28 (prefix_exp -> var .)
    COMMA           reduce using rule 28 (prefix_exp -> var .)
    SEMICOLON       reduce using rule 28 (prefix_exp -> var .)
    BREAK           reduce using rule 28 (prefix_exp -> var .)
    LOCAL           reduce using rule 28 (prefix_exp -> var .)
    DUALCOLON       reduce using rule 28 (prefix_exp -> var .)
    WHILE           reduce using rule 28 (prefix_exp -> var .)
    REPEAT          reduce using rule 28 (prefix_exp -> var .)
    IF              reduce using rule 28 (prefix_exp -> var .)
    FOR             reduce using rule 28 (prefix_exp -> var .)
    RETURN          reduce using rule 28 (prefix_exp -> var .)
    NAME            reduce using rule 28 (prefix_exp -> var .)
    $end            reduce using rule 28 (prefix_exp -> var .)
    END             reduce using rule 28 (prefix_exp -> var .)
    UNTIL           reduce using rule 28 (prefix_exp -> var .)
    ELSE            reduce using rule 28 (prefix_exp -> var .)
    ELSEIF          reduce using rule 28 (prefix_exp -> var .)
    RCOLCH          reduce using rule 28 (prefix_exp -> var .)
    RPAREN          reduce using rule 28 (prefix_exp -> var .)


state 55

    (94) struct_repeat -> REPEAT block . UNTIL exp

    UNTIL           shift and go to state 92


state 56

    (84) if -> IF exp . THEN block END
    (85) if -> IF exp . THEN block else
    (86) if -> IF exp . THEN block else_if else
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    THEN            shift and go to state 93
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 57

    (91) struct_for -> FOR NAME . ATRIB exp COMMA exp DO block END
    (92) struct_for -> FOR NAME . ATRIB exp COMMA exp COMMA exp DO block END
    (30) list_names -> NAME . COMMA list_names
    (31) list_names -> NAME .

    ATRIB           shift and go to state 94
    COMMA           shift and go to state 95
    IN              reduce using rule 31 (list_names -> NAME .)


state 58

    (93) struct_for_in -> FOR list_names . IN list_exps DO block END

    IN              shift and go to state 96


state 59

    (18) command_ret -> RETURN SEMICOLON .

    BREAK           reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    DO              reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    LOCAL           reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    DUALCOLON       reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    WHILE           reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    REPEAT          reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    IF              reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    FOR             reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    RETURN          reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    NAME            reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    $end            reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    END             reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    UNTIL           reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    ELSE            reduce using rule 18 (command_ret -> RETURN SEMICOLON .)
    ELSEIF          reduce using rule 18 (command_ret -> RETURN SEMICOLON .)


state 60

    (19) command_ret -> RETURN list_exps .
    (20) command_ret -> RETURN list_exps . SEMICOLON

    BREAK           reduce using rule 19 (command_ret -> RETURN list_exps .)
    DO              reduce using rule 19 (command_ret -> RETURN list_exps .)
    LOCAL           reduce using rule 19 (command_ret -> RETURN list_exps .)
    DUALCOLON       reduce using rule 19 (command_ret -> RETURN list_exps .)
    WHILE           reduce using rule 19 (command_ret -> RETURN list_exps .)
    REPEAT          reduce using rule 19 (command_ret -> RETURN list_exps .)
    IF              reduce using rule 19 (command_ret -> RETURN list_exps .)
    FOR             reduce using rule 19 (command_ret -> RETURN list_exps .)
    RETURN          reduce using rule 19 (command_ret -> RETURN list_exps .)
    NAME            reduce using rule 19 (command_ret -> RETURN list_exps .)
    $end            reduce using rule 19 (command_ret -> RETURN list_exps .)
    END             reduce using rule 19 (command_ret -> RETURN list_exps .)
    UNTIL           reduce using rule 19 (command_ret -> RETURN list_exps .)
    ELSE            reduce using rule 19 (command_ret -> RETURN list_exps .)
    ELSEIF          reduce using rule 19 (command_ret -> RETURN list_exps .)
    SEMICOLON       shift and go to state 97


state 61

    (34) list_exps -> exp . COMMA list_exps
    (35) list_exps -> exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    COMMA           shift and go to state 98
    SEMICOLON       reduce using rule 35 (list_exps -> exp .)
    BREAK           reduce using rule 35 (list_exps -> exp .)
    DO              reduce using rule 35 (list_exps -> exp .)
    LOCAL           reduce using rule 35 (list_exps -> exp .)
    DUALCOLON       reduce using rule 35 (list_exps -> exp .)
    WHILE           reduce using rule 35 (list_exps -> exp .)
    REPEAT          reduce using rule 35 (list_exps -> exp .)
    IF              reduce using rule 35 (list_exps -> exp .)
    FOR             reduce using rule 35 (list_exps -> exp .)
    RETURN          reduce using rule 35 (list_exps -> exp .)
    NAME            reduce using rule 35 (list_exps -> exp .)
    $end            reduce using rule 35 (list_exps -> exp .)
    END             reduce using rule 35 (list_exps -> exp .)
    UNTIL           reduce using rule 35 (list_exps -> exp .)
    ELSE            reduce using rule 35 (list_exps -> exp .)
    ELSEIF          reduce using rule 35 (list_exps -> exp .)
    RPAREN          reduce using rule 35 (list_exps -> exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 62

    (83) function -> FUNCTION name_function body_function .

    FUNCTION        reduce using rule 83 (function -> FUNCTION name_function body_function .)
    BREAK           reduce using rule 83 (function -> FUNCTION name_function body_function .)
    DO              reduce using rule 83 (function -> FUNCTION name_function body_function .)
    LOCAL           reduce using rule 83 (function -> FUNCTION name_function body_function .)
    DUALCOLON       reduce using rule 83 (function -> FUNCTION name_function body_function .)
    WHILE           reduce using rule 83 (function -> FUNCTION name_function body_function .)
    REPEAT          reduce using rule 83 (function -> FUNCTION name_function body_function .)
    IF              reduce using rule 83 (function -> FUNCTION name_function body_function .)
    FOR             reduce using rule 83 (function -> FUNCTION name_function body_function .)
    RETURN          reduce using rule 83 (function -> FUNCTION name_function body_function .)
    NAME            reduce using rule 83 (function -> FUNCTION name_function body_function .)
    $end            reduce using rule 83 (function -> FUNCTION name_function body_function .)
    PLUS            reduce using rule 83 (function -> FUNCTION name_function body_function .)
    MINUS           reduce using rule 83 (function -> FUNCTION name_function body_function .)
    TIMES           reduce using rule 83 (function -> FUNCTION name_function body_function .)
    DIVIDE          reduce using rule 83 (function -> FUNCTION name_function body_function .)
    EXPO            reduce using rule 83 (function -> FUNCTION name_function body_function .)
    PERCENTUAL      reduce using rule 83 (function -> FUNCTION name_function body_function .)
    CONCAT          reduce using rule 83 (function -> FUNCTION name_function body_function .)
    LT              reduce using rule 83 (function -> FUNCTION name_function body_function .)
    LTEQUALS        reduce using rule 83 (function -> FUNCTION name_function body_function .)
    GT              reduce using rule 83 (function -> FUNCTION name_function body_function .)
    GTEQUALS        reduce using rule 83 (function -> FUNCTION name_function body_function .)
    EQUALS          reduce using rule 83 (function -> FUNCTION name_function body_function .)
    DIF             reduce using rule 83 (function -> FUNCTION name_function body_function .)
    AND             reduce using rule 83 (function -> FUNCTION name_function body_function .)
    OR              reduce using rule 83 (function -> FUNCTION name_function body_function .)
    THEN            reduce using rule 83 (function -> FUNCTION name_function body_function .)
    COMMA           reduce using rule 83 (function -> FUNCTION name_function body_function .)
    SEMICOLON       reduce using rule 83 (function -> FUNCTION name_function body_function .)
    END             reduce using rule 83 (function -> FUNCTION name_function body_function .)
    UNTIL           reduce using rule 83 (function -> FUNCTION name_function body_function .)
    ELSE            reduce using rule 83 (function -> FUNCTION name_function body_function .)
    ELSEIF          reduce using rule 83 (function -> FUNCTION name_function body_function .)
    RCOLCH          reduce using rule 83 (function -> FUNCTION name_function body_function .)
    RPAREN          reduce using rule 83 (function -> FUNCTION name_function body_function .)


state 63

    (66) body_function -> LPAREN . list_pars RPAREN block END
    (67) list_pars -> . list_names2
    (68) list_pars -> . list_names2 COMMA VARARGS
    (69) list_pars -> . VARARGS
    (32) list_names2 -> . list_names2 COMMA NAME
    (33) list_names2 -> . NAME

    VARARGS         shift and go to state 101
    NAME            shift and go to state 102

    list_pars                      shift and go to state 99
    list_names2                    shift and go to state 100

state 64

    (23) name_function -> NAME COLON . NAME

    NAME            shift and go to state 103


state 65

    (6) command -> list_vars ATRIB list_exps .

    BREAK           reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    DO              reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    LOCAL           reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    DUALCOLON       reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    WHILE           reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    REPEAT          reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    IF              reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    FOR             reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    RETURN          reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    NAME            reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    $end            reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    END             reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    UNTIL           reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    ELSE            reduce using rule 6 (command -> list_vars ATRIB list_exps .)
    ELSEIF          reduce using rule 6 (command -> list_vars ATRIB list_exps .)


state 66

    (10) command -> DO block END .

    BREAK           reduce using rule 10 (command -> DO block END .)
    DO              reduce using rule 10 (command -> DO block END .)
    LOCAL           reduce using rule 10 (command -> DO block END .)
    DUALCOLON       reduce using rule 10 (command -> DO block END .)
    WHILE           reduce using rule 10 (command -> DO block END .)
    REPEAT          reduce using rule 10 (command -> DO block END .)
    IF              reduce using rule 10 (command -> DO block END .)
    FOR             reduce using rule 10 (command -> DO block END .)
    RETURN          reduce using rule 10 (command -> DO block END .)
    NAME            reduce using rule 10 (command -> DO block END .)
    $end            reduce using rule 10 (command -> DO block END .)
    END             reduce using rule 10 (command -> DO block END .)
    UNTIL           reduce using rule 10 (command -> DO block END .)
    ELSE            reduce using rule 10 (command -> DO block END .)
    ELSEIF          reduce using rule 10 (command -> DO block END .)


state 67

    (16) command -> LOCAL list_vars ATRIB . list_exps
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    list_exps                      shift and go to state 104
    exp                            shift and go to state 61
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 68

    (25) list_vars -> var COMMA list_vars .

    ATRIB           reduce using rule 25 (list_vars -> var COMMA list_vars .)


state 69

    (27) var -> prefix_exp LCOLCH exp . RCOLCH
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    RCOLCH          shift and go to state 105
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 70

    (63) args -> LPAREN list_exps . RPAREN

    RPAREN          shift and go to state 106


state 71

    (64) args -> LPAREN RPAREN .

    BREAK           reduce using rule 64 (args -> LPAREN RPAREN .)
    DO              reduce using rule 64 (args -> LPAREN RPAREN .)
    LOCAL           reduce using rule 64 (args -> LPAREN RPAREN .)
    DUALCOLON       reduce using rule 64 (args -> LPAREN RPAREN .)
    WHILE           reduce using rule 64 (args -> LPAREN RPAREN .)
    REPEAT          reduce using rule 64 (args -> LPAREN RPAREN .)
    IF              reduce using rule 64 (args -> LPAREN RPAREN .)
    FOR             reduce using rule 64 (args -> LPAREN RPAREN .)
    RETURN          reduce using rule 64 (args -> LPAREN RPAREN .)
    NAME            reduce using rule 64 (args -> LPAREN RPAREN .)
    $end            reduce using rule 64 (args -> LPAREN RPAREN .)
    LCOLCH          reduce using rule 64 (args -> LPAREN RPAREN .)
    LPAREN          reduce using rule 64 (args -> LPAREN RPAREN .)
    END             reduce using rule 64 (args -> LPAREN RPAREN .)
    UNTIL           reduce using rule 64 (args -> LPAREN RPAREN .)
    ELSE            reduce using rule 64 (args -> LPAREN RPAREN .)
    ELSEIF          reduce using rule 64 (args -> LPAREN RPAREN .)
    PLUS            reduce using rule 64 (args -> LPAREN RPAREN .)
    MINUS           reduce using rule 64 (args -> LPAREN RPAREN .)
    TIMES           reduce using rule 64 (args -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 64 (args -> LPAREN RPAREN .)
    EXPO            reduce using rule 64 (args -> LPAREN RPAREN .)
    PERCENTUAL      reduce using rule 64 (args -> LPAREN RPAREN .)
    CONCAT          reduce using rule 64 (args -> LPAREN RPAREN .)
    LT              reduce using rule 64 (args -> LPAREN RPAREN .)
    LTEQUALS        reduce using rule 64 (args -> LPAREN RPAREN .)
    GT              reduce using rule 64 (args -> LPAREN RPAREN .)
    GTEQUALS        reduce using rule 64 (args -> LPAREN RPAREN .)
    EQUALS          reduce using rule 64 (args -> LPAREN RPAREN .)
    DIF             reduce using rule 64 (args -> LPAREN RPAREN .)
    AND             reduce using rule 64 (args -> LPAREN RPAREN .)
    OR              reduce using rule 64 (args -> LPAREN RPAREN .)
    THEN            reduce using rule 64 (args -> LPAREN RPAREN .)
    COMMA           reduce using rule 64 (args -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 64 (args -> LPAREN RPAREN .)
    RCOLCH          reduce using rule 64 (args -> LPAREN RPAREN .)
    RPAREN          reduce using rule 64 (args -> LPAREN RPAREN .)


state 72

    (21) rotulo -> DUALCOLON NAME DUALCOLON .

    BREAK           reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    DO              reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    LOCAL           reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    DUALCOLON       reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    WHILE           reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    REPEAT          reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    IF              reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    FOR             reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    RETURN          reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    NAME            reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    $end            reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    END             reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    UNTIL           reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    ELSE            reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)
    ELSEIF          reduce using rule 21 (rotulo -> DUALCOLON NAME DUALCOLON .)


state 73

    (90) struct_while -> WHILE exp DO . block END
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    block                          shift and go to state 107
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 74

    (47) exp -> exp PLUS . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 108
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 75

    (48) exp -> exp MINUS . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 109
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 76

    (49) exp -> exp TIMES . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 110
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 77

    (50) exp -> exp DIVIDE . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 111
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 78

    (51) exp -> exp EXPO . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 112
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 79

    (52) exp -> exp PERCENTUAL . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 113
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 80

    (53) exp -> exp CONCAT . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 114
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 81

    (54) exp -> exp LT . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 115
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 82

    (55) exp -> exp LTEQUALS . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 116
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 83

    (56) exp -> exp GT . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 117
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 84

    (57) exp -> exp GTEQUALS . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 118
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 85

    (58) exp -> exp EQUALS . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 119
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 86

    (59) exp -> exp DIF . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 120
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 87

    (60) exp -> exp AND . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 121
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 88

    (61) exp -> exp OR . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 122
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 89

    (44) exp -> TAG exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 44 (exp -> TAG exp .)
    PLUS            reduce using rule 44 (exp -> TAG exp .)
    MINUS           reduce using rule 44 (exp -> TAG exp .)
    TIMES           reduce using rule 44 (exp -> TAG exp .)
    DIVIDE          reduce using rule 44 (exp -> TAG exp .)
    PERCENTUAL      reduce using rule 44 (exp -> TAG exp .)
    CONCAT          reduce using rule 44 (exp -> TAG exp .)
    LT              reduce using rule 44 (exp -> TAG exp .)
    LTEQUALS        reduce using rule 44 (exp -> TAG exp .)
    GT              reduce using rule 44 (exp -> TAG exp .)
    GTEQUALS        reduce using rule 44 (exp -> TAG exp .)
    EQUALS          reduce using rule 44 (exp -> TAG exp .)
    DIF             reduce using rule 44 (exp -> TAG exp .)
    AND             reduce using rule 44 (exp -> TAG exp .)
    OR              reduce using rule 44 (exp -> TAG exp .)
    THEN            reduce using rule 44 (exp -> TAG exp .)
    COMMA           reduce using rule 44 (exp -> TAG exp .)
    SEMICOLON       reduce using rule 44 (exp -> TAG exp .)
    BREAK           reduce using rule 44 (exp -> TAG exp .)
    LOCAL           reduce using rule 44 (exp -> TAG exp .)
    DUALCOLON       reduce using rule 44 (exp -> TAG exp .)
    WHILE           reduce using rule 44 (exp -> TAG exp .)
    REPEAT          reduce using rule 44 (exp -> TAG exp .)
    IF              reduce using rule 44 (exp -> TAG exp .)
    FOR             reduce using rule 44 (exp -> TAG exp .)
    RETURN          reduce using rule 44 (exp -> TAG exp .)
    NAME            reduce using rule 44 (exp -> TAG exp .)
    $end            reduce using rule 44 (exp -> TAG exp .)
    END             reduce using rule 44 (exp -> TAG exp .)
    UNTIL           reduce using rule 44 (exp -> TAG exp .)
    ELSE            reduce using rule 44 (exp -> TAG exp .)
    ELSEIF          reduce using rule 44 (exp -> TAG exp .)
    RCOLCH          reduce using rule 44 (exp -> TAG exp .)
    RPAREN          reduce using rule 44 (exp -> TAG exp .)
    EXPO            shift and go to state 78

  ! EXPO            [ reduce using rule 44 (exp -> TAG exp .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! TIMES           [ shift and go to state 76 ]
  ! DIVIDE          [ shift and go to state 77 ]
  ! PERCENTUAL      [ shift and go to state 79 ]
  ! CONCAT          [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 90

    (45) exp -> MINUS exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 45 (exp -> MINUS exp .)
    PLUS            reduce using rule 45 (exp -> MINUS exp .)
    MINUS           reduce using rule 45 (exp -> MINUS exp .)
    CONCAT          reduce using rule 45 (exp -> MINUS exp .)
    LT              reduce using rule 45 (exp -> MINUS exp .)
    LTEQUALS        reduce using rule 45 (exp -> MINUS exp .)
    GT              reduce using rule 45 (exp -> MINUS exp .)
    GTEQUALS        reduce using rule 45 (exp -> MINUS exp .)
    EQUALS          reduce using rule 45 (exp -> MINUS exp .)
    DIF             reduce using rule 45 (exp -> MINUS exp .)
    AND             reduce using rule 45 (exp -> MINUS exp .)
    OR              reduce using rule 45 (exp -> MINUS exp .)
    THEN            reduce using rule 45 (exp -> MINUS exp .)
    COMMA           reduce using rule 45 (exp -> MINUS exp .)
    SEMICOLON       reduce using rule 45 (exp -> MINUS exp .)
    BREAK           reduce using rule 45 (exp -> MINUS exp .)
    LOCAL           reduce using rule 45 (exp -> MINUS exp .)
    DUALCOLON       reduce using rule 45 (exp -> MINUS exp .)
    WHILE           reduce using rule 45 (exp -> MINUS exp .)
    REPEAT          reduce using rule 45 (exp -> MINUS exp .)
    IF              reduce using rule 45 (exp -> MINUS exp .)
    FOR             reduce using rule 45 (exp -> MINUS exp .)
    RETURN          reduce using rule 45 (exp -> MINUS exp .)
    NAME            reduce using rule 45 (exp -> MINUS exp .)
    $end            reduce using rule 45 (exp -> MINUS exp .)
    END             reduce using rule 45 (exp -> MINUS exp .)
    UNTIL           reduce using rule 45 (exp -> MINUS exp .)
    ELSE            reduce using rule 45 (exp -> MINUS exp .)
    ELSEIF          reduce using rule 45 (exp -> MINUS exp .)
    RCOLCH          reduce using rule 45 (exp -> MINUS exp .)
    RPAREN          reduce using rule 45 (exp -> MINUS exp .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79

  ! TIMES           [ reduce using rule 45 (exp -> MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 45 (exp -> MINUS exp .) ]
  ! EXPO            [ reduce using rule 45 (exp -> MINUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 45 (exp -> MINUS exp .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! CONCAT          [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 91

    (46) exp -> NOT exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 46 (exp -> NOT exp .)
    PLUS            reduce using rule 46 (exp -> NOT exp .)
    MINUS           reduce using rule 46 (exp -> NOT exp .)
    TIMES           reduce using rule 46 (exp -> NOT exp .)
    DIVIDE          reduce using rule 46 (exp -> NOT exp .)
    PERCENTUAL      reduce using rule 46 (exp -> NOT exp .)
    CONCAT          reduce using rule 46 (exp -> NOT exp .)
    LT              reduce using rule 46 (exp -> NOT exp .)
    LTEQUALS        reduce using rule 46 (exp -> NOT exp .)
    GT              reduce using rule 46 (exp -> NOT exp .)
    GTEQUALS        reduce using rule 46 (exp -> NOT exp .)
    EQUALS          reduce using rule 46 (exp -> NOT exp .)
    DIF             reduce using rule 46 (exp -> NOT exp .)
    AND             reduce using rule 46 (exp -> NOT exp .)
    OR              reduce using rule 46 (exp -> NOT exp .)
    THEN            reduce using rule 46 (exp -> NOT exp .)
    COMMA           reduce using rule 46 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 46 (exp -> NOT exp .)
    BREAK           reduce using rule 46 (exp -> NOT exp .)
    LOCAL           reduce using rule 46 (exp -> NOT exp .)
    DUALCOLON       reduce using rule 46 (exp -> NOT exp .)
    WHILE           reduce using rule 46 (exp -> NOT exp .)
    REPEAT          reduce using rule 46 (exp -> NOT exp .)
    IF              reduce using rule 46 (exp -> NOT exp .)
    FOR             reduce using rule 46 (exp -> NOT exp .)
    RETURN          reduce using rule 46 (exp -> NOT exp .)
    NAME            reduce using rule 46 (exp -> NOT exp .)
    $end            reduce using rule 46 (exp -> NOT exp .)
    END             reduce using rule 46 (exp -> NOT exp .)
    UNTIL           reduce using rule 46 (exp -> NOT exp .)
    ELSE            reduce using rule 46 (exp -> NOT exp .)
    ELSEIF          reduce using rule 46 (exp -> NOT exp .)
    RCOLCH          reduce using rule 46 (exp -> NOT exp .)
    RPAREN          reduce using rule 46 (exp -> NOT exp .)
    EXPO            shift and go to state 78

  ! EXPO            [ reduce using rule 46 (exp -> NOT exp .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! TIMES           [ shift and go to state 76 ]
  ! DIVIDE          [ shift and go to state 77 ]
  ! PERCENTUAL      [ shift and go to state 79 ]
  ! CONCAT          [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 92

    (94) struct_repeat -> REPEAT block UNTIL . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 123
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 93

    (84) if -> IF exp THEN . block END
    (85) if -> IF exp THEN . block else
    (86) if -> IF exp THEN . block else_if else
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    block                          shift and go to state 124
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 94

    (91) struct_for -> FOR NAME ATRIB . exp COMMA exp DO block END
    (92) struct_for -> FOR NAME ATRIB . exp COMMA exp COMMA exp DO block END
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 125
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 95

    (30) list_names -> NAME COMMA . list_names
    (30) list_names -> . NAME COMMA list_names
    (31) list_names -> . NAME

    NAME            shift and go to state 126

    list_names                     shift and go to state 127

state 96

    (93) struct_for_in -> FOR list_names IN . list_exps DO block END
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    list_exps                      shift and go to state 128
    exp                            shift and go to state 61
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 97

    (20) command_ret -> RETURN list_exps SEMICOLON .

    BREAK           reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    DO              reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    LOCAL           reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    DUALCOLON       reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    WHILE           reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    REPEAT          reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    IF              reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    FOR             reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    RETURN          reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    NAME            reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    $end            reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    END             reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    UNTIL           reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    ELSE            reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)
    ELSEIF          reduce using rule 20 (command_ret -> RETURN list_exps SEMICOLON .)


state 98

    (34) list_exps -> exp COMMA . list_exps
    (34) list_exps -> . exp COMMA list_exps
    (35) list_exps -> . exp
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 61
    list_exps                      shift and go to state 129
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 99

    (66) body_function -> LPAREN list_pars . RPAREN block END

    RPAREN          shift and go to state 130


state 100

    (67) list_pars -> list_names2 .
    (68) list_pars -> list_names2 . COMMA VARARGS
    (32) list_names2 -> list_names2 . COMMA NAME

    RPAREN          reduce using rule 67 (list_pars -> list_names2 .)
    COMMA           shift and go to state 131


state 101

    (69) list_pars -> VARARGS .

    RPAREN          reduce using rule 69 (list_pars -> VARARGS .)


state 102

    (33) list_names2 -> NAME .

    COMMA           reduce using rule 33 (list_names2 -> NAME .)
    RPAREN          reduce using rule 33 (list_names2 -> NAME .)


state 103

    (23) name_function -> NAME COLON NAME .

    LPAREN          reduce using rule 23 (name_function -> NAME COLON NAME .)


state 104

    (16) command -> LOCAL list_vars ATRIB list_exps .

    BREAK           reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    DO              reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    LOCAL           reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    DUALCOLON       reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    WHILE           reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    REPEAT          reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    IF              reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    FOR             reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    RETURN          reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    NAME            reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    $end            reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    END             reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    UNTIL           reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    ELSE            reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)
    ELSEIF          reduce using rule 16 (command -> LOCAL list_vars ATRIB list_exps .)


state 105

    (27) var -> prefix_exp LCOLCH exp RCOLCH .

    COMMA           reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    ATRIB           reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LCOLCH          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LPAREN          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DO              reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    PLUS            reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    MINUS           reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    TIMES           reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DIVIDE          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    EXPO            reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    PERCENTUAL      reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    CONCAT          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LT              reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LTEQUALS        reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    GT              reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    GTEQUALS        reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    EQUALS          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DIF             reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    AND             reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    OR              reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    THEN            reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    SEMICOLON       reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    BREAK           reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    LOCAL           reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    DUALCOLON       reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    WHILE           reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    REPEAT          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    IF              reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    FOR             reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    RETURN          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    NAME            reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    $end            reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    END             reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    UNTIL           reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    ELSE            reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    ELSEIF          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    RCOLCH          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)
    RPAREN          reduce using rule 27 (var -> prefix_exp LCOLCH exp RCOLCH .)


state 106

    (63) args -> LPAREN list_exps RPAREN .

    BREAK           reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    DO              reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    LOCAL           reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    DUALCOLON       reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    WHILE           reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    REPEAT          reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    IF              reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    FOR             reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    RETURN          reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    NAME            reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    $end            reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    LCOLCH          reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    LPAREN          reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    END             reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    UNTIL           reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    ELSE            reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    ELSEIF          reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    PLUS            reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    MINUS           reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    TIMES           reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    DIVIDE          reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    EXPO            reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    PERCENTUAL      reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    CONCAT          reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    LT              reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    LTEQUALS        reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    GT              reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    GTEQUALS        reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    EQUALS          reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    DIF             reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    AND             reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    OR              reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    THEN            reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    COMMA           reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    SEMICOLON       reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    RCOLCH          reduce using rule 63 (args -> LPAREN list_exps RPAREN .)
    RPAREN          reduce using rule 63 (args -> LPAREN list_exps RPAREN .)


state 107

    (90) struct_while -> WHILE exp DO block . END

    END             shift and go to state 132


state 108

    (47) exp -> exp PLUS exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 47 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 47 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 47 (exp -> exp PLUS exp .)
    CONCAT          reduce using rule 47 (exp -> exp PLUS exp .)
    LT              reduce using rule 47 (exp -> exp PLUS exp .)
    LTEQUALS        reduce using rule 47 (exp -> exp PLUS exp .)
    GT              reduce using rule 47 (exp -> exp PLUS exp .)
    GTEQUALS        reduce using rule 47 (exp -> exp PLUS exp .)
    EQUALS          reduce using rule 47 (exp -> exp PLUS exp .)
    DIF             reduce using rule 47 (exp -> exp PLUS exp .)
    AND             reduce using rule 47 (exp -> exp PLUS exp .)
    OR              reduce using rule 47 (exp -> exp PLUS exp .)
    THEN            reduce using rule 47 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 47 (exp -> exp PLUS exp .)
    SEMICOLON       reduce using rule 47 (exp -> exp PLUS exp .)
    BREAK           reduce using rule 47 (exp -> exp PLUS exp .)
    LOCAL           reduce using rule 47 (exp -> exp PLUS exp .)
    DUALCOLON       reduce using rule 47 (exp -> exp PLUS exp .)
    WHILE           reduce using rule 47 (exp -> exp PLUS exp .)
    REPEAT          reduce using rule 47 (exp -> exp PLUS exp .)
    IF              reduce using rule 47 (exp -> exp PLUS exp .)
    FOR             reduce using rule 47 (exp -> exp PLUS exp .)
    RETURN          reduce using rule 47 (exp -> exp PLUS exp .)
    NAME            reduce using rule 47 (exp -> exp PLUS exp .)
    $end            reduce using rule 47 (exp -> exp PLUS exp .)
    END             reduce using rule 47 (exp -> exp PLUS exp .)
    UNTIL           reduce using rule 47 (exp -> exp PLUS exp .)
    ELSE            reduce using rule 47 (exp -> exp PLUS exp .)
    ELSEIF          reduce using rule 47 (exp -> exp PLUS exp .)
    RCOLCH          reduce using rule 47 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 47 (exp -> exp PLUS exp .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79

  ! TIMES           [ reduce using rule 47 (exp -> exp PLUS exp .) ]
  ! DIVIDE          [ reduce using rule 47 (exp -> exp PLUS exp .) ]
  ! EXPO            [ reduce using rule 47 (exp -> exp PLUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 47 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! CONCAT          [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 109

    (48) exp -> exp MINUS exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 48 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 48 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 48 (exp -> exp MINUS exp .)
    CONCAT          reduce using rule 48 (exp -> exp MINUS exp .)
    LT              reduce using rule 48 (exp -> exp MINUS exp .)
    LTEQUALS        reduce using rule 48 (exp -> exp MINUS exp .)
    GT              reduce using rule 48 (exp -> exp MINUS exp .)
    GTEQUALS        reduce using rule 48 (exp -> exp MINUS exp .)
    EQUALS          reduce using rule 48 (exp -> exp MINUS exp .)
    DIF             reduce using rule 48 (exp -> exp MINUS exp .)
    AND             reduce using rule 48 (exp -> exp MINUS exp .)
    OR              reduce using rule 48 (exp -> exp MINUS exp .)
    THEN            reduce using rule 48 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 48 (exp -> exp MINUS exp .)
    SEMICOLON       reduce using rule 48 (exp -> exp MINUS exp .)
    BREAK           reduce using rule 48 (exp -> exp MINUS exp .)
    LOCAL           reduce using rule 48 (exp -> exp MINUS exp .)
    DUALCOLON       reduce using rule 48 (exp -> exp MINUS exp .)
    WHILE           reduce using rule 48 (exp -> exp MINUS exp .)
    REPEAT          reduce using rule 48 (exp -> exp MINUS exp .)
    IF              reduce using rule 48 (exp -> exp MINUS exp .)
    FOR             reduce using rule 48 (exp -> exp MINUS exp .)
    RETURN          reduce using rule 48 (exp -> exp MINUS exp .)
    NAME            reduce using rule 48 (exp -> exp MINUS exp .)
    $end            reduce using rule 48 (exp -> exp MINUS exp .)
    END             reduce using rule 48 (exp -> exp MINUS exp .)
    UNTIL           reduce using rule 48 (exp -> exp MINUS exp .)
    ELSE            reduce using rule 48 (exp -> exp MINUS exp .)
    ELSEIF          reduce using rule 48 (exp -> exp MINUS exp .)
    RCOLCH          reduce using rule 48 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 48 (exp -> exp MINUS exp .)
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79

  ! TIMES           [ reduce using rule 48 (exp -> exp MINUS exp .) ]
  ! DIVIDE          [ reduce using rule 48 (exp -> exp MINUS exp .) ]
  ! EXPO            [ reduce using rule 48 (exp -> exp MINUS exp .) ]
  ! PERCENTUAL      [ reduce using rule 48 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! CONCAT          [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 110

    (49) exp -> exp TIMES exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 49 (exp -> exp TIMES exp .)
    PLUS            reduce using rule 49 (exp -> exp TIMES exp .)
    MINUS           reduce using rule 49 (exp -> exp TIMES exp .)
    TIMES           reduce using rule 49 (exp -> exp TIMES exp .)
    DIVIDE          reduce using rule 49 (exp -> exp TIMES exp .)
    PERCENTUAL      reduce using rule 49 (exp -> exp TIMES exp .)
    CONCAT          reduce using rule 49 (exp -> exp TIMES exp .)
    LT              reduce using rule 49 (exp -> exp TIMES exp .)
    LTEQUALS        reduce using rule 49 (exp -> exp TIMES exp .)
    GT              reduce using rule 49 (exp -> exp TIMES exp .)
    GTEQUALS        reduce using rule 49 (exp -> exp TIMES exp .)
    EQUALS          reduce using rule 49 (exp -> exp TIMES exp .)
    DIF             reduce using rule 49 (exp -> exp TIMES exp .)
    AND             reduce using rule 49 (exp -> exp TIMES exp .)
    OR              reduce using rule 49 (exp -> exp TIMES exp .)
    THEN            reduce using rule 49 (exp -> exp TIMES exp .)
    COMMA           reduce using rule 49 (exp -> exp TIMES exp .)
    SEMICOLON       reduce using rule 49 (exp -> exp TIMES exp .)
    BREAK           reduce using rule 49 (exp -> exp TIMES exp .)
    LOCAL           reduce using rule 49 (exp -> exp TIMES exp .)
    DUALCOLON       reduce using rule 49 (exp -> exp TIMES exp .)
    WHILE           reduce using rule 49 (exp -> exp TIMES exp .)
    REPEAT          reduce using rule 49 (exp -> exp TIMES exp .)
    IF              reduce using rule 49 (exp -> exp TIMES exp .)
    FOR             reduce using rule 49 (exp -> exp TIMES exp .)
    RETURN          reduce using rule 49 (exp -> exp TIMES exp .)
    NAME            reduce using rule 49 (exp -> exp TIMES exp .)
    $end            reduce using rule 49 (exp -> exp TIMES exp .)
    END             reduce using rule 49 (exp -> exp TIMES exp .)
    UNTIL           reduce using rule 49 (exp -> exp TIMES exp .)
    ELSE            reduce using rule 49 (exp -> exp TIMES exp .)
    ELSEIF          reduce using rule 49 (exp -> exp TIMES exp .)
    RCOLCH          reduce using rule 49 (exp -> exp TIMES exp .)
    RPAREN          reduce using rule 49 (exp -> exp TIMES exp .)
    EXPO            shift and go to state 78

  ! EXPO            [ reduce using rule 49 (exp -> exp TIMES exp .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! TIMES           [ shift and go to state 76 ]
  ! DIVIDE          [ shift and go to state 77 ]
  ! PERCENTUAL      [ shift and go to state 79 ]
  ! CONCAT          [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 111

    (50) exp -> exp DIVIDE exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 50 (exp -> exp DIVIDE exp .)
    PLUS            reduce using rule 50 (exp -> exp DIVIDE exp .)
    MINUS           reduce using rule 50 (exp -> exp DIVIDE exp .)
    TIMES           reduce using rule 50 (exp -> exp DIVIDE exp .)
    DIVIDE          reduce using rule 50 (exp -> exp DIVIDE exp .)
    PERCENTUAL      reduce using rule 50 (exp -> exp DIVIDE exp .)
    CONCAT          reduce using rule 50 (exp -> exp DIVIDE exp .)
    LT              reduce using rule 50 (exp -> exp DIVIDE exp .)
    LTEQUALS        reduce using rule 50 (exp -> exp DIVIDE exp .)
    GT              reduce using rule 50 (exp -> exp DIVIDE exp .)
    GTEQUALS        reduce using rule 50 (exp -> exp DIVIDE exp .)
    EQUALS          reduce using rule 50 (exp -> exp DIVIDE exp .)
    DIF             reduce using rule 50 (exp -> exp DIVIDE exp .)
    AND             reduce using rule 50 (exp -> exp DIVIDE exp .)
    OR              reduce using rule 50 (exp -> exp DIVIDE exp .)
    THEN            reduce using rule 50 (exp -> exp DIVIDE exp .)
    COMMA           reduce using rule 50 (exp -> exp DIVIDE exp .)
    SEMICOLON       reduce using rule 50 (exp -> exp DIVIDE exp .)
    BREAK           reduce using rule 50 (exp -> exp DIVIDE exp .)
    LOCAL           reduce using rule 50 (exp -> exp DIVIDE exp .)
    DUALCOLON       reduce using rule 50 (exp -> exp DIVIDE exp .)
    WHILE           reduce using rule 50 (exp -> exp DIVIDE exp .)
    REPEAT          reduce using rule 50 (exp -> exp DIVIDE exp .)
    IF              reduce using rule 50 (exp -> exp DIVIDE exp .)
    FOR             reduce using rule 50 (exp -> exp DIVIDE exp .)
    RETURN          reduce using rule 50 (exp -> exp DIVIDE exp .)
    NAME            reduce using rule 50 (exp -> exp DIVIDE exp .)
    $end            reduce using rule 50 (exp -> exp DIVIDE exp .)
    END             reduce using rule 50 (exp -> exp DIVIDE exp .)
    UNTIL           reduce using rule 50 (exp -> exp DIVIDE exp .)
    ELSE            reduce using rule 50 (exp -> exp DIVIDE exp .)
    ELSEIF          reduce using rule 50 (exp -> exp DIVIDE exp .)
    RCOLCH          reduce using rule 50 (exp -> exp DIVIDE exp .)
    RPAREN          reduce using rule 50 (exp -> exp DIVIDE exp .)
    EXPO            shift and go to state 78

  ! EXPO            [ reduce using rule 50 (exp -> exp DIVIDE exp .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! TIMES           [ shift and go to state 76 ]
  ! DIVIDE          [ shift and go to state 77 ]
  ! PERCENTUAL      [ shift and go to state 79 ]
  ! CONCAT          [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 112

    (51) exp -> exp EXPO exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 51 (exp -> exp EXPO exp .)
    PLUS            reduce using rule 51 (exp -> exp EXPO exp .)
    MINUS           reduce using rule 51 (exp -> exp EXPO exp .)
    TIMES           reduce using rule 51 (exp -> exp EXPO exp .)
    DIVIDE          reduce using rule 51 (exp -> exp EXPO exp .)
    EXPO            reduce using rule 51 (exp -> exp EXPO exp .)
    PERCENTUAL      reduce using rule 51 (exp -> exp EXPO exp .)
    CONCAT          reduce using rule 51 (exp -> exp EXPO exp .)
    LT              reduce using rule 51 (exp -> exp EXPO exp .)
    LTEQUALS        reduce using rule 51 (exp -> exp EXPO exp .)
    GT              reduce using rule 51 (exp -> exp EXPO exp .)
    GTEQUALS        reduce using rule 51 (exp -> exp EXPO exp .)
    EQUALS          reduce using rule 51 (exp -> exp EXPO exp .)
    DIF             reduce using rule 51 (exp -> exp EXPO exp .)
    AND             reduce using rule 51 (exp -> exp EXPO exp .)
    OR              reduce using rule 51 (exp -> exp EXPO exp .)
    THEN            reduce using rule 51 (exp -> exp EXPO exp .)
    COMMA           reduce using rule 51 (exp -> exp EXPO exp .)
    SEMICOLON       reduce using rule 51 (exp -> exp EXPO exp .)
    BREAK           reduce using rule 51 (exp -> exp EXPO exp .)
    LOCAL           reduce using rule 51 (exp -> exp EXPO exp .)
    DUALCOLON       reduce using rule 51 (exp -> exp EXPO exp .)
    WHILE           reduce using rule 51 (exp -> exp EXPO exp .)
    REPEAT          reduce using rule 51 (exp -> exp EXPO exp .)
    IF              reduce using rule 51 (exp -> exp EXPO exp .)
    FOR             reduce using rule 51 (exp -> exp EXPO exp .)
    RETURN          reduce using rule 51 (exp -> exp EXPO exp .)
    NAME            reduce using rule 51 (exp -> exp EXPO exp .)
    $end            reduce using rule 51 (exp -> exp EXPO exp .)
    END             reduce using rule 51 (exp -> exp EXPO exp .)
    UNTIL           reduce using rule 51 (exp -> exp EXPO exp .)
    ELSE            reduce using rule 51 (exp -> exp EXPO exp .)
    ELSEIF          reduce using rule 51 (exp -> exp EXPO exp .)
    RCOLCH          reduce using rule 51 (exp -> exp EXPO exp .)
    RPAREN          reduce using rule 51 (exp -> exp EXPO exp .)

  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! TIMES           [ shift and go to state 76 ]
  ! DIVIDE          [ shift and go to state 77 ]
  ! EXPO            [ shift and go to state 78 ]
  ! PERCENTUAL      [ shift and go to state 79 ]
  ! CONCAT          [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 113

    (52) exp -> exp PERCENTUAL exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    PLUS            reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    MINUS           reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    TIMES           reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    DIVIDE          reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    PERCENTUAL      reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    CONCAT          reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    LT              reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    LTEQUALS        reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    GT              reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    GTEQUALS        reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    EQUALS          reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    DIF             reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    AND             reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    OR              reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    THEN            reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    COMMA           reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    BREAK           reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    LOCAL           reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    DUALCOLON       reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    WHILE           reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    REPEAT          reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    IF              reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    FOR             reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    RETURN          reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    NAME            reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    $end            reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    END             reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    UNTIL           reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    ELSE            reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    ELSEIF          reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    RCOLCH          reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    RPAREN          reduce using rule 52 (exp -> exp PERCENTUAL exp .)
    EXPO            shift and go to state 78

  ! EXPO            [ reduce using rule 52 (exp -> exp PERCENTUAL exp .) ]
  ! PLUS            [ shift and go to state 74 ]
  ! MINUS           [ shift and go to state 75 ]
  ! TIMES           [ shift and go to state 76 ]
  ! DIVIDE          [ shift and go to state 77 ]
  ! PERCENTUAL      [ shift and go to state 79 ]
  ! CONCAT          [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 114

    (53) exp -> exp CONCAT exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 53 (exp -> exp CONCAT exp .)
    CONCAT          reduce using rule 53 (exp -> exp CONCAT exp .)
    LT              reduce using rule 53 (exp -> exp CONCAT exp .)
    LTEQUALS        reduce using rule 53 (exp -> exp CONCAT exp .)
    GT              reduce using rule 53 (exp -> exp CONCAT exp .)
    GTEQUALS        reduce using rule 53 (exp -> exp CONCAT exp .)
    EQUALS          reduce using rule 53 (exp -> exp CONCAT exp .)
    DIF             reduce using rule 53 (exp -> exp CONCAT exp .)
    AND             reduce using rule 53 (exp -> exp CONCAT exp .)
    OR              reduce using rule 53 (exp -> exp CONCAT exp .)
    THEN            reduce using rule 53 (exp -> exp CONCAT exp .)
    COMMA           reduce using rule 53 (exp -> exp CONCAT exp .)
    SEMICOLON       reduce using rule 53 (exp -> exp CONCAT exp .)
    BREAK           reduce using rule 53 (exp -> exp CONCAT exp .)
    LOCAL           reduce using rule 53 (exp -> exp CONCAT exp .)
    DUALCOLON       reduce using rule 53 (exp -> exp CONCAT exp .)
    WHILE           reduce using rule 53 (exp -> exp CONCAT exp .)
    REPEAT          reduce using rule 53 (exp -> exp CONCAT exp .)
    IF              reduce using rule 53 (exp -> exp CONCAT exp .)
    FOR             reduce using rule 53 (exp -> exp CONCAT exp .)
    RETURN          reduce using rule 53 (exp -> exp CONCAT exp .)
    NAME            reduce using rule 53 (exp -> exp CONCAT exp .)
    $end            reduce using rule 53 (exp -> exp CONCAT exp .)
    END             reduce using rule 53 (exp -> exp CONCAT exp .)
    UNTIL           reduce using rule 53 (exp -> exp CONCAT exp .)
    ELSE            reduce using rule 53 (exp -> exp CONCAT exp .)
    ELSEIF          reduce using rule 53 (exp -> exp CONCAT exp .)
    RCOLCH          reduce using rule 53 (exp -> exp CONCAT exp .)
    RPAREN          reduce using rule 53 (exp -> exp CONCAT exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79

  ! PLUS            [ reduce using rule 53 (exp -> exp CONCAT exp .) ]
  ! MINUS           [ reduce using rule 53 (exp -> exp CONCAT exp .) ]
  ! TIMES           [ reduce using rule 53 (exp -> exp CONCAT exp .) ]
  ! DIVIDE          [ reduce using rule 53 (exp -> exp CONCAT exp .) ]
  ! EXPO            [ reduce using rule 53 (exp -> exp CONCAT exp .) ]
  ! PERCENTUAL      [ reduce using rule 53 (exp -> exp CONCAT exp .) ]
  ! CONCAT          [ shift and go to state 80 ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 115

    (54) exp -> exp LT exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 54 (exp -> exp LT exp .)
    LT              reduce using rule 54 (exp -> exp LT exp .)
    LTEQUALS        reduce using rule 54 (exp -> exp LT exp .)
    GT              reduce using rule 54 (exp -> exp LT exp .)
    GTEQUALS        reduce using rule 54 (exp -> exp LT exp .)
    EQUALS          reduce using rule 54 (exp -> exp LT exp .)
    DIF             reduce using rule 54 (exp -> exp LT exp .)
    AND             reduce using rule 54 (exp -> exp LT exp .)
    OR              reduce using rule 54 (exp -> exp LT exp .)
    THEN            reduce using rule 54 (exp -> exp LT exp .)
    COMMA           reduce using rule 54 (exp -> exp LT exp .)
    SEMICOLON       reduce using rule 54 (exp -> exp LT exp .)
    BREAK           reduce using rule 54 (exp -> exp LT exp .)
    LOCAL           reduce using rule 54 (exp -> exp LT exp .)
    DUALCOLON       reduce using rule 54 (exp -> exp LT exp .)
    WHILE           reduce using rule 54 (exp -> exp LT exp .)
    REPEAT          reduce using rule 54 (exp -> exp LT exp .)
    IF              reduce using rule 54 (exp -> exp LT exp .)
    FOR             reduce using rule 54 (exp -> exp LT exp .)
    RETURN          reduce using rule 54 (exp -> exp LT exp .)
    NAME            reduce using rule 54 (exp -> exp LT exp .)
    $end            reduce using rule 54 (exp -> exp LT exp .)
    END             reduce using rule 54 (exp -> exp LT exp .)
    UNTIL           reduce using rule 54 (exp -> exp LT exp .)
    ELSE            reduce using rule 54 (exp -> exp LT exp .)
    ELSEIF          reduce using rule 54 (exp -> exp LT exp .)
    RCOLCH          reduce using rule 54 (exp -> exp LT exp .)
    RPAREN          reduce using rule 54 (exp -> exp LT exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80

  ! PLUS            [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! MINUS           [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! TIMES           [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! DIVIDE          [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! EXPO            [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! PERCENTUAL      [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! CONCAT          [ reduce using rule 54 (exp -> exp LT exp .) ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 116

    (55) exp -> exp LTEQUALS exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 55 (exp -> exp LTEQUALS exp .)
    LT              reduce using rule 55 (exp -> exp LTEQUALS exp .)
    LTEQUALS        reduce using rule 55 (exp -> exp LTEQUALS exp .)
    GT              reduce using rule 55 (exp -> exp LTEQUALS exp .)
    GTEQUALS        reduce using rule 55 (exp -> exp LTEQUALS exp .)
    EQUALS          reduce using rule 55 (exp -> exp LTEQUALS exp .)
    DIF             reduce using rule 55 (exp -> exp LTEQUALS exp .)
    AND             reduce using rule 55 (exp -> exp LTEQUALS exp .)
    OR              reduce using rule 55 (exp -> exp LTEQUALS exp .)
    THEN            reduce using rule 55 (exp -> exp LTEQUALS exp .)
    COMMA           reduce using rule 55 (exp -> exp LTEQUALS exp .)
    SEMICOLON       reduce using rule 55 (exp -> exp LTEQUALS exp .)
    BREAK           reduce using rule 55 (exp -> exp LTEQUALS exp .)
    LOCAL           reduce using rule 55 (exp -> exp LTEQUALS exp .)
    DUALCOLON       reduce using rule 55 (exp -> exp LTEQUALS exp .)
    WHILE           reduce using rule 55 (exp -> exp LTEQUALS exp .)
    REPEAT          reduce using rule 55 (exp -> exp LTEQUALS exp .)
    IF              reduce using rule 55 (exp -> exp LTEQUALS exp .)
    FOR             reduce using rule 55 (exp -> exp LTEQUALS exp .)
    RETURN          reduce using rule 55 (exp -> exp LTEQUALS exp .)
    NAME            reduce using rule 55 (exp -> exp LTEQUALS exp .)
    $end            reduce using rule 55 (exp -> exp LTEQUALS exp .)
    END             reduce using rule 55 (exp -> exp LTEQUALS exp .)
    UNTIL           reduce using rule 55 (exp -> exp LTEQUALS exp .)
    ELSE            reduce using rule 55 (exp -> exp LTEQUALS exp .)
    ELSEIF          reduce using rule 55 (exp -> exp LTEQUALS exp .)
    RCOLCH          reduce using rule 55 (exp -> exp LTEQUALS exp .)
    RPAREN          reduce using rule 55 (exp -> exp LTEQUALS exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80

  ! PLUS            [ reduce using rule 55 (exp -> exp LTEQUALS exp .) ]
  ! MINUS           [ reduce using rule 55 (exp -> exp LTEQUALS exp .) ]
  ! TIMES           [ reduce using rule 55 (exp -> exp LTEQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 55 (exp -> exp LTEQUALS exp .) ]
  ! EXPO            [ reduce using rule 55 (exp -> exp LTEQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 55 (exp -> exp LTEQUALS exp .) ]
  ! CONCAT          [ reduce using rule 55 (exp -> exp LTEQUALS exp .) ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 117

    (56) exp -> exp GT exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 56 (exp -> exp GT exp .)
    LT              reduce using rule 56 (exp -> exp GT exp .)
    LTEQUALS        reduce using rule 56 (exp -> exp GT exp .)
    GT              reduce using rule 56 (exp -> exp GT exp .)
    GTEQUALS        reduce using rule 56 (exp -> exp GT exp .)
    EQUALS          reduce using rule 56 (exp -> exp GT exp .)
    DIF             reduce using rule 56 (exp -> exp GT exp .)
    AND             reduce using rule 56 (exp -> exp GT exp .)
    OR              reduce using rule 56 (exp -> exp GT exp .)
    THEN            reduce using rule 56 (exp -> exp GT exp .)
    COMMA           reduce using rule 56 (exp -> exp GT exp .)
    SEMICOLON       reduce using rule 56 (exp -> exp GT exp .)
    BREAK           reduce using rule 56 (exp -> exp GT exp .)
    LOCAL           reduce using rule 56 (exp -> exp GT exp .)
    DUALCOLON       reduce using rule 56 (exp -> exp GT exp .)
    WHILE           reduce using rule 56 (exp -> exp GT exp .)
    REPEAT          reduce using rule 56 (exp -> exp GT exp .)
    IF              reduce using rule 56 (exp -> exp GT exp .)
    FOR             reduce using rule 56 (exp -> exp GT exp .)
    RETURN          reduce using rule 56 (exp -> exp GT exp .)
    NAME            reduce using rule 56 (exp -> exp GT exp .)
    $end            reduce using rule 56 (exp -> exp GT exp .)
    END             reduce using rule 56 (exp -> exp GT exp .)
    UNTIL           reduce using rule 56 (exp -> exp GT exp .)
    ELSE            reduce using rule 56 (exp -> exp GT exp .)
    ELSEIF          reduce using rule 56 (exp -> exp GT exp .)
    RCOLCH          reduce using rule 56 (exp -> exp GT exp .)
    RPAREN          reduce using rule 56 (exp -> exp GT exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80

  ! PLUS            [ reduce using rule 56 (exp -> exp GT exp .) ]
  ! MINUS           [ reduce using rule 56 (exp -> exp GT exp .) ]
  ! TIMES           [ reduce using rule 56 (exp -> exp GT exp .) ]
  ! DIVIDE          [ reduce using rule 56 (exp -> exp GT exp .) ]
  ! EXPO            [ reduce using rule 56 (exp -> exp GT exp .) ]
  ! PERCENTUAL      [ reduce using rule 56 (exp -> exp GT exp .) ]
  ! CONCAT          [ reduce using rule 56 (exp -> exp GT exp .) ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 118

    (57) exp -> exp GTEQUALS exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 57 (exp -> exp GTEQUALS exp .)
    LT              reduce using rule 57 (exp -> exp GTEQUALS exp .)
    LTEQUALS        reduce using rule 57 (exp -> exp GTEQUALS exp .)
    GT              reduce using rule 57 (exp -> exp GTEQUALS exp .)
    GTEQUALS        reduce using rule 57 (exp -> exp GTEQUALS exp .)
    EQUALS          reduce using rule 57 (exp -> exp GTEQUALS exp .)
    DIF             reduce using rule 57 (exp -> exp GTEQUALS exp .)
    AND             reduce using rule 57 (exp -> exp GTEQUALS exp .)
    OR              reduce using rule 57 (exp -> exp GTEQUALS exp .)
    THEN            reduce using rule 57 (exp -> exp GTEQUALS exp .)
    COMMA           reduce using rule 57 (exp -> exp GTEQUALS exp .)
    SEMICOLON       reduce using rule 57 (exp -> exp GTEQUALS exp .)
    BREAK           reduce using rule 57 (exp -> exp GTEQUALS exp .)
    LOCAL           reduce using rule 57 (exp -> exp GTEQUALS exp .)
    DUALCOLON       reduce using rule 57 (exp -> exp GTEQUALS exp .)
    WHILE           reduce using rule 57 (exp -> exp GTEQUALS exp .)
    REPEAT          reduce using rule 57 (exp -> exp GTEQUALS exp .)
    IF              reduce using rule 57 (exp -> exp GTEQUALS exp .)
    FOR             reduce using rule 57 (exp -> exp GTEQUALS exp .)
    RETURN          reduce using rule 57 (exp -> exp GTEQUALS exp .)
    NAME            reduce using rule 57 (exp -> exp GTEQUALS exp .)
    $end            reduce using rule 57 (exp -> exp GTEQUALS exp .)
    END             reduce using rule 57 (exp -> exp GTEQUALS exp .)
    UNTIL           reduce using rule 57 (exp -> exp GTEQUALS exp .)
    ELSE            reduce using rule 57 (exp -> exp GTEQUALS exp .)
    ELSEIF          reduce using rule 57 (exp -> exp GTEQUALS exp .)
    RCOLCH          reduce using rule 57 (exp -> exp GTEQUALS exp .)
    RPAREN          reduce using rule 57 (exp -> exp GTEQUALS exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80

  ! PLUS            [ reduce using rule 57 (exp -> exp GTEQUALS exp .) ]
  ! MINUS           [ reduce using rule 57 (exp -> exp GTEQUALS exp .) ]
  ! TIMES           [ reduce using rule 57 (exp -> exp GTEQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 57 (exp -> exp GTEQUALS exp .) ]
  ! EXPO            [ reduce using rule 57 (exp -> exp GTEQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 57 (exp -> exp GTEQUALS exp .) ]
  ! CONCAT          [ reduce using rule 57 (exp -> exp GTEQUALS exp .) ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 119

    (58) exp -> exp EQUALS exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 58 (exp -> exp EQUALS exp .)
    LT              reduce using rule 58 (exp -> exp EQUALS exp .)
    LTEQUALS        reduce using rule 58 (exp -> exp EQUALS exp .)
    GT              reduce using rule 58 (exp -> exp EQUALS exp .)
    GTEQUALS        reduce using rule 58 (exp -> exp EQUALS exp .)
    EQUALS          reduce using rule 58 (exp -> exp EQUALS exp .)
    DIF             reduce using rule 58 (exp -> exp EQUALS exp .)
    AND             reduce using rule 58 (exp -> exp EQUALS exp .)
    OR              reduce using rule 58 (exp -> exp EQUALS exp .)
    THEN            reduce using rule 58 (exp -> exp EQUALS exp .)
    COMMA           reduce using rule 58 (exp -> exp EQUALS exp .)
    SEMICOLON       reduce using rule 58 (exp -> exp EQUALS exp .)
    BREAK           reduce using rule 58 (exp -> exp EQUALS exp .)
    LOCAL           reduce using rule 58 (exp -> exp EQUALS exp .)
    DUALCOLON       reduce using rule 58 (exp -> exp EQUALS exp .)
    WHILE           reduce using rule 58 (exp -> exp EQUALS exp .)
    REPEAT          reduce using rule 58 (exp -> exp EQUALS exp .)
    IF              reduce using rule 58 (exp -> exp EQUALS exp .)
    FOR             reduce using rule 58 (exp -> exp EQUALS exp .)
    RETURN          reduce using rule 58 (exp -> exp EQUALS exp .)
    NAME            reduce using rule 58 (exp -> exp EQUALS exp .)
    $end            reduce using rule 58 (exp -> exp EQUALS exp .)
    END             reduce using rule 58 (exp -> exp EQUALS exp .)
    UNTIL           reduce using rule 58 (exp -> exp EQUALS exp .)
    ELSE            reduce using rule 58 (exp -> exp EQUALS exp .)
    ELSEIF          reduce using rule 58 (exp -> exp EQUALS exp .)
    RCOLCH          reduce using rule 58 (exp -> exp EQUALS exp .)
    RPAREN          reduce using rule 58 (exp -> exp EQUALS exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80

  ! PLUS            [ reduce using rule 58 (exp -> exp EQUALS exp .) ]
  ! MINUS           [ reduce using rule 58 (exp -> exp EQUALS exp .) ]
  ! TIMES           [ reduce using rule 58 (exp -> exp EQUALS exp .) ]
  ! DIVIDE          [ reduce using rule 58 (exp -> exp EQUALS exp .) ]
  ! EXPO            [ reduce using rule 58 (exp -> exp EQUALS exp .) ]
  ! PERCENTUAL      [ reduce using rule 58 (exp -> exp EQUALS exp .) ]
  ! CONCAT          [ reduce using rule 58 (exp -> exp EQUALS exp .) ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 120

    (59) exp -> exp DIF exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 59 (exp -> exp DIF exp .)
    LT              reduce using rule 59 (exp -> exp DIF exp .)
    LTEQUALS        reduce using rule 59 (exp -> exp DIF exp .)
    GT              reduce using rule 59 (exp -> exp DIF exp .)
    GTEQUALS        reduce using rule 59 (exp -> exp DIF exp .)
    EQUALS          reduce using rule 59 (exp -> exp DIF exp .)
    DIF             reduce using rule 59 (exp -> exp DIF exp .)
    AND             reduce using rule 59 (exp -> exp DIF exp .)
    OR              reduce using rule 59 (exp -> exp DIF exp .)
    THEN            reduce using rule 59 (exp -> exp DIF exp .)
    COMMA           reduce using rule 59 (exp -> exp DIF exp .)
    SEMICOLON       reduce using rule 59 (exp -> exp DIF exp .)
    BREAK           reduce using rule 59 (exp -> exp DIF exp .)
    LOCAL           reduce using rule 59 (exp -> exp DIF exp .)
    DUALCOLON       reduce using rule 59 (exp -> exp DIF exp .)
    WHILE           reduce using rule 59 (exp -> exp DIF exp .)
    REPEAT          reduce using rule 59 (exp -> exp DIF exp .)
    IF              reduce using rule 59 (exp -> exp DIF exp .)
    FOR             reduce using rule 59 (exp -> exp DIF exp .)
    RETURN          reduce using rule 59 (exp -> exp DIF exp .)
    NAME            reduce using rule 59 (exp -> exp DIF exp .)
    $end            reduce using rule 59 (exp -> exp DIF exp .)
    END             reduce using rule 59 (exp -> exp DIF exp .)
    UNTIL           reduce using rule 59 (exp -> exp DIF exp .)
    ELSE            reduce using rule 59 (exp -> exp DIF exp .)
    ELSEIF          reduce using rule 59 (exp -> exp DIF exp .)
    RCOLCH          reduce using rule 59 (exp -> exp DIF exp .)
    RPAREN          reduce using rule 59 (exp -> exp DIF exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80

  ! PLUS            [ reduce using rule 59 (exp -> exp DIF exp .) ]
  ! MINUS           [ reduce using rule 59 (exp -> exp DIF exp .) ]
  ! TIMES           [ reduce using rule 59 (exp -> exp DIF exp .) ]
  ! DIVIDE          [ reduce using rule 59 (exp -> exp DIF exp .) ]
  ! EXPO            [ reduce using rule 59 (exp -> exp DIF exp .) ]
  ! PERCENTUAL      [ reduce using rule 59 (exp -> exp DIF exp .) ]
  ! CONCAT          [ reduce using rule 59 (exp -> exp DIF exp .) ]
  ! LT              [ shift and go to state 81 ]
  ! LTEQUALS        [ shift and go to state 82 ]
  ! GT              [ shift and go to state 83 ]
  ! GTEQUALS        [ shift and go to state 84 ]
  ! EQUALS          [ shift and go to state 85 ]
  ! DIF             [ shift and go to state 86 ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 121

    (60) exp -> exp AND exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 60 (exp -> exp AND exp .)
    AND             reduce using rule 60 (exp -> exp AND exp .)
    OR              reduce using rule 60 (exp -> exp AND exp .)
    THEN            reduce using rule 60 (exp -> exp AND exp .)
    COMMA           reduce using rule 60 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 60 (exp -> exp AND exp .)
    BREAK           reduce using rule 60 (exp -> exp AND exp .)
    LOCAL           reduce using rule 60 (exp -> exp AND exp .)
    DUALCOLON       reduce using rule 60 (exp -> exp AND exp .)
    WHILE           reduce using rule 60 (exp -> exp AND exp .)
    REPEAT          reduce using rule 60 (exp -> exp AND exp .)
    IF              reduce using rule 60 (exp -> exp AND exp .)
    FOR             reduce using rule 60 (exp -> exp AND exp .)
    RETURN          reduce using rule 60 (exp -> exp AND exp .)
    NAME            reduce using rule 60 (exp -> exp AND exp .)
    $end            reduce using rule 60 (exp -> exp AND exp .)
    END             reduce using rule 60 (exp -> exp AND exp .)
    UNTIL           reduce using rule 60 (exp -> exp AND exp .)
    ELSE            reduce using rule 60 (exp -> exp AND exp .)
    ELSEIF          reduce using rule 60 (exp -> exp AND exp .)
    RCOLCH          reduce using rule 60 (exp -> exp AND exp .)
    RPAREN          reduce using rule 60 (exp -> exp AND exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86

  ! PLUS            [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! TIMES           [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! DIVIDE          [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! EXPO            [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! PERCENTUAL      [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! CONCAT          [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! LTEQUALS        [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! GTEQUALS        [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! EQUALS          [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! DIF             [ reduce using rule 60 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 87 ]
  ! OR              [ shift and go to state 88 ]


state 122

    (61) exp -> exp OR exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              reduce using rule 61 (exp -> exp OR exp .)
    OR              reduce using rule 61 (exp -> exp OR exp .)
    THEN            reduce using rule 61 (exp -> exp OR exp .)
    COMMA           reduce using rule 61 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 61 (exp -> exp OR exp .)
    BREAK           reduce using rule 61 (exp -> exp OR exp .)
    LOCAL           reduce using rule 61 (exp -> exp OR exp .)
    DUALCOLON       reduce using rule 61 (exp -> exp OR exp .)
    WHILE           reduce using rule 61 (exp -> exp OR exp .)
    REPEAT          reduce using rule 61 (exp -> exp OR exp .)
    IF              reduce using rule 61 (exp -> exp OR exp .)
    FOR             reduce using rule 61 (exp -> exp OR exp .)
    RETURN          reduce using rule 61 (exp -> exp OR exp .)
    NAME            reduce using rule 61 (exp -> exp OR exp .)
    $end            reduce using rule 61 (exp -> exp OR exp .)
    END             reduce using rule 61 (exp -> exp OR exp .)
    UNTIL           reduce using rule 61 (exp -> exp OR exp .)
    ELSE            reduce using rule 61 (exp -> exp OR exp .)
    ELSEIF          reduce using rule 61 (exp -> exp OR exp .)
    RCOLCH          reduce using rule 61 (exp -> exp OR exp .)
    RPAREN          reduce using rule 61 (exp -> exp OR exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87

  ! PLUS            [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! TIMES           [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! DIVIDE          [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! EXPO            [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! PERCENTUAL      [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! CONCAT          [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! LTEQUALS        [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! GTEQUALS        [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! EQUALS          [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! DIF             [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 61 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 88 ]


state 123

    (94) struct_repeat -> REPEAT block UNTIL exp .
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    BREAK           reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    DO              reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    LOCAL           reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    DUALCOLON       reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    WHILE           reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    REPEAT          reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    IF              reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    FOR             reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    RETURN          reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    NAME            reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    $end            reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    END             reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    UNTIL           reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    ELSE            reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    ELSEIF          reduce using rule 94 (struct_repeat -> REPEAT block UNTIL exp .)
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 124

    (84) if -> IF exp THEN block . END
    (85) if -> IF exp THEN block . else
    (86) if -> IF exp THEN block . else_if else
    (89) else -> . ELSE block END
    (87) else_if -> . ELSEIF exp THEN block
    (88) else_if -> . ELSEIF exp THEN block else_if

    END             shift and go to state 133
    ELSE            shift and go to state 136
    ELSEIF          shift and go to state 137

    else                           shift and go to state 134
    else_if                        shift and go to state 135

state 125

    (91) struct_for -> FOR NAME ATRIB exp . COMMA exp DO block END
    (92) struct_for -> FOR NAME ATRIB exp . COMMA exp COMMA exp DO block END
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    COMMA           shift and go to state 138
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 126

    (30) list_names -> NAME . COMMA list_names
    (31) list_names -> NAME .

    COMMA           shift and go to state 95
    IN              reduce using rule 31 (list_names -> NAME .)


state 127

    (30) list_names -> NAME COMMA list_names .

    IN              reduce using rule 30 (list_names -> NAME COMMA list_names .)


state 128

    (93) struct_for_in -> FOR list_names IN list_exps . DO block END

    DO              shift and go to state 139


state 129

    (34) list_exps -> exp COMMA list_exps .

    SEMICOLON       reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    BREAK           reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    DO              reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    LOCAL           reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    DUALCOLON       reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    WHILE           reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    REPEAT          reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    IF              reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    FOR             reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    RETURN          reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    NAME            reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    $end            reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    END             reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    UNTIL           reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    ELSE            reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    ELSEIF          reduce using rule 34 (list_exps -> exp COMMA list_exps .)
    RPAREN          reduce using rule 34 (list_exps -> exp COMMA list_exps .)


state 130

    (66) body_function -> LPAREN list_pars RPAREN . block END
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    block                          shift and go to state 140
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 131

    (68) list_pars -> list_names2 COMMA . VARARGS
    (32) list_names2 -> list_names2 COMMA . NAME

    VARARGS         shift and go to state 141
    NAME            shift and go to state 142


state 132

    (90) struct_while -> WHILE exp DO block END .

    BREAK           reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    DO              reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    LOCAL           reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    DUALCOLON       reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    WHILE           reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    REPEAT          reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    IF              reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    FOR             reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    RETURN          reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    NAME            reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    $end            reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    END             reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    UNTIL           reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    ELSE            reduce using rule 90 (struct_while -> WHILE exp DO block END .)
    ELSEIF          reduce using rule 90 (struct_while -> WHILE exp DO block END .)


state 133

    (84) if -> IF exp THEN block END .

    BREAK           reduce using rule 84 (if -> IF exp THEN block END .)
    DO              reduce using rule 84 (if -> IF exp THEN block END .)
    LOCAL           reduce using rule 84 (if -> IF exp THEN block END .)
    DUALCOLON       reduce using rule 84 (if -> IF exp THEN block END .)
    WHILE           reduce using rule 84 (if -> IF exp THEN block END .)
    REPEAT          reduce using rule 84 (if -> IF exp THEN block END .)
    IF              reduce using rule 84 (if -> IF exp THEN block END .)
    FOR             reduce using rule 84 (if -> IF exp THEN block END .)
    RETURN          reduce using rule 84 (if -> IF exp THEN block END .)
    NAME            reduce using rule 84 (if -> IF exp THEN block END .)
    $end            reduce using rule 84 (if -> IF exp THEN block END .)
    END             reduce using rule 84 (if -> IF exp THEN block END .)
    UNTIL           reduce using rule 84 (if -> IF exp THEN block END .)
    ELSE            reduce using rule 84 (if -> IF exp THEN block END .)
    ELSEIF          reduce using rule 84 (if -> IF exp THEN block END .)


state 134

    (85) if -> IF exp THEN block else .

    BREAK           reduce using rule 85 (if -> IF exp THEN block else .)
    DO              reduce using rule 85 (if -> IF exp THEN block else .)
    LOCAL           reduce using rule 85 (if -> IF exp THEN block else .)
    DUALCOLON       reduce using rule 85 (if -> IF exp THEN block else .)
    WHILE           reduce using rule 85 (if -> IF exp THEN block else .)
    REPEAT          reduce using rule 85 (if -> IF exp THEN block else .)
    IF              reduce using rule 85 (if -> IF exp THEN block else .)
    FOR             reduce using rule 85 (if -> IF exp THEN block else .)
    RETURN          reduce using rule 85 (if -> IF exp THEN block else .)
    NAME            reduce using rule 85 (if -> IF exp THEN block else .)
    $end            reduce using rule 85 (if -> IF exp THEN block else .)
    END             reduce using rule 85 (if -> IF exp THEN block else .)
    UNTIL           reduce using rule 85 (if -> IF exp THEN block else .)
    ELSE            reduce using rule 85 (if -> IF exp THEN block else .)
    ELSEIF          reduce using rule 85 (if -> IF exp THEN block else .)


state 135

    (86) if -> IF exp THEN block else_if . else
    (89) else -> . ELSE block END

    ELSE            shift and go to state 136

    else                           shift and go to state 143

state 136

    (89) else -> ELSE . block END
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    block                          shift and go to state 144
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 137

    (87) else_if -> ELSEIF . exp THEN block
    (88) else_if -> ELSEIF . exp THEN block else_if
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 145
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 138

    (91) struct_for -> FOR NAME ATRIB exp COMMA . exp DO block END
    (92) struct_for -> FOR NAME ATRIB exp COMMA . exp COMMA exp DO block END
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 146
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 139

    (93) struct_for_in -> FOR list_names IN list_exps DO . block END
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    block                          shift and go to state 147
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 140

    (66) body_function -> LPAREN list_pars RPAREN block . END

    END             shift and go to state 148


state 141

    (68) list_pars -> list_names2 COMMA VARARGS .

    RPAREN          reduce using rule 68 (list_pars -> list_names2 COMMA VARARGS .)


state 142

    (32) list_names2 -> list_names2 COMMA NAME .

    COMMA           reduce using rule 32 (list_names2 -> list_names2 COMMA NAME .)
    RPAREN          reduce using rule 32 (list_names2 -> list_names2 COMMA NAME .)


state 143

    (86) if -> IF exp THEN block else_if else .

    BREAK           reduce using rule 86 (if -> IF exp THEN block else_if else .)
    DO              reduce using rule 86 (if -> IF exp THEN block else_if else .)
    LOCAL           reduce using rule 86 (if -> IF exp THEN block else_if else .)
    DUALCOLON       reduce using rule 86 (if -> IF exp THEN block else_if else .)
    WHILE           reduce using rule 86 (if -> IF exp THEN block else_if else .)
    REPEAT          reduce using rule 86 (if -> IF exp THEN block else_if else .)
    IF              reduce using rule 86 (if -> IF exp THEN block else_if else .)
    FOR             reduce using rule 86 (if -> IF exp THEN block else_if else .)
    RETURN          reduce using rule 86 (if -> IF exp THEN block else_if else .)
    NAME            reduce using rule 86 (if -> IF exp THEN block else_if else .)
    $end            reduce using rule 86 (if -> IF exp THEN block else_if else .)
    END             reduce using rule 86 (if -> IF exp THEN block else_if else .)
    UNTIL           reduce using rule 86 (if -> IF exp THEN block else_if else .)
    ELSE            reduce using rule 86 (if -> IF exp THEN block else_if else .)
    ELSEIF          reduce using rule 86 (if -> IF exp THEN block else_if else .)


state 144

    (89) else -> ELSE block . END

    END             shift and go to state 149


state 145

    (87) else_if -> ELSEIF exp . THEN block
    (88) else_if -> ELSEIF exp . THEN block else_if
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    THEN            shift and go to state 150
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 146

    (91) struct_for -> FOR NAME ATRIB exp COMMA exp . DO block END
    (92) struct_for -> FOR NAME ATRIB exp COMMA exp . COMMA exp DO block END
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              shift and go to state 152
    COMMA           shift and go to state 151
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 147

    (93) struct_for_in -> FOR list_names IN list_exps DO block . END

    END             shift and go to state 153


state 148

    (66) body_function -> LPAREN list_pars RPAREN block END .

    FUNCTION        reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    BREAK           reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    DO              reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    LOCAL           reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    DUALCOLON       reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    WHILE           reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    REPEAT          reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    IF              reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    FOR             reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    RETURN          reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    NAME            reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    $end            reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    PLUS            reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    MINUS           reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    TIMES           reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    DIVIDE          reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    EXPO            reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    PERCENTUAL      reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    CONCAT          reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    LT              reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    LTEQUALS        reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    GT              reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    GTEQUALS        reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    EQUALS          reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    DIF             reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    AND             reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    OR              reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    THEN            reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    COMMA           reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    SEMICOLON       reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    END             reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    UNTIL           reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    ELSE            reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    ELSEIF          reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    RCOLCH          reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)
    RPAREN          reduce using rule 66 (body_function -> LPAREN list_pars RPAREN block END .)


state 149

    (89) else -> ELSE block END .

    BREAK           reduce using rule 89 (else -> ELSE block END .)
    DO              reduce using rule 89 (else -> ELSE block END .)
    LOCAL           reduce using rule 89 (else -> ELSE block END .)
    DUALCOLON       reduce using rule 89 (else -> ELSE block END .)
    WHILE           reduce using rule 89 (else -> ELSE block END .)
    REPEAT          reduce using rule 89 (else -> ELSE block END .)
    IF              reduce using rule 89 (else -> ELSE block END .)
    FOR             reduce using rule 89 (else -> ELSE block END .)
    RETURN          reduce using rule 89 (else -> ELSE block END .)
    NAME            reduce using rule 89 (else -> ELSE block END .)
    $end            reduce using rule 89 (else -> ELSE block END .)
    END             reduce using rule 89 (else -> ELSE block END .)
    UNTIL           reduce using rule 89 (else -> ELSE block END .)
    ELSE            reduce using rule 89 (else -> ELSE block END .)
    ELSEIF          reduce using rule 89 (else -> ELSE block END .)


state 150

    (87) else_if -> ELSEIF exp THEN . block
    (88) else_if -> ELSEIF exp THEN . block else_if
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    block                          shift and go to state 154
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 151

    (92) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA . exp DO block END
    (36) exp -> . NIL
    (37) exp -> . FALSE
    (38) exp -> . TRUE
    (39) exp -> . NUMBER
    (40) exp -> . STRING
    (41) exp -> . VARARGS
    (42) exp -> . def_function
    (43) exp -> . prefix_exp
    (44) exp -> . TAG exp
    (45) exp -> . MINUS exp
    (46) exp -> . NOT exp
    (47) exp -> . exp PLUS exp
    (48) exp -> . exp MINUS exp
    (49) exp -> . exp TIMES exp
    (50) exp -> . exp DIVIDE exp
    (51) exp -> . exp EXPO exp
    (52) exp -> . exp PERCENTUAL exp
    (53) exp -> . exp CONCAT exp
    (54) exp -> . exp LT exp
    (55) exp -> . exp LTEQUALS exp
    (56) exp -> . exp GT exp
    (57) exp -> . exp GTEQUALS exp
    (58) exp -> . exp EQUALS exp
    (59) exp -> . exp DIF exp
    (60) exp -> . exp AND exp
    (61) exp -> . exp OR exp
    (65) def_function -> . function
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function
    (83) function -> . FUNCTION name_function body_function
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (62) call_function -> . prefix_exp args

    NIL             shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARARGS         shift and go to state 47
    TAG             shift and go to state 50
    MINUS           shift and go to state 51
    NOT             shift and go to state 52
    FUNCTION        shift and go to state 5
    NAME            shift and go to state 21

    exp                            shift and go to state 155
    def_function                   shift and go to state 48
    prefix_exp                     shift and go to state 49
    function                       shift and go to state 53
    var                            shift and go to state 54
    call_function                  shift and go to state 35

state 152

    (91) struct_for -> FOR NAME ATRIB exp COMMA exp DO . block END
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    block                          shift and go to state 156
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 153

    (93) struct_for_in -> FOR list_names IN list_exps DO block END .

    BREAK           reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    DO              reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    LOCAL           reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    DUALCOLON       reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    WHILE           reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    REPEAT          reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    IF              reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    FOR             reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    RETURN          reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    NAME            reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    $end            reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    END             reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    UNTIL           reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    ELSE            reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)
    ELSEIF          reduce using rule 93 (struct_for_in -> FOR list_names IN list_exps DO block END .)


state 154

    (87) else_if -> ELSEIF exp THEN block .
    (88) else_if -> ELSEIF exp THEN block . else_if
    (87) else_if -> . ELSEIF exp THEN block
    (88) else_if -> . ELSEIF exp THEN block else_if

    ELSE            reduce using rule 87 (else_if -> ELSEIF exp THEN block .)
    ELSEIF          shift and go to state 137

    else_if                        shift and go to state 157

state 155

    (92) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp . DO block END
    (47) exp -> exp . PLUS exp
    (48) exp -> exp . MINUS exp
    (49) exp -> exp . TIMES exp
    (50) exp -> exp . DIVIDE exp
    (51) exp -> exp . EXPO exp
    (52) exp -> exp . PERCENTUAL exp
    (53) exp -> exp . CONCAT exp
    (54) exp -> exp . LT exp
    (55) exp -> exp . LTEQUALS exp
    (56) exp -> exp . GT exp
    (57) exp -> exp . GTEQUALS exp
    (58) exp -> exp . EQUALS exp
    (59) exp -> exp . DIF exp
    (60) exp -> exp . AND exp
    (61) exp -> exp . OR exp

    DO              shift and go to state 158
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    TIMES           shift and go to state 76
    DIVIDE          shift and go to state 77
    EXPO            shift and go to state 78
    PERCENTUAL      shift and go to state 79
    CONCAT          shift and go to state 80
    LT              shift and go to state 81
    LTEQUALS        shift and go to state 82
    GT              shift and go to state 83
    GTEQUALS        shift and go to state 84
    EQUALS          shift and go to state 85
    DIF             shift and go to state 86
    AND             shift and go to state 87
    OR              shift and go to state 88


state 156

    (91) struct_for -> FOR NAME ATRIB exp COMMA exp DO block . END

    END             shift and go to state 159


state 157

    (88) else_if -> ELSEIF exp THEN block else_if .

    ELSE            reduce using rule 88 (else_if -> ELSEIF exp THEN block else_if .)


state 158

    (92) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO . block END
    (4) block -> . command
    (5) block -> . command block
    (6) command -> . list_vars ATRIB list_exps
    (7) command -> . call_function
    (8) command -> . rotulo
    (9) command -> . BREAK
    (10) command -> . DO block END
    (11) command -> . struct_while
    (12) command -> . struct_repeat
    (13) command -> . if
    (14) command -> . struct_for
    (15) command -> . struct_for_in
    (16) command -> . LOCAL list_vars ATRIB list_exps
    (17) command -> . command_ret
    (24) list_vars -> . var
    (25) list_vars -> . var COMMA list_vars
    (62) call_function -> . prefix_exp args
    (21) rotulo -> . DUALCOLON NAME DUALCOLON
    (90) struct_while -> . WHILE exp DO block END
    (94) struct_repeat -> . REPEAT block UNTIL exp
    (84) if -> . IF exp THEN block END
    (85) if -> . IF exp THEN block else
    (86) if -> . IF exp THEN block else_if else
    (91) struct_for -> . FOR NAME ATRIB exp COMMA exp DO block END
    (92) struct_for -> . FOR NAME ATRIB exp COMMA exp COMMA exp DO block END
    (93) struct_for_in -> . FOR list_names IN list_exps DO block END
    (18) command_ret -> . RETURN SEMICOLON
    (19) command_ret -> . RETURN list_exps
    (20) command_ret -> . RETURN list_exps SEMICOLON
    (26) var -> . NAME
    (27) var -> . prefix_exp LCOLCH exp RCOLCH
    (28) prefix_exp -> . var
    (29) prefix_exp -> . call_function

    BREAK           shift and go to state 9
    DO              shift and go to state 10
    LOCAL           shift and go to state 16
    DUALCOLON       shift and go to state 20
    WHILE           shift and go to state 22
    REPEAT          shift and go to state 23
    IF              shift and go to state 24
    FOR             shift and go to state 25
    RETURN          shift and go to state 26
    NAME            shift and go to state 21

    block                          shift and go to state 160
    command                        shift and go to state 4
    list_vars                      shift and go to state 6
    call_function                  shift and go to state 7
    rotulo                         shift and go to state 8
    struct_while                   shift and go to state 11
    struct_repeat                  shift and go to state 12
    if                             shift and go to state 13
    struct_for                     shift and go to state 14
    struct_for_in                  shift and go to state 15
    command_ret                    shift and go to state 17
    var                            shift and go to state 18
    prefix_exp                     shift and go to state 19

state 159

    (91) struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .

    BREAK           reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    DO              reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    LOCAL           reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    DUALCOLON       reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    WHILE           reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    REPEAT          reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    IF              reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    FOR             reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    RETURN          reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    NAME            reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    $end            reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    END             reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    UNTIL           reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    ELSE            reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)
    ELSEIF          reduce using rule 91 (struct_for -> FOR NAME ATRIB exp COMMA exp DO block END .)


state 160

    (92) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block . END

    END             shift and go to state 161


state 161

    (92) struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .

    BREAK           reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    DO              reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    LOCAL           reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    DUALCOLON       reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    WHILE           reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    REPEAT          reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    IF              reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    FOR             reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    RETURN          reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    NAME            reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    $end            reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    END             reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    UNTIL           reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    ELSE            reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)
    ELSEIF          reduce using rule 92 (struct_for -> FOR NAME ATRIB exp COMMA exp COMMA exp DO block END .)

